
{"task_id": "train/15800", "prompt": "import re\n\n\ndef pass_validity(p):\n    \"\"\"Write a function to return true if the password is valid.\n    \"\"\"\n", "entry_point": "pass_validity", "canonical_solution": "    x = True\n    while x:\n        if len(p) < 6 or len(p) > 12:\n            break\n        elif not re.search(\"[a-z]\", p):\n            break\n        elif not re.search(\"[0-9]\", p):\n            break\n        elif not re.search(\"[A-Z]\", p):\n            break\n        elif not re.search(\"[$#@]\", p):\n            break\n        elif re.search(\"\\s\", p):\n            break\n        else:\n            return True\n            x = False\n            break\n    if x:\n        return False\n", "test": "def check(candidate):\n    assert candidate(\"password\")==False\n    assert candidate(\"Password@10\")==True\n    assert candidate(\"password@10\")==False\n", "cot": "How to solve:\nStep 1. Initialize x as True.\nStep 2. While x is True, check password validity conditions:\n    - Check if password length is between 6 and 12.\n    - Check if password contains lowercase letters.\n    - Check if password contains digits.\n    - Check if password contains uppercase letters.\n    - Check if password contains any of the special characters [$#@].\n    - Check if password does not contain whitespace.\n    - If all conditions are met, return True and set x to False.\nStep 3. If x is still True, return False."}
{"task_id": "train/15801", "prompt": "import re\n\n\ndef check_substring(string, sample):\n    \"\"\"Write a function to check if the given string starts with a substring using regex.\n    \"\"\"\n", "entry_point": "check_substring", "canonical_solution": "    if sample in string:\n        y = \"\\A\" + sample\n        x = re.search(y, string)\n        if x:\n            return \"string starts with the given substring\"\n        else:\n            return \"string doesnt start with the given substring\"\n    else:\n        return \"entered string isnt a substring\"\n", "test": "def check(candidate):\n    assert candidate(\"dreams for dreams makes life fun\", \"makes\") == 'string doesnt start with the given substring'\n    assert candidate(\"Hi there how are you Hi alex\", \"Hi\") == 'string starts with the given substring'\n    assert candidate(\"Its been a long day\", \"been\") == 'string doesnt start with the given substring'\n", "cot": "How to solve:\nStep 1. Check if the sample substring is present in the given string.\nStep 2. If the sample substring is present, construct a regex pattern by adding \"\\A\" to the sample.\nStep 3. Use re.search to find the pattern in the string.\nStep 4. If the pattern is found at the start of the string, return \"string starts with the given substring\".\nStep 5. If the pattern is not found at the start, return \"string doesn't start with the given substring\".\nStep 6. If the sample substring is not present in the string, return \"entered string isn't a substring\"."}
{"task_id": "train/15802", "prompt": "def remove_even(l):\n    \"\"\"Write a python function to remove even numbers from a given list.\n    \"\"\"\n", "entry_point": "remove_even", "canonical_solution": "    for i in l:\n        if i % 2 == 0:\n            l.remove(i)\n    return l\n", "test": "def check(candidate):\n    assert candidate([1,3,5,2]) == [1,3,5]\n    assert candidate([5,6,7]) == [5,7]\n    assert candidate([1,2,3,4]) == [1,3]\n", "cot": "How to solve:\nStep 1. Iterate through the list.\nStep 2. Check if the current element is even (i % 2 == 0).\nStep 3. If the element is even, remove it from the list.\nStep 4. Continue iterating until all elements are checked.\nStep 5. Return the modified list after removing even numbers.\n\nNote: Modifying a list while iterating over it can lead to unexpected behavior. It's better to create a new list with the elements that are not even instead of modifying the original list."}
{"task_id": "train/15803", "prompt": "def access_elements(nums, list_index):\n    \"\"\"Write a python function to access multiple elements of specified index from a given list.\n    \"\"\"\n", "entry_point": "access_elements", "canonical_solution": "    result = [nums[i] for i in list_index]\n    return result\n", "test": "def check(candidate):\n    assert candidate([2,3,8,4,7,9],[0,3,5]) == [2, 4, 9]\n    assert candidate([1, 2, 3, 4, 5],[1,2]) == [2,3]\n    assert candidate([1,0,2,3],[0,1]) == [1,0]\n", "cot": "How to solve:\nStep 1. Create an empty list to store the accessed elements.\nStep 2. Use list comprehension to iterate through the list of indices.\nStep 3. For each index in the list_index, access the element at that index from the nums list and append it to the result list.\nStep 4. Return the result list containing the accessed elements."}
{"task_id": "train/15804", "prompt": "def check_Type_Of_Triangle(a, b, c):\n    \"\"\"Write a python function to find the type of triangle from the given sides.\n    \"\"\"\n", "entry_point": "check_Type_Of_Triangle", "canonical_solution": "    sqa = pow(a, 2)\n    sqb = pow(b, 2)\n    sqc = pow(c, 2)\n    if sqa == sqa + sqb or sqb == sqa + sqc or sqc == sqa + sqb:\n        return \"Right-angled Triangle\"\n    elif sqa > sqc + sqb or sqb > sqa + sqc or sqc > sqa + sqb:\n        return \"Obtuse-angled Triangle\"\n    else:\n        return \"Acute-angled Triangle\"\n", "test": "def check(candidate):\n    assert candidate(1,2,3) == \"Obtuse-angled Triangle\"\n    assert candidate(2,2,2) == \"Acute-angled Triangle\"\n    assert candidate(1,0,1) == \"Right-angled Triangle\"\n", "cot": "How to solve:\nStep 1. Calculate the squares of the given sides.\nStep 2. Check if any of the sides satisfy the conditions for a right-angled triangle.\nStep 3. If not a right-angled triangle, check if any of the sides satisfy the conditions for an obtuse-angled triangle.\nStep 4. If none of the above conditions are met, it is an acute-angled triangle."}
{"task_id": "train/15805", "prompt": "def sum_column(list1, C):\n    \"\"\"Write a function to sum a specific column of a list in a given list of lists.\n    \"\"\"\n", "entry_point": "sum_column", "canonical_solution": "    result = sum(row[C] for row in list1)\n    return result\n", "test": "def check(candidate):\n    assert candidate( [[1,2,3,2],[4,5,6,2],[7,8,9,5],],0)==12\n    assert candidate( [[1,2,3,2],[4,5,6,2],[7,8,9,5],],1)==15\n    assert candidate( [[1,2,3,2],[4,5,6,2],[7,8,9,5],],3)==9\n", "cot": "How to solve:\nStep 1. Initialize a variable 'result' to 0.\nStep 2. Iterate through each row in 'list1'.\nStep 3. Add the value at index 'C' of each row to 'result'.\nStep 4. Return the final 'result' which is the sum of the specific column."}
{"task_id": "train/15806", "prompt": "def count_alpha_dig_spl(string):\n    \"\"\"Write a function to count alphabets,digits and special charactes in a given string.\n    \"\"\"\n", "entry_point": "count_alpha_dig_spl", "canonical_solution": "    alphabets = digits = special = 0\n    for i in range(len(string)):\n        if string[i].isalpha():\n            alphabets = alphabets + 1\n        elif string[i].isdigit():\n            digits = digits + 1\n        else:\n            special = special + 1\n    return (alphabets, digits, special)\n", "test": "def check(candidate):\n    assert candidate(\"abc!@#123\")==(3,3,3)\n    assert candidate(\"dgsuy@#$%&1255\")==(5,4,5)\n    assert candidate(\"fjdsif627348#%$^&\")==(6,6,5)\n", "cot": "How to solve:\nStep 1. Initialize counters for alphabets, digits, and special characters as 0.\nStep 2. Iterate through each character in the input string.\n    - If the character is an alphabet, increment the alphabet counter.\n    - If the character is a digit, increment the digit counter.\n    - If the character is neither alphabet nor digit, increment the special character counter.\nStep 3. Return a tuple containing the counts of alphabets, digits, and special characters."}
{"task_id": "train/15807", "prompt": "from collections import Counter\n\n\ndef second_frequent(input):\n    \"\"\"Write a function to find out the second most repeated (or frequent) string in the given sequence.\n    \"\"\"\n", "entry_point": "second_frequent", "canonical_solution": "    dict = Counter(input)\n    value = sorted(dict.values(), reverse=True)\n    second_large = value[1]\n    for (key, val) in dict.items():\n        if val == second_large:\n            return key\n", "test": "def check(candidate):\n    assert candidate(['aaa','bbb','ccc','bbb','aaa','aaa']) == 'bbb'\n    assert candidate(['abc','bcd','abc','bcd','bcd','bcd']) == 'abc'\n    assert candidate(['cdma','gsm','hspa','gsm','cdma','cdma']) == 'gsm'\n", "cot": "How to solve:\nStep 1. Import Counter from collections.\nStep 2. Create a Counter dictionary for the input sequence.\nStep 3. Sort the values of the Counter dictionary in descending order.\nStep 4. Get the second largest value from the sorted values.\nStep 5. Iterate through the Counter dictionary items.\n    - If the value of an item matches the second largest value, return the key.\nStep 6. The returned key is the second most repeated string in the given sequence."}
{"task_id": "train/15808", "prompt": "import math\n\n\ndef round_up(a, digits):\n    \"\"\"Write a function to round up a number to specific digits.\n    \"\"\"\n", "entry_point": "round_up", "canonical_solution": "    n = 10 ** -digits\n    return round(math.ceil(a / n) * n, digits)\n", "test": "def check(candidate):\n    assert candidate(123.01247,0)==124\n    assert candidate(123.01247,1)==123.1\n    assert candidate(123.01247,2)==123.02\n", "cot": "How to solve:\nStep 1. Calculate the value of n as 10 raised to the power of negative digits.\nStep 2. Divide the input number 'a' by n and apply math.ceil to round up to the nearest integer.\nStep 3. Multiply the result by n to get the rounded up number with specific digits.\nStep 4. Return the rounded up number."}
{"task_id": "train/15809", "prompt": "def count_Pairs(arr, n):\n    \"\"\"Write a python function to count equal element pairs from the given array.\n    \"\"\"\n", "entry_point": "count_Pairs", "canonical_solution": "    cnt = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if arr[i] == arr[j]:\n                cnt += 1\n    return cnt\n", "test": "def check(candidate):\n    assert candidate([1,1,1,1],4) == 6\n    assert candidate([1,5,1],3) == 1\n    assert candidate([3,2,1,7,8,9],6) == 0\n", "cot": "How to solve:\nStep 1. Initialize a counter variable cnt as 0.\nStep 2. Iterate through the array using two nested loops.\n    - Compare each element with all elements after it.\n    - If two elements are equal, increment cnt by 1.\nStep 3. Return the final count of equal element pairs."}
{"task_id": "train/15810", "prompt": "import re\n\n\ndef extract_max(input):\n    \"\"\"Write a function to extract the maximum numeric value from a string by using regex.\n    \"\"\"\n", "entry_point": "extract_max", "canonical_solution": "    numbers = re.findall(\"\\d+\", input)\n    numbers = map(int, numbers)\n    return max(numbers)\n", "test": "def check(candidate):\n    assert candidate('100klh564abc365bg') == 564\n    assert candidate('hello300how546mer231') == 546\n    assert candidate('its233beenalong343journey234') == 343\n", "cot": "How to solve:\nStep 1. Import the 're' module for regular expressions.\nStep 2. Define a function 'extract_max' that takes a string 'input'.\nStep 3. Use re.findall(\"\\d+\", input) to extract all numeric values from the input string.\nStep 4. Convert the extracted numbers to integers using map(int, numbers).\nStep 5. Return the maximum value from the extracted numbers using max(numbers)."}
{"task_id": "train/15811", "prompt": "def get_key(dict):\n    \"\"\"Write a function to get dictionary keys as a list.\n    \"\"\"\n", "entry_point": "get_key", "canonical_solution": "    list = []\n    for key in dict.keys():\n        list.append(key)\n    return list\n", "test": "def check(candidate):\n    assert candidate({1:'python',2:'java'})==[1,2]\n    assert candidate({10:'red',20:'blue',30:'black'})==[10,20,30]\n    assert candidate({27:'language',39:'java',44:'little'})==[27,39,44]\n", "cot": "How to solve:\nStep 1. Initialize an empty list.\nStep 2. Iterate through keys of the input dictionary.\n    - Append each key to the list.\nStep 3. Return the list containing all the keys of the dictionary."}
{"task_id": "train/15812", "prompt": "def generate_matrix(n):\n    \"\"\"Write a function to generate a square matrix filled with elements from 1 to n raised to the power of 2 in spiral order.\n    \"\"\"\n", "entry_point": "generate_matrix", "canonical_solution": "    if n <= 0:\n        return []\n    matrix = [row[:] for row in [[0] * n] * n]\n    row_st = 0\n    row_ed = n - 1\n    col_st = 0\n    col_ed = n - 1\n    current = 1\n    while True:\n        if current > n * n:\n            break\n        for c in range(col_st, col_ed + 1):\n            matrix[row_st][c] = current\n            current += 1\n        row_st += 1\n        for r in range(row_st, row_ed + 1):\n            matrix[r][col_ed] = current\n            current += 1\n        col_ed -= 1\n        for c in range(col_ed, col_st - 1, -1):\n            matrix[row_ed][c] = current\n            current += 1\n        row_ed -= 1\n        for r in range(row_ed, row_st - 1, -1):\n            matrix[r][col_st] = current\n            current += 1\n        col_st += 1\n    return matrix\n", "test": "def check(candidate):\n    assert candidate(3)==[[1, 2, 3], [8, 9, 4], [7, 6, 5]] \n    assert candidate(2)==[[1,2],[4,3]]\n    assert candidate(7)==[[1, 2, 3, 4, 5, 6, 7], [24, 25, 26, 27, 28, 29, 8], [23, 40, 41, 42, 43, 30, 9], [22, 39, 48, 49, 44, 31, 10], [21, 38, 47, 46, 45, 32, 11], [20, 37, 36, 35, 34, 33, 12], [19, 18, 17, 16, 15, 14, 13]]\n", "cot": "How to solve:\nStep 1. Check if n is less than or equal to 0, return an empty list.\nStep 2. Create a square matrix filled with zeros of size n x n.\nStep 3. Initialize variables for spiral traversal: row_st, row_ed, col_st, col_ed, and current.\nStep 4. Iterate in a spiral order:\n    - Fill the top row from left to right.\n    - Fill the right column from top to bottom.\n    - Fill the bottom row from right to left.\n    - Fill the left column from bottom to top.\nStep 5. Increment/decrement row/column indices accordingly.\nStep 6. Return the generated matrix."}
{"task_id": "train/15813", "prompt": "def slope(x1, y1, x2, y2):\n    \"\"\"Write a python function to find the slope of a line.\n    \"\"\"\n", "entry_point": "slope", "canonical_solution": "    return (float)(y2 - y1) / (x2 - x1)\n", "test": "def check(candidate):\n    assert candidate(4,2,2,5) == -1.5\n    assert candidate(2,4,4,6) == 1\n    assert candidate(1,2,4,2) == 0\n", "cot": "How to solve:\nStep 1. Calculate the difference in y-coordinates (y2 - y1).\nStep 2. Calculate the difference in x-coordinates (x2 - x1).\nStep 3. Divide the difference in y-coordinates by the difference in x-coordinates to find the slope of the line.\nStep 4. Return the calculated slope."}
{"task_id": "train/15814", "prompt": "from sys import maxsize\n\n\ndef max_sub_array_sum(a, size):\n    \"\"\"Write a function to find length of the subarray having maximum sum.\n    \"\"\"\n", "entry_point": "max_sub_array_sum", "canonical_solution": "    max_so_far = -maxsize - 1\n    max_ending_here = 0\n    start = 0\n    end = 0\n    s = 0\n    for i in range(0, size):\n        max_ending_here += a[i]\n        if max_so_far < max_ending_here:\n            max_so_far = max_ending_here\n            start = s\n            end = i\n        if max_ending_here < 0:\n            max_ending_here = 0\n            s = i + 1\n    return end - start + 1\n", "test": "def check(candidate):\n    assert candidate([-2, -3, 4, -1, -2, 1, 5, -3],8) == 5\n    assert candidate([1, -2, 1, 1, -2, 1],6) == 2\n    assert candidate([-1, -2, 3, 4, 5],5) == 3\n", "cot": "How to solve:\nStep 1. Initialize max_so_far as the smallest possible integer.\nStep 2. Initialize max_ending_here and other variables.\nStep 3. Iterate through the array.\n    - Update max_ending_here by adding the current element.\n    - If max_so_far is less than max_ending_here, update max_so_far, start, and end.\n    - If max_ending_here becomes negative, reset it to 0 and update the start index.\nStep 4. Return the length of the subarray with the maximum sum (end - start + 1)."}
{"task_id": "train/15815", "prompt": "def cube_Sum(n):\n    \"\"\"Write a python function to find the cube sum of first n odd natural numbers.\n    \"\"\"\n", "entry_point": "cube_Sum", "canonical_solution": "    sum = 0\n    for i in range(0, n):\n        sum += (2 * i + 1) * (2 * i + 1) * (2 * i + 1)\n    return sum\n", "test": "def check(candidate):\n    assert candidate(2) == 28\n    assert candidate(3) == 153\n    assert candidate(4) == 496\n", "cot": "How to solve:\nStep 1. Initialize sum as 0.\nStep 2. Iterate through the range from 0 to n.\n    - Calculate the cube of each odd number (2 * i + 1).\n    - Add the cube to the sum.\nStep 3. Return the final sum as the cube sum of the first n odd natural numbers."}
{"task_id": "train/15816", "prompt": "def min_Swaps(s1, s2):\n    \"\"\"Write a python function to find minimum number swaps required to make two binary strings equal.\n    \"\"\"\n", "entry_point": "min_Swaps", "canonical_solution": "    c0 = 0\n    c1 = 0\n    for i in range(len(s1)):\n        if s1[i] == \"0\" and s2[i] == \"1\":\n            c0 += 1\n        elif s1[i] == \"1\" and s2[i] == \"0\":\n            c1 += 1\n    result = c0 // 2 + c1 // 2\n    if c0 % 2 == 0 and c1 % 2 == 0:\n        return result\n    elif (c0 + c1) % 2 == 0:\n        return result + 2\n    else:\n        return -1\n", "test": "def check(candidate):\n    assert candidate(\"0011\",\"1111\") == 1\n    assert candidate(\"00011\",\"01001\") == 2\n    assert candidate(\"111\",\"111\") == 0\n", "cot": "How to solve:\nStep 1. Initialize two counters c0 and c1 to count the differences between s1 and s2.\nStep 2. Iterate through the strings and count the differences where s1[i] is \"0\" and s2[i] is \"1\" and vice versa.\nStep 3. Calculate the result by dividing c0 and c1 by 2 and summing them.\nStep 4. Check if both c0 and c1 are even, return the result.\nStep 5. If the sum of c0 and c1 is even, return the result plus 2.\nStep 6. Otherwise, return -1."}
{"task_id": "train/15817", "prompt": "def sort_tuple(tup):\n    \"\"\"Write a function to sort the tuples alphabetically by the first item of each tuple.\n    \"\"\"\n", "entry_point": "sort_tuple", "canonical_solution": "    n = len(tup)\n    for i in range(n):\n        for j in range(n - i - 1):\n            if tup[j][0] > tup[j + 1][0]:\n                tup[j], tup[j + 1] = tup[j + 1], tup[j]\n    return tup\n", "test": "def check(candidate):\n    assert candidate([(\"Amana\", 28), (\"Zenat\", 30), (\"Abhishek\", 29),(\"Nikhil\", 21), (\"B\", \"C\")]) == [('Abhishek', 29), ('Amana', 28), ('B', 'C'), ('Nikhil', 21), ('Zenat', 30)]\n    assert candidate([(\"aaaa\", 28), (\"aa\", 30), (\"bab\", 29), (\"bb\", 21), (\"csa\", \"C\")]) == [('aa', 30), ('aaaa', 28), ('bab', 29), ('bb', 21), ('csa', 'C')]\n    assert candidate([(\"Sarala\", 28), (\"Ayesha\", 30), (\"Suman\", 29),(\"Sai\", 21), (\"G\", \"H\")]) == [('Ayesha', 30), ('G', 'H'), ('Sai', 21), ('Sarala', 28), ('Suman', 29)]\n", "cot": "How to solve:\nStep 1. Get the length of the tuple list.\nStep 2. Use nested loops to iterate through the tuples.\nStep 3. Compare the first element of the current tuple with the first element of the next tuple.\nStep 4. If the first element of the current tuple is greater than the first element of the next tuple, swap the tuples.\nStep 5. Continue this process until all tuples are sorted alphabetically by their first elements.\nStep 6. Return the sorted tuple list."}
{"task_id": "train/15818", "prompt": "def Check_Solution(a, b, c):\n    \"\"\"Write a python function to check whether the roots of a quadratic equation are numerically equal but opposite in sign or not.\n    \"\"\"\n", "entry_point": "Check_Solution", "canonical_solution": "    if b == 0:\n        return \"Yes\"\n    else:\n        return \"No\"\n", "test": "def check(candidate):\n    assert candidate(2,0,-1) == \"Yes\"\n    assert candidate(1,-5,6) == \"No\"\n    assert candidate(2,0,2) == \"Yes\"\n", "cot": "How to solve:\nStep 1. Check if the coefficient 'b' is equal to 0.\nStep 2. If 'b' is 0, return \"Yes\" because the roots are numerically equal but opposite in sign.\nStep 3. If 'b' is not 0, return \"No\" because the roots are not numerically equal but opposite in sign."}
{"task_id": "train/15819", "prompt": "def get_inv_count(arr, n):\n    \"\"\"Write a function to count the number of inversions in the given array.\n    \"\"\"\n", "entry_point": "get_inv_count", "canonical_solution": "    inv_count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if arr[i] > arr[j]:\n                inv_count += 1\n    return inv_count\n", "test": "def check(candidate):\n    assert candidate([1, 20, 6, 4, 5], 5) == 5\n    assert candidate([8, 4, 2, 1], 4) == 6\n    assert candidate([3, 1, 2], 3) == 2\n", "cot": "How to solve:\nStep 1. Initialize inv_count as 0.\nStep 2. Iterate through the array using two nested loops.\n    - For each pair of elements (i, j) where i < j:\n        - If arr[i] > arr[j], increment inv_count.\nStep 3. Return inv_count, which represents the number of inversions in the array."}
{"task_id": "train/15820", "prompt": "def get_odd_occurence(arr, arr_size):\n    \"\"\"Write a function to find the number which occurs for odd number of times in the given array.\n    \"\"\"\n", "entry_point": "get_odd_occurence", "canonical_solution": "    for i in range(0, arr_size):\n        count = 0\n        for j in range(0, arr_size):\n            if arr[i] == arr[j]:\n                count += 1\n        if count % 2 != 0:\n            return arr[i]\n    return -1\n", "test": "def check(candidate):\n    assert candidate([2, 3, 5, 4, 5, 2, 4, 3, 5, 2, 4, 4, 2], 13) == 5\n    assert candidate([1, 2, 3, 2, 3, 1, 3], 7) == 3\n    assert candidate([5, 7, 2, 7, 5, 2, 5], 7) == 5\n", "cot": "How to solve:\nStep 1. Iterate through the array elements.\nStep 2. For each element, count the number of occurrences in the array.\nStep 3. If the count of occurrences is odd, return that element.\nStep 4. If no element with odd occurrences is found, return -1."}
{"task_id": "train/15821", "prompt": "import heapq\n\n\ndef nth_super_ugly_number(n, primes):\n    \"\"\"Write a function to find the nth super ugly number from a given prime list of size k using heap queue algorithm.\n    \"\"\"\n", "entry_point": "nth_super_ugly_number", "canonical_solution": "    uglies = [1]\n\n    def gen(prime):\n        for ugly in uglies:\n            yield ugly * prime\n\n    merged = heapq.merge(*map(gen, primes))\n    while len(uglies) < n:\n        ugly = next(merged)\n        if ugly != uglies[-1]:\n            uglies.append(ugly)\n    return uglies[-1]\n", "test": "def check(candidate):\n    assert candidate(12,[2,7,13,19])==32\n    assert candidate(10,[2,7,13,19])==26\n    assert candidate(100,[2,7,13,19])==5408\n", "cot": "How to solve:\nStep 1. Initialize a list 'uglies' with the first super ugly number 1.\nStep 2. Define a generator function 'gen' that generates multiples of each prime number from the 'uglies' list.\nStep 3. Merge the generators for each prime using heapq.merge.\nStep 4. While the length of 'uglies' is less than n:\n    - Get the next super ugly number from the merged generator.\n    - If the new ugly number is different from the last one in 'uglies', append it to 'uglies'.\nStep 5. Return the nth super ugly number which is the last element in 'uglies'."}
{"task_id": "train/15822", "prompt": "def get_Number(n, k):\n    \"\"\"Write a python function to find the kth element in an array containing odd elements first and then even elements.\n    \"\"\"\n", "entry_point": "get_Number", "canonical_solution": "    arr = [0] * n\n    i = 0\n    odd = 1\n    while odd <= n:\n        arr[i] = odd\n        i += 1\n        odd += 2\n    even = 2\n    while even <= n:\n        arr[i] = even\n        i += 1\n        even += 2\n    return arr[k - 1]\n", "test": "def check(candidate):\n    assert candidate(8,5) == 2\n    assert candidate(7,2) == 3\n    assert candidate(5,2) == 3\n", "cot": "How to solve:\nStep 1. Create an array of size n filled with zeros.\nStep 2. Initialize variables i, odd, and even to 0, 1, and 2 respectively.\nStep 3. Fill the array with odd numbers starting from 1 and incrementing by 2 until odd <= n.\nStep 4. Fill the array with even numbers starting from 2 and incrementing by 2 until even <= n.\nStep 5. Return the kth element in the array (k - 1 index)."}
{"task_id": "train/15823", "prompt": "import math\n\n\ndef find_Digits(n):\n    \"\"\"Write a python function to count the number of digits in factorial of a given number.\n    \"\"\"\n", "entry_point": "find_Digits", "canonical_solution": "    if n < 0:\n        return 0\n    if n <= 1:\n        return 1\n    x = n * math.log10(n / math.e) + math.log10(2 * math.pi * n) / 2.0\n    return math.floor(x) + 1\n", "test": "def check(candidate):\n    assert candidate(7) == 4\n    assert candidate(5) == 3\n    assert candidate(4) == 2\n", "cot": "How to solve:\nStep 1. Check if n is less than 0, return 0.\nStep 2. Check if n is less than or equal to 1, return 1.\nStep 3. Calculate the number of digits in the factorial of n using Stirling's approximation formula.\nStep 4. Return the floor value of the calculated result plus 1."}
{"task_id": "train/15824", "prompt": "def find_platform(arr, dep, n):\n    \"\"\"Write a function to find the minimum number of platforms required for a railway/bus station.\n    \"\"\"\n", "entry_point": "find_platform", "canonical_solution": "    arr.sort()\n    dep.sort()\n    plat_needed = 1\n    result = 1\n    i = 1\n    j = 0\n    while i < n and j < n:\n        if arr[i] <= dep[j]:\n            plat_needed += 1\n            i += 1\n        elif arr[i] > dep[j]:\n            plat_needed -= 1\n            j += 1\n        if plat_needed > result:\n            result = plat_needed\n    return result\n", "test": "def check(candidate):\n    assert candidate([900, 940, 950, 1100, 1500, 1800],[910, 1200, 1120, 1130, 1900, 2000],6)==3\n    assert candidate([100,200,300,400],[700,800,900,1000],4)==4\n    assert candidate([5,6,7,8],[4,3,2,1],4)==1\n", "cot": "How to solve:\nStep 1. Sort arrival and departure times.\nStep 2. Initialize platform needed and result as 1.\nStep 3. Initialize two pointers i and j as 1 and 0.\nStep 4. While i and j are less than n:\n    - If arrival time at i is less than or equal to departure time at j, increment platform needed and i.\n    - If arrival time at i is greater than departure time at j, decrement platform needed and increment j.\n    - Update result if platform needed is greater than result.\nStep 5. Return the final result as the minimum number of platforms required."}
{"task_id": "train/15825", "prompt": "def lcopy(xs):\n    \"\"\"Write a python function to copy a list from a singleton tuple.\n    \"\"\"\n", "entry_point": "lcopy", "canonical_solution": "    return xs[:]\n", "test": "def check(candidate):\n    assert candidate([1, 2, 3]) == [1, 2, 3]\n    assert candidate([4, 8, 2, 10, 15, 18]) == [4, 8, 2, 10, 15, 18]\n    assert candidate([4, 5, 6]) == [4, 5, 6]\n\n", "cot": "How to solve:\nStep 1. Define a function lcopy that takes a singleton tuple xs as input.\nStep 2. Return xs[:] to create a copy of the list inside the singleton tuple.\nStep 3. The function will return a new list that is a copy of the list inside the singleton tuple."}
{"task_id": "train/15826", "prompt": "def area_trapezium(base1, base2, height):\n    \"\"\"Write a function to find the area of a trapezium.\n    \"\"\"\n", "entry_point": "area_trapezium", "canonical_solution": "    area = 0.5 * (base1 + base2) * height\n    return area\n", "test": "def check(candidate):\n    assert candidate(6,9,4)==30\n    assert candidate(10,20,30)==450\n    assert candidate(15,25,35)==700\n", "cot": "How to solve:\nStep 1. Calculate the area of a trapezium using the formula: 0.5 * (base1 + base2) * height.\nStep 2. Return the calculated area."}
{"task_id": "train/15827", "prompt": "def Sum(N):\n    \"\"\"Write a python function to find sum of all prime divisors of a given number.\n    \"\"\"\n", "entry_point": "Sum", "canonical_solution": "    SumOfPrimeDivisors = [0] * (N + 1)\n    for i in range(2, N + 1):\n        if SumOfPrimeDivisors[i] == 0:\n            for j in range(i, N + 1, i):\n                SumOfPrimeDivisors[j] += i\n    return SumOfPrimeDivisors[N]\n", "test": "def check(candidate):\n    assert candidate(60) == 10\n    assert candidate(39) == 16\n    assert candidate(40) == 7\n", "cot": "How to solve:\nStep 1. Create a list `SumOfPrimeDivisors` of size N+1 initialized with zeros.\nStep 2. Iterate from 2 to N.\nStep 3. For each number i, if its sum of prime divisors is not calculated yet (SumOfPrimeDivisors[i] == 0):\n    - Iterate through multiples of i up to N and add i to their sum of prime divisors.\nStep 4. Return the sum of prime divisors of the given number N stored at index N in the list."}
{"task_id": "train/15828", "prompt": "def is_triangleexists(a, b, c):\n    \"\"\"Write a function to check if a triangle of positive area is possible with the given angles.\n    \"\"\"\n", "entry_point": "is_triangleexists", "canonical_solution": "    if a != 0 and b != 0 and c != 0 and (a + b + c) == 180:\n        if (a + b) >= c or (b + c) >= a or (a + c) >= b:\n            return True\n        else:\n            return False\n    else:\n        return False\n", "test": "def check(candidate):\n    assert candidate(50,60,70)==True\n    assert candidate(90,45,45)==True\n    assert candidate(150,30,70)==False\n", "cot": "How to solve:\nStep 1. Check if all angles are non-zero and sum of angles is 180 degrees.\nStep 2. If conditions from step 1 are met, check if the sum of any two angles is greater than the third angle for a triangle to exist.\nStep 3. If the conditions from step 2 are satisfied, return True (triangle exists), else return False (triangle does not exist)."}
{"task_id": "train/15829", "prompt": "def Sum_of_Inverse_Divisors(N, Sum):\n    \"\"\"Write a python function to find sum of inverse of divisors.\n    \"\"\"\n", "entry_point": "Sum_of_Inverse_Divisors", "canonical_solution": "    ans = float(Sum) * 1.0 / float(N)\n    return round(ans, 2)\n", "test": "def check(candidate):\n    assert candidate(6,12) == 2\n    assert candidate(9,13) == 1.44\n    assert candidate(1,4) == 4\n", "cot": "How to solve:\nStep 1. Calculate the ratio of Sum to N.\nStep 2. Round the result to 2 decimal places.\nStep 3. Return the rounded result as the sum of the inverse of divisors."}
{"task_id": "train/15830", "prompt": "def remove_negs(num_list):\n    \"\"\"Write a python function to remove negative numbers from a list.\n    \"\"\"\n", "entry_point": "remove_negs", "canonical_solution": "    for item in num_list:\n        if item < 0:\n            num_list.remove(item)\n    return num_list\n", "test": "def check(candidate):\n    assert candidate([1,-2,3,-4]) == [1,3]\n    assert candidate([1,2,3,-4]) == [1,2,3]\n    assert candidate([4,5,-6,7,-8]) == [4,5,7]\n", "cot": "How to solve:\nStep 1. Iterate through the elements of the input list.\nStep 2. Check if the current element is negative.\nStep 3. If the element is negative, remove it from the list.\nStep 4. Continue iterating through the list.\nStep 5. Return the modified list after removing all negative numbers. \n\nNote: Modifying a list while iterating over it can lead to unexpected behavior. It's better to create a new list with the non-negative elements instead of modifying the original list."}
{"task_id": "train/15831", "prompt": "import math\n\n\ndef sum_of_odd_Factors(n):\n    \"\"\"Write a python function to find sum of odd factors of a number.\n    \"\"\"\n", "entry_point": "sum_of_odd_Factors", "canonical_solution": "    res = 1\n    while n % 2 == 0:\n        n = n // 2\n    for i in range(3, int(math.sqrt(n) + 1)):\n        count = 0\n        curr_sum = 1\n        curr_term = 1\n        while n % i == 0:\n            count += 1\n            n = n // i\n            curr_term *= i\n            curr_sum += curr_term\n        res *= curr_sum\n    if n >= 2:\n        res *= 1 + n\n    return res\n", "test": "def check(candidate):\n    assert candidate(30) == 24\n    assert candidate(18) == 13\n    assert candidate(2) == 1\n", "cot": "How to solve:\nStep 1. Initialize res as 1.\nStep 2. Divide n by 2 until n is not divisible by 2.\nStep 3. Iterate from 3 to square root of n.\n    - For each i, count the occurrences, calculate the sum of factors, and update res.\nStep 4. If n is greater than or equal to 2, update res.\nStep 5. Return the final result res."}
{"task_id": "train/15832", "prompt": "import heapq as hq\n\n\ndef raw_heap(rawheap):\n    \"\"\"Write a function which accepts an arbitrary list and converts it to a heap using heap queue algorithm.\n    \"\"\"\n", "entry_point": "raw_heap", "canonical_solution": "    hq.heapify(rawheap)\n    return rawheap\n", "test": "def check(candidate):\n    assert candidate([25, 44, 68, 21, 39, 23, 89])==[21, 25, 23, 44, 39, 68, 89]\n    assert candidate([25, 35, 22, 85, 14, 65, 75, 25, 58])== [14, 25, 22, 25, 35, 65, 75, 85, 58]\n    assert candidate([4, 5, 6, 2])==[2, 4, 6, 5]\n", "cot": "How to solve:\nStep 1. Import the heapq module.\nStep 2. Define a function raw_heap that takes an arbitrary list rawheap as input.\nStep 3. Use the heapify function from heapq to convert the rawheap list into a heap.\nStep 4. Return the heapified rawheap list."}
{"task_id": "train/15833", "prompt": "def check_Even_Parity(x):\n    \"\"\"Write a python function to check for even parity of a given number.\n    \"\"\"\n", "entry_point": "check_Even_Parity", "canonical_solution": "    parity = 0\n    while x != 0:\n        x = x & (x - 1)\n        parity += 1\n    if parity % 2 == 0:\n        return True\n    else:\n        return False\n", "test": "def check(candidate):\n    assert candidate(10) == True\n    assert candidate(11) == False\n    assert candidate(18) == True\n", "cot": "How to solve:\nStep 1. Initialize parity as 0.\nStep 2. Iterate while x is not 0.\n    - Perform bitwise AND operation between x and (x - 1).\n    - Increment parity by 1.\nStep 3. Check if parity is even.\n    - If even, return True.\n    - If not even, return False."}
{"task_id": "train/15834", "prompt": "def find_Min_Swaps(arr, n):\n    \"\"\"Write a python function to find minimum adjacent swaps required to sort binary array.\n    \"\"\"\n", "entry_point": "find_Min_Swaps", "canonical_solution": "    noOfZeroes = [0] * n\n    count = 0\n    noOfZeroes[n - 1] = 1 - arr[n - 1]\n    for i in range(n - 2, -1, -1):\n        noOfZeroes[i] = noOfZeroes[i + 1]\n        if arr[i] == 0:\n            noOfZeroes[i] = noOfZeroes[i] + 1\n    for i in range(0, n):\n        if arr[i] == 1:\n            count = count + noOfZeroes[i]\n    return count\n", "test": "def check(candidate):\n    assert candidate([1,0,1,0],4) == 3\n    assert candidate([0,1,0],3) == 1\n    assert candidate([0,0,1,1,0],5) == 2\n", "cot": "How to solve:\nStep 1. Initialize an array 'noOfZeroes' of size 'n' with zeros and a variable 'count' as 0.\nStep 2. Calculate the number of zeroes to the right of each element and store in 'noOfZeroes'.\nStep 3. Iterate from right to left and update 'noOfZeroes' based on the current element.\nStep 4. Iterate through the array and for each '1', add the corresponding 'noOfZeroes' value to 'count'.\nStep 5. Return the final 'count' as the minimum adjacent swaps required to sort the binary array."}
{"task_id": "train/15835", "prompt": "def listify_list(list1):\n    \"\"\"Write a function to list out the list of given strings individually using map function.\n    \"\"\"\n", "entry_point": "listify_list", "canonical_solution": "    result = list(map(list, list1))\n    return result\n", "test": "def check(candidate):\n    assert candidate(['Red', 'Blue', 'Black', 'White', 'Pink'])==[['R', 'e', 'd'], ['B', 'l', 'u', 'e'], ['B', 'l', 'a', 'c', 'k'], ['W', 'h', 'i', 't', 'e'], ['P', 'i', 'n', 'k']]\n    assert candidate(['python'])==[['p', 'y', 't', 'h', 'o', 'n']]\n    assert candidate([' red ', 'green',' black', 'blue ',' orange', 'brown'])==[[' ', 'r', 'e', 'd', ' '], ['g', 'r', 'e', 'e', 'n'], [' ', 'b', 'l', 'a', 'c', 'k'], ['b', 'l', 'u', 'e', ' '], [' ', 'o', 'r', 'a', 'n', 'g', 'e'], ['b', 'r', 'o', 'w', 'n']]\n", "cot": "How to solve:\nStep 1. Use the map function to apply the list function to each element in list1.\nStep 2. Convert the mapped result to a list.\nStep 3. Return the final list of lists."}
{"task_id": "train/15836", "prompt": "def count_list(input_list):\n    \"\"\"Write a function to count number of lists in a given list of lists and square the count.\n    \"\"\"\n", "entry_point": "count_list", "canonical_solution": "    return (len(input_list)) ** 2\n", "test": "def check(candidate):\n    assert candidate([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==25\n    assert candidate([[1, 3], [5, 7], [9, 11], [13, 15, 17]] )==16\n    assert candidate([[2, 4], [[6,8], [4,5,8]], [10, 12, 14]])==9\n", "cot": "How to solve:\nStep 1. Calculate the length of the input_list.\nStep 2. Square the length obtained in Step 1.\nStep 3. Return the squared value as the result."}
{"task_id": "train/15837", "prompt": "from itertools import combinations\n\n\ndef sub_lists(my_list):\n    \"\"\"Write a function to generate all sublists of a given list.\n    \"\"\"\n", "entry_point": "sub_lists", "canonical_solution": "    subs = []\n    for i in range(0, len(my_list) + 1):\n        temp = [list(x) for x in combinations(my_list, i)]\n        if len(temp) > 0:\n            subs.extend(temp)\n    return subs\n", "test": "def check(candidate):\n    assert candidate([10, 20, 30, 40])==[[], [10], [20], [30], [40], [10, 20], [10, 30], [10, 40], [20, 30], [20, 40], [30, 40], [10, 20, 30], [10, 20, 40], [10, 30, 40], [20, 30, 40], [10, 20, 30, 40]]\n    assert candidate(['X', 'Y', 'Z'])==[[], ['X'], ['Y'], ['Z'], ['X', 'Y'], ['X', 'Z'], ['Y', 'Z'], ['X', 'Y', 'Z']]\n    assert candidate([1,2,3])==[[],[1],[2],[3],[1,2],[1,3],[2,3],[1,2,3]]\n", "cot": "How to solve:\nStep 1. Initialize an empty list subs to store sublists.\nStep 2. Iterate over range from 0 to length of my_list + 1.\nStep 3. Use combinations from itertools to generate all combinations of length i from my_list.\nStep 4. Convert each combination to a list and store in temp.\nStep 5. If temp is not empty, extend subs with temp.\nStep 6. Return the list of all sublists subs containing all possible sublists of the given list my_list."}
{"task_id": "train/15838", "prompt": "import re\n\nregex = \"[a-zA-z0-9]$\"\n\n\ndef check_alphanumeric(string):\n    \"\"\"Write a function to check whether the given string is ending with only alphanumeric characters or not using regex.\n    \"\"\"\n", "entry_point": "check_alphanumeric", "canonical_solution": "    if re.search(regex, string):\n        return \"Accept\"\n    else:\n        return \"Discard\"\n", "test": "def check(candidate):\n    assert candidate(\"dawood@\") == 'Discard'\n    assert candidate(\"skdmsam326\") == 'Accept'\n    assert candidate(\"cooltricks@\") == 'Discard'\n", "cot": "How to solve:\nStep 1. Define a regular expression pattern \"[a-zA-z0-9]$\" to match alphanumeric characters at the end of a string.\nStep 2. Create a function check_alphanumeric that takes a string as input.\nStep 3. Use re.search to search for the regex pattern in the input string.\nStep 4. If a match is found (i.e., the string ends with alphanumeric characters), return \"Accept\".\nStep 5. If no match is found (i.e., the string does not end with alphanumeric characters), return \"Discard\"."}
{"task_id": "train/15839", "prompt": "from collections import Counter\n\n\ndef anagram_lambda(texts, str):\n    \"\"\"Write a function to find all anagrams of a string in a given list of strings using lambda function.\n    \"\"\"\n", "entry_point": "anagram_lambda", "canonical_solution": "    result = list(filter(lambda x: (Counter(str) == Counter(x)), texts))\n    return result\n", "test": "def check(candidate):\n    assert candidate([\"bcda\", \"abce\", \"cbda\", \"cbea\", \"adcb\"],\"abcd\")==['bcda', 'cbda', 'adcb']\n    assert candidate([\"recitals\",\" python\"], \"articles\" )==[\"recitals\"]\n    assert candidate([\" keep\",\" abcdef\",\" xyz\"],\" peek\")==[\" keep\"]\n", "cot": "How to solve:\nStep 1. Import Counter from collections.\nStep 2. Define a lambda function inside filter.\n    - The lambda function checks if the Counter of the input string 'str' is equal to the Counter of each element 'x' in 'texts'.\nStep 3. Use filter to apply the lambda function to each element in 'texts'.\nStep 4. Convert the filtered result to a list and return it."}
{"task_id": "train/15840", "prompt": "from collections import Counter\nimport re\nfrom collections import Counter\nimport re\n\n\ndef n_common_words(text, n):\n    \"\"\"Write a function to find the occurrences of n most common words in a given text.\n    \"\"\"\n", "entry_point": "n_common_words", "canonical_solution": "    words = re.findall(\"\\w+\", text)\n    n_common_words = Counter(words).most_common(n)\n    return list(n_common_words)\n", "test": "def check(candidate):\n    assert candidate(\"python is a programming language\",1)==[('python', 1)]\n    assert candidate(\"python is a programming language\",1)==[('python', 1)]\n    assert candidate(\"python is a programming language\",5)==[('python', 1),('is', 1), ('a', 1), ('programming', 1), ('language', 1)]\n", "cot": "How to solve:\nStep 1. Use regex to extract words from the given text.\nStep 2. Count the occurrences of each word using Counter.\nStep 3. Get the n most common words using most_common(n) method.\nStep 4. Return the list of n most common words."}
{"task_id": "train/15841", "prompt": "def find_longest_conseq_subseq(arr, n):\n    \"\"\"Write a function to find the length of the longest sub-sequence such that elements in the subsequences are consecutive integers.\n    \"\"\"\n", "entry_point": "find_longest_conseq_subseq", "canonical_solution": "    ans = 0\n    count = 0\n    arr.sort()\n    v = []\n    v.append(arr[0])\n    for i in range(1, n):\n        if arr[i] != arr[i - 1]:\n            v.append(arr[i])\n    for i in range(len(v)):\n        if i > 0 and v[i] == v[i - 1] + 1:\n            count += 1\n        else:\n            count = 1\n        ans = max(ans, count)\n    return ans\n", "test": "def check(candidate):\n    assert candidate([1, 2, 2, 3], 4) == 3\n    assert candidate([1, 9, 3, 10, 4, 20, 2], 7) == 4\n    assert candidate([36, 41, 56, 35, 44, 33, 34, 92, 43, 32, 42], 11) == 5\n", "cot": "How to solve:\nStep 1. Initialize variables ans and count to 0.\nStep 2. Sort the input array arr.\nStep 3. Create a new list v and append the first element of arr to v.\nStep 4. Iterate through arr and add unique elements to v.\nStep 5. Iterate through v:\n    - If the current element is consecutive to the previous element, increment count.\n    - If not consecutive, reset count to 1.\n    - Update ans to be the maximum of ans and count.\nStep 6. Return ans as the length of the longest sub-sequence with consecutive integers."}
{"task_id": "train/15842", "prompt": "def palindrome_lambda(texts):\n    \"\"\"Write a function to find palindromes in a given list of strings using lambda function.\n    \"\"\"\n", "entry_point": "palindrome_lambda", "canonical_solution": "    result = list(filter(lambda x: (x == \"\".join(reversed(x))), texts))\n    return result\n", "test": "def check(candidate):\n    assert candidate([\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"])==['php', 'aaa']\n    assert candidate([\"abcd\", \"Python\", \"abba\", \"aba\"])==['abba', 'aba']\n    assert candidate([\"abcd\", \"abbccbba\", \"abba\", \"aba\"])==['abbccbba', 'abba', 'aba']\n", "cot": "How to solve:\nStep 1. Define a lambda function that checks if a string is a palindrome.\nStep 2. Use the filter function with the lambda function to filter out palindromes from the list of strings.\nStep 3. Convert the filtered result to a list.\nStep 4. Return the list of palindromes."}
{"task_id": "train/15843", "prompt": "def ntimes_list(nums, n):\n    \"\"\"Write a function to print n-times a list using map function.\n    \"\"\"\n", "entry_point": "ntimes_list", "canonical_solution": "    result = map(lambda x: n * x, nums)\n    return list(result)\n", "test": "def check(candidate):\n    assert candidate([1, 2, 3, 4, 5, 6, 7],3)==[3, 6, 9, 12, 15, 18, 21]\n    assert candidate([1, 2, 3, 4, 5, 6, 7],4)==[4, 8, 12, 16, 20, 24, 28]\n    assert candidate([1, 2, 3, 4, 5, 6, 7],10)==[10, 20, 30, 40, 50, 60, 70]\n", "cot": "How to solve:\nStep 1. Use the map function to apply a lambda function to each element in the input list.\nStep 2. The lambda function multiplies each element by the given value of n.\nStep 3. Convert the map object to a list using the list() function.\nStep 4. Return the resulting list."}
{"task_id": "train/15844", "prompt": "def check_monthnumb(monthname2):\n    \"\"\"Write a function to check whether the given month name contains 31 days or not.\n    \"\"\"\n", "entry_point": "check_monthnumb", "canonical_solution": "    if (\n        monthname2 == \"January\"\n        or monthname2 == \"March\"\n        or monthname2 == \"May\"\n        or monthname2 == \"July\"\n        or monthname2 == \"Augest\"\n        or monthname2 == \"October\"\n        or monthname2 == \"December\"\n    ):\n        return True\n    else:\n        return False\n", "test": "def check(candidate):\n    assert candidate(\"February\")==False\n    assert candidate(\"January\")==True\n    assert candidate(\"March\")==True\n", "cot": "How to solve:\nStep 1. Define a function that takes a month name as input.\nStep 2. Check if the input month name is one of the months with 31 days (January, March, May, July, August, October, December).\nStep 3. If the month name matches any of the above, return True; otherwise, return False."}
{"task_id": "train/15845", "prompt": "def min_Num(arr, n):\n    \"\"\"Write a python function to add a minimum number such that the sum of array becomes even.\n    \"\"\"\n", "entry_point": "min_Num", "canonical_solution": "    odd = 0\n    for i in range(n):\n        if arr[i] % 2:\n            odd += 1\n    if odd % 2:\n        return 1\n    return 2\n", "test": "def check(candidate):\n    assert candidate([1,2,3,4,5,6,7,8,9],9) == 1\n    assert candidate([1,2,3,4,5,6,7,8],8) == 2\n    assert candidate([1,2,3],3) == 2\n", "cot": "How to solve:\nStep 1. Initialize a variable 'odd' to count the number of odd elements in the array.\nStep 2. Iterate through the array and count the odd elements.\nStep 3. If the count of odd elements is odd, return 1 (to make the sum even).\nStep 4. Otherwise, return 2."}
{"task_id": "train/15846", "prompt": "def length_Of_Last_Word(a):\n    \"\"\"Write a python function to find the length of the last word in a given string.\n    \"\"\"\n", "entry_point": "length_Of_Last_Word", "canonical_solution": "    l = 0\n    x = a.strip()\n    for i in range(len(x)):\n        if x[i] == \" \":\n            l = 0\n        else:\n            l += 1\n    return l\n", "test": "def check(candidate):\n    assert candidate(\"python language\") == 8\n    assert candidate(\"PHP\") == 3\n    assert candidate(\"\") == 0\n", "cot": "How to solve:\nStep 1. Initialize a variable l to store the length of the last word.\nStep 2. Remove leading and trailing whitespaces from the input string a.\nStep 3. Iterate through the stripped string x.\n    - If the character at index i is a space, reset l to 0.\n    - Otherwise, increment l by 1.\nStep 4. Return the final value of l, which will be the length of the last word in the input string."}
{"task_id": "train/15847", "prompt": "def remove_list_range(list1, leftrange, rigthrange):\n    \"\"\"Write a function to remove sublists from a given list of lists, which are outside a given range.\n    \"\"\"\n", "entry_point": "remove_list_range", "canonical_solution": "    result = [i for i in list1 if (min(i) >= leftrange and max(i) <= rigthrange)]\n    return result\n", "test": "def check(candidate):\n    assert candidate([[2], [0], [1, 2, 3], [0, 1, 2, 3, 6, 7], [9, 11], [13, 14, 15, 17]],13,17)==[[13, 14, 15, 17]]\n    assert candidate([[2], [0], [1, 2, 3], [0, 1, 2, 3, 6, 7], [9, 11], [13, 14, 15, 17]],1,3)==[[2], [1, 2, 3]]\n    assert candidate([[2], [0], [1, 2, 3], [0, 1, 2, 3, 6, 7], [9, 11], [13, 14, 15, 17]],0,7)==[[2], [0], [1, 2, 3], [0, 1, 2, 3, 6, 7]]\n", "cot": "How to solve:\nStep 1. Iterate through each sublist in the given list of lists.\nStep 2. Check if the minimum value in the sublist is greater than or equal to the left range and the maximum value is less than or equal to the right range.\nStep 3. If the condition is met, keep the sublist in the result list.\nStep 4. Return the result list containing sublists within the given range."}
{"task_id": "train/15848", "prompt": "def sum_positivenum(nums):\n    \"\"\"Write a function to calculate the sum of the positive numbers of a given list of numbers using lambda function.\n    \"\"\"\n", "entry_point": "sum_positivenum", "canonical_solution": "    sum_positivenum = list(filter(lambda nums: nums > 0, nums))\n    return sum(sum_positivenum)\n", "test": "def check(candidate):\n    assert candidate([2, 4, -6, -9, 11, -12, 14, -5, 17])==48\n    assert candidate([10,15,-14,13,-18,12,-20])==50\n    assert candidate([19, -65, 57, 39, 152,-639, 121, 44, 90, -190])==522\n", "cot": "How to solve:\nStep 1. Use a lambda function to filter positive numbers from the input list.\nStep 2. Store the filtered positive numbers in a list.\nStep 3. Return the sum of the positive numbers list."}
{"task_id": "train/15849", "prompt": "def are_Rotations(string1, string2):\n    \"\"\"Write a python function to check whether the given strings are rotations of each other or not.\n    \"\"\"\n", "entry_point": "are_Rotations", "canonical_solution": "    size1 = len(string1)\n    size2 = len(string2)\n    temp = \"\"\n    if size1 != size2:\n        return False\n    temp = string1 + string1\n    if temp.count(string2) > 0:\n        return True\n    else:\n        return False\n", "test": "def check(candidate):\n    assert candidate(\"abc\",\"cba\") == False\n    assert candidate(\"abcd\",\"cdba\") == False\n    assert candidate(\"abacd\",\"cdaba\") == True\n", "cot": "How to solve:\nStep 1. Get the lengths of both input strings.\nStep 2. If the lengths are not equal, return False.\nStep 3. Concatenate string1 with itself.\nStep 4. Check if string2 is a substring of the concatenated string.\nStep 5. If string2 is a substring, return True; otherwise, return False."}
{"task_id": "train/15850", "prompt": "def check_subset(list1, list2):\n    \"\"\"Write a function to check if a nested list is a subset of another nested list.\n    \"\"\"\n", "entry_point": "check_subset", "canonical_solution": "    return all(map(list1.__contains__, list2))\n", "test": "def check(candidate):\n    assert candidate([[1, 3], [5, 7], [9, 11], [13, 15, 17]] ,[[1, 3],[13,15,17]])==True\n    assert candidate([[1, 2], [2, 3], [3, 4], [5, 6]],[[3, 4], [5, 6]])==True\n    assert candidate([[[1, 2], [2, 3]], [[3, 4], [5, 7]]],[[[3, 4], [5, 6]]])==False\n", "cot": "How to solve:\nStep 1. Use the `map` function to check if each element in list2 is present in list1 using the `__contains__` method.\nStep 2. Use the `all` function to check if all elements in list2 are present in list1.\nStep 3. Return the result of the above check."}
{"task_id": "train/15851", "prompt": "def fibonacci(n):\n    \"\"\"Write a function to solve the fibonacci sequence using recursion.\n    \"\"\"\n", "entry_point": "fibonacci", "canonical_solution": "    if n == 1 or n == 2:\n        return 1\n    else:\n        return fibonacci(n - 1) + (fibonacci(n - 2))\n", "test": "def check(candidate):\n    assert candidate(7) == 13\n    assert candidate(8) == 21\n    assert candidate(9) == 34\n", "cot": "How to solve:\nStep 1. Define a function fibonacci that takes an integer n as input.\nStep 2. Check if n is equal to 1 or 2, return 1.\nStep 3. If n is not 1 or 2, recursively call the fibonacci function with n-1 and n-2, then return the sum of the results.\nStep 4. Repeat the recursion until n reaches 1 or 2, then return the result.\nNote: This implementation uses recursion to calculate the Fibonacci sequence."}
{"task_id": "train/15852", "prompt": "def check_Concat(str1, str2):\n    \"\"\"Write a python function to check if the string is a concatenation of another string.\n    \"\"\"\n", "entry_point": "check_Concat", "canonical_solution": "    N = len(str1)\n    M = len(str2)\n    if N % M != 0:\n        return False\n    for i in range(N):\n        if str1[i] != str2[i % M]:\n            return False\n    return True\n", "test": "def check(candidate):\n    assert candidate(\"abcabcabc\",\"abc\") == True\n    assert candidate(\"abcab\",\"abc\") == False\n    assert candidate(\"aba\",\"ab\") == False\n", "cot": "How to solve:\nStep 1. Get the lengths of both strings.\nStep 2. If the length of the first string is not divisible by the length of the second string, return False.\nStep 3. Iterate through the characters of the first string.\n    - Check if each character matches the corresponding character in the second string using modulo operation.\n    - If any character doesn't match, return False.\nStep 4. If all characters match, return True."}
{"task_id": "train/15853", "prompt": "def min_difference(test_list):\n    \"\"\"Write a function to find the minimum difference in the tuple pairs of given tuples.\n    \"\"\"\n", "entry_point": "min_difference", "canonical_solution": "    temp = [abs(b - a) for a, b in test_list]\n    res = min(temp)\n    return res\n", "test": "def check(candidate):\n    assert candidate([(3, 5), (1, 7), (10, 3), (1, 2)]) == 1\n    assert candidate([(4, 6), (12, 8), (11, 4), (2, 13)]) == 2\n    assert candidate([(5, 17), (3, 9), (12, 5), (3, 24)]) == 6\n", "cot": "How to solve:\nStep 1. Create a list 'temp' to store absolute differences between the elements of each tuple in 'test_list'.\nStep 2. Calculate absolute differences for each tuple pair using list comprehension.\nStep 3. Find the minimum value in the 'temp' list.\nStep 4. Return the minimum difference as the result."}
{"task_id": "train/15854", "prompt": "def lcm(x, y):\n    \"\"\"Write a python function to find lcm of two positive integers.\n    \"\"\"\n", "entry_point": "lcm", "canonical_solution": "    if x > y:\n        z = x\n    else:\n        z = y\n    while True:\n        if (z % x == 0) and (z % y == 0):\n            lcm = z\n            break\n        z += 1\n    return lcm\n", "test": "def check(candidate):\n    assert candidate(4,6) == 12\n    assert candidate(15,17) == 255\n    assert candidate(2,6) == 6\n", "cot": "How to solve:\nStep 1. Initialize a variable z as the maximum of x and y.\nStep 2. Use a while loop that runs indefinitely.\nStep 3. Check if z is divisible by both x and y.\n    - If true, assign z to the variable lcm and break the loop.\n    - If false, increment z by 1.\nStep 4. Return the calculated lcm value."}
{"task_id": "train/15855", "prompt": "def sort_String(str):\n    \"\"\"Write a python function to sort the given string.\n    \"\"\"\n", "entry_point": "sort_String", "canonical_solution": "    str = \"\".join(sorted(str))\n    return str\n", "test": "def check(candidate):\n    assert candidate(\"cba\") == \"abc\"\n    assert candidate(\"data\") == \"aadt\"\n    assert candidate(\"zxy\") == \"xyz\"\n", "cot": "How to solve:\nStep 1. Define a function that takes a string as input.\nStep 2. Use the sorted() function to sort the characters of the input string.\nStep 3. Use the join() method to concatenate the sorted characters back into a string.\nStep 4. Return the sorted string."}
{"task_id": "train/15856", "prompt": "def check_tuples(test_tuple, K):\n    \"\"\"Write a function to check if the given tuple contains only k elements.\n    \"\"\"\n", "entry_point": "check_tuples", "canonical_solution": "    res = all(ele in K for ele in test_tuple)\n    return res\n", "test": "def check(candidate):\n    assert candidate((3, 5, 6, 5, 3, 6),[3, 6, 5]) == True\n    assert candidate((4, 5, 6, 4, 6, 5),[4, 5, 6]) == True\n    assert candidate((9, 8, 7, 6, 8, 9),[9, 8, 1]) == False\n", "cot": "How to solve:\nStep 1. Use a list comprehension to iterate over elements in the test_tuple.\nStep 2. Check if each element is present in the list K.\nStep 3. Use the all() function to check if all elements in the test_tuple are present in K.\nStep 4. Return the result."}
{"task_id": "train/15857", "prompt": "import re\n\n\ndef text_match(text):\n    \"\"\"Write a function that matches a string that has an 'a' followed by anything, ending in 'b' by using regex.\n    \"\"\"\n", "entry_point": "text_match", "canonical_solution": "    patterns = \"a.*?b$\"\n    if re.search(patterns, text):\n        return \"Found a match!\"\n    else:\n        return \"Not matched!\"\n", "test": "def check(candidate):\n    assert candidate(\"aabbbbd\") == 'Not matched!'\n    assert candidate(\"aabAbbbc\") == 'Not matched!'\n    assert candidate(\"accddbbjjjb\") == 'Found a match!'\n", "cot": "How to solve:\nStep 1. Define a regex pattern \"a.*?b$\" to match a string with 'a' followed by anything and ending in 'b'.\nStep 2. Use re.search() to search for the pattern in the input text.\nStep 3. If a match is found, return \"Found a match!\".\nStep 4. If no match is found, return \"Not matched!\"."}
{"task_id": "train/15858", "prompt": "def Check_Solution(a, b, c):\n    \"\"\"Write a python function to find number of solutions in quadratic equation.\n    \"\"\"\n", "entry_point": "Check_Solution", "canonical_solution": "    if ((b * b) - (4 * a * c)) > 0:\n        return \"2 solutions\"\n    elif ((b * b) - (4 * a * c)) == 0:\n        return \"1 solution\"\n    else:\n        return \"No solutions\"\n", "test": "def check(candidate):\n    assert candidate(2,5,2) == \"2 solutions\"\n    assert candidate(1,1,1) == \"No solutions\"\n    assert candidate(1,2,1) == \"1 solution\"\n", "cot": "How to solve:\nStep 1. Define a function Check_Solution that takes three parameters a, b, and c.\nStep 2. Calculate the discriminant (b^2 - 4ac).\nStep 3. If the discriminant is greater than 0, return \"2 solutions\".\nStep 4. If the discriminant is equal to 0, return \"1 solution\".\nStep 5. If the discriminant is less than 0, return \"No solutions\".\nStep 6. The function will correctly determine the number of solutions in a quadratic equation based on the discriminant."}
{"task_id": "train/15859", "prompt": "def sum_even_odd(list1):\n    \"\"\"Write a function to find the sum of first even and odd number of a given list.\n    \"\"\"\n", "entry_point": "sum_even_odd", "canonical_solution": "    first_even = next((el for el in list1 if el % 2 == 0), -1)\n    first_odd = next((el for el in list1 if el % 2 != 0), -1)\n    return first_even + first_odd\n", "test": "def check(candidate):\n    assert candidate([1,3,5,7,4,1,6,8])==5\n    assert candidate([1,2,3,4,5,6,7,8,9,10])==3\n    assert candidate([1,5,7,9,10])==11\n", "cot": "How to solve:\nStep 1. Find the first even number in the list using a generator expression with next() function.\nStep 2. Find the first odd number in the list using a generator expression with next() function.\nStep 3. Return the sum of the first even and odd numbers found."}
{"task_id": "train/15860", "prompt": "def parallelogram_perimeter(b, h):\n    \"\"\"Write a function to caluclate perimeter of a parallelogram.\n    \"\"\"\n", "entry_point": "parallelogram_perimeter", "canonical_solution": "    perimeter = 2 * (b * h)\n    return perimeter\n", "test": "def check(candidate):\n    assert candidate(10,20)==400\n    assert candidate(15,20)==600\n    assert candidate(8,9)==144\n", "cot": "How to solve:\nStep 1. Calculate the perimeter of a parallelogram using the formula: perimeter = 2 * (base * height).\nStep 2. Return the calculated perimeter."}
{"task_id": "train/15861", "prompt": "def div_of_nums(nums, m, n):\n    \"\"\"Write a function to find numbers divisible by m and n from a list of numbers using lambda function.\n    \"\"\"\n", "entry_point": "div_of_nums", "canonical_solution": "    result = list(filter(lambda x: (x % m == 0 and x % n == 0), nums))\n    return result\n", "test": "def check(candidate):\n    assert candidate([19, 65, 57, 39, 152, 639, 121, 44, 90, 190],2,4)==[ 152,44]\n    assert candidate([1, 2, 3, 5, 7, 8, 10],2,5)==[10]\n    assert candidate([10,15,14,13,18,12,20],10,5)==[10,20]\n", "cot": "How to solve:\nStep 1. Define a function that takes a list of numbers (nums), two divisors (m and n).\nStep 2. Use the filter function with a lambda function to filter numbers in nums that are divisible by both m and n.\n    - The lambda function checks if x is divisible by both m and n (x % m == 0 and x % n == 0).\nStep 3. Convert the filtered result to a list and return it."}
{"task_id": "train/15862", "prompt": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    \"\"\"Write a python function to check whether all the bits are within a given range or not.\n    \"\"\"\n", "entry_point": "all_Bits_Set_In_The_Given_Range", "canonical_solution": "    num = ((1 << r) - 1) ^ ((1 << (l - 1)) - 1)\n    new_num = n & num\n    if num == new_num:\n        return True\n    return False\n", "test": "def check(candidate):\n    assert candidate(10,2,1) == True \n    assert candidate(5,2,4) == False\n    assert candidate(22,2,3) == True \n", "cot": "How to solve:\nStep 1. Calculate a number 'num' with all bits set in the range [l, r].\nStep 2. Perform bitwise AND operation between the input number 'n' and 'num' to get 'new_num'.\nStep 3. If 'num' is equal to 'new_num', then return True (all bits are within the given range).\nStep 4. Otherwise, return False."}
{"task_id": "train/15863", "prompt": "def is_Isomorphic(str1, str2):\n    \"\"\"Write a python function to check whether the two given strings are isomorphic to each other or not.\n    \"\"\"\n", "entry_point": "is_Isomorphic", "canonical_solution": "    dict_str1 = {}\n    dict_str2 = {}\n    for i, value in enumerate(str1):\n        dict_str1[value] = dict_str1.get(value, []) + [i]\n    for j, value in enumerate(str2):\n        dict_str2[value] = dict_str2.get(value, []) + [j]\n    if sorted(dict_str1.values()) == sorted(dict_str2.values()):\n        return True\n    else:\n        return False\n", "test": "def check(candidate):\n    assert candidate(\"paper\",\"title\") == True\n    assert candidate(\"ab\",\"ba\") == True\n    assert candidate(\"ab\",\"aa\") == False\n", "cot": "How to solve:\nStep 1. Create two empty dictionaries, dict_str1 and dict_str2.\nStep 2. Iterate over the characters of str1 and str2 using enumerate.\n    - For each character, store the character as key and its index as value in the respective dictionaries.\nStep 3. Check if the sorted values of dict_str1 and dict_str2 are equal.\n    - If equal, return True (strings are isomorphic).\n    - If not equal, return False (strings are not isomorphic)."}
{"task_id": "train/15864", "prompt": "def sum_num(numbers):\n    \"\"\"Write a function to add all the numbers in a list and divide it with the length of the list.\n    \"\"\"\n", "entry_point": "sum_num", "canonical_solution": "    total = 0\n    for x in numbers:\n        total += x\n    return total / len(numbers)\n", "test": "def check(candidate):\n    assert candidate((8, 2, 3, 0, 7))==4.0\n    assert candidate((-10,-20,-30))==-20.0\n    assert candidate((19,15,18))==17.333333333333332\n", "cot": "How to solve:\nStep 1. Initialize total as 0.\nStep 2. Iterate through numbers list.\n    - Add each number to total.\nStep 3. Return the result of total divided by the length of the numbers list."}
{"task_id": "train/15865", "prompt": "def is_odd(n):\n    \"\"\"Write a python function to check whether the given number is odd or not using bitwise operator.\n    \"\"\"\n", "entry_point": "is_odd", "canonical_solution": "    if n ^ 1 == n - 1:\n        return True\n    else:\n        return False\n", "test": "def check(candidate):\n    assert candidate(5) == True\n    assert candidate(6) == False\n    assert candidate(7) == True\n", "cot": "How to solve:\nStep 1. Define a function is_odd that takes an integer n as input.\nStep 2. Use the XOR operator (^) to check if n XOR 1 is equal to n - 1.\nStep 3. If the condition is true, return True (n is odd), otherwise return False (n is even)."}
{"task_id": "train/15866", "prompt": "def substract_elements(test_tup1, test_tup2):\n    \"\"\"Write a function to substract the elements of the given nested tuples.\n    \"\"\"\n", "entry_point": "substract_elements", "canonical_solution": "    res = tuple(\n        tuple(a - b for a, b in zip(tup1, tup2))\n        for tup1, tup2 in zip(test_tup1, test_tup2)\n    )\n    return res\n", "test": "def check(candidate):\n    assert candidate(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((-5, -4), (1, -4), (1, 8), (-6, 7))\n    assert candidate(((13, 4), (14, 6), (13, 10), (12, 11)), ((19, 8), (14, 10), (12, 2), (18, 4))) == ((-6, -4), (0, -4), (1, 8), (-6, 7))\n    assert candidate(((19, 5), (18, 7), (19, 11), (17, 12)), ((12, 9), (17, 11), (13, 3), (19, 5))) == ((7, -4), (1, -4), (6, 8), (-2, 7))\n", "cot": "How to solve:\nStep 1. Define a function to subtract elements of nested tuples.\nStep 2. Use a list comprehension with zip to iterate over corresponding tuples in test_tup1 and test_tup2.\nStep 3. Subtract elements of each pair of tuples using tuple comprehension.\nStep 4. Return the resulting tuple."}
{"task_id": "train/15867", "prompt": "def reverse_list_lists(lists):\n    \"\"\"Write a function to reverse each list in a given list of lists.\n    \"\"\"\n", "entry_point": "reverse_list_lists", "canonical_solution": "    for l in lists:\n        l.sort(reverse=True)\n    return lists\n", "test": "def check(candidate):\n    assert candidate([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]])==[[4, 3, 2, 1], [8, 7, 6, 5], [12, 11, 10, 9], [16, 15, 14, 13]]\n    assert candidate([[1,2],[2,3],[3,4]])==[[2,1],[3,2],[4,3]]\n    assert candidate([[10,20],[30,40]])==[[20,10],[40,30]]\n", "cot": "How to solve:\nStep 1. Iterate through each list in the given list of lists.\nStep 2. Sort each list in reverse order.\nStep 3. Return the modified list of lists."}
{"task_id": "train/15868", "prompt": "def find_Extra(arr1, arr2, n):\n    \"\"\"Write a python function to find the index of an extra element present in one sorted array.\n    \"\"\"\n", "entry_point": "find_Extra", "canonical_solution": "    for i in range(0, n):\n        if arr1[i] != arr2[i]:\n            return i\n    return n\n", "test": "def check(candidate):\n    assert candidate([1,2,3,4],[1,2,3],3) == 3\n    assert candidate([2,4,6,8,10],[2,4,6,8],4) == 4\n    assert candidate([1,3,5,7,9,11],[1,3,5,7,9],5) == 5\n", "cot": "How to solve:\nStep 1. Iterate through the arrays using a loop.\nStep 2. Compare elements of both arrays at each index.\nStep 3. If elements are not equal, return the index.\nStep 4. If no extra element found, return the length of the array."}
{"task_id": "train/15869", "prompt": "def same_Length(A, B):\n    \"\"\"Write a python function to check whether the given two numbers have same number of digits or not.\n    \"\"\"\n", "entry_point": "same_Length", "canonical_solution": "    while A > 0 and B > 0:\n        A = A / 10\n        B = B / 10\n    if A == 0 and B == 0:\n        return True\n    return False\n", "test": "def check(candidate):\n    assert candidate(12,1) == False\n    assert candidate(2,2) == True\n    assert candidate(10,20) == True\n", "cot": "How to solve:\nStep 1. Initialize two numbers A and B.\nStep 2. While both A and B are greater than 0, divide A and B by 10 to reduce the number of digits.\nStep 3. If after the loop A and B are both 0, return True (indicating they have the same number of digits).\nStep 4. Otherwise, return False."}
{"task_id": "train/15870", "prompt": "import re\n\n\ndef remove_spaces(text):\n    \"\"\"Write a function to remove multiple spaces in a string.\n    \"\"\"\n", "entry_point": "remove_spaces", "canonical_solution": "    return re.sub(\" +\", \" \", text)\n", "test": "def check(candidate):\n    assert candidate('python  program')==('python program')\n    assert candidate('python   programming    language')==('python programming language')\n    assert candidate('python                     program')==('python program')\n", "cot": "How to solve:\nStep 1. Import the 're' module for regular expressions.\nStep 2. Define a function 'remove_spaces' that takes a 'text' parameter.\nStep 3. Use the re.sub() function to replace multiple spaces in 'text' with a single space.\nStep 4. Return the modified 'text' with multiple spaces removed."}
{"task_id": "train/15871", "prompt": "def Extract(lst):\n    \"\"\"Write a python function to get the last element of each sublist.\n    \"\"\"\n", "entry_point": "Extract", "canonical_solution": "    return [item[-1] for item in lst]\n", "test": "def check(candidate):\n    assert candidate([[1, 2, 3], [4, 5], [6, 7, 8, 9]]) == [3, 5, 9]\n    assert candidate([['x', 'y', 'z'], ['m'], ['a', 'b'], ['u', 'v']]) == ['z', 'm', 'b', 'v']\n    assert candidate([[1, 2, 3], [4, 5]]) == [3, 5]\n", "cot": "How to solve:\nStep 1. Define a function Extract that takes a list of sublists as input.\nStep 2. Use list comprehension to iterate over each sublist in the input list.\nStep 3. For each sublist, access the last element using index -1 and create a new list with these last elements.\nStep 4. Return the list containing the last elements of each sublist."}
{"task_id": "train/15872", "prompt": "def float_to_tuple(test_str):\n    \"\"\"Write a function to convert the given string of float type into tuple.\n    \"\"\"\n", "entry_point": "float_to_tuple", "canonical_solution": "    res = tuple(map(float, test_str.split(\", \")))\n    return res\n", "test": "def check(candidate):\n    assert candidate(\"1.2, 1.3, 2.3, 2.4, 6.5\") == (1.2, 1.3, 2.3, 2.4, 6.5)\n    assert candidate(\"2.3, 2.4, 5.6, 5.4, 8.9\") == (2.3, 2.4, 5.6, 5.4, 8.9)\n    assert candidate(\"0.3, 0.5, 7.8, 9.4\") == (0.3, 0.5, 7.8, 9.4)\n", "cot": "How to solve:\nStep 1. Split the input string by \", \" to get a list of float strings.\nStep 2. Use map function to convert each float string to float type.\nStep 3. Convert the mapped floats into a tuple.\nStep 4. Return the tuple."}
{"task_id": "train/15873", "prompt": "def max_sum_subseq(A):\n    \"\"\"Write a function to find the maximum sum of subsequences of given array with no adjacent elements.\n    \"\"\"\n", "entry_point": "max_sum_subseq", "canonical_solution": "    n = len(A)\n    if n == 1:\n        return A[0]\n    look_up = [None] * n\n    look_up[0] = A[0]\n    look_up[1] = max(A[0], A[1])\n    for i in range(2, n):\n        look_up[i] = max(look_up[i - 1], look_up[i - 2] + A[i])\n        look_up[i] = max(look_up[i], A[i])\n    return look_up[n - 1]\n", "test": "def check(candidate):\n    assert candidate([1, 2, 9, 4, 5, 0, 4, 11, 6]) == 26\n    assert candidate([1, 2, 9, 5, 6, 0, 5, 12, 7]) == 28\n    assert candidate([1, 3, 10, 5, 6, 0, 6, 14, 21]) == 44\n", "cot": "How to solve:\nStep 1. Initialize a variable n to store the length of array A.\nStep 2. If n is 1, return the only element in A.\nStep 3. Create a list look_up of size n to store the maximum sum of subsequences.\nStep 4. Initialize look_up[0] and look_up[1] based on the first two elements of A.\nStep 5. Iterate from the 3rd element to the end of A.\n    - Calculate the maximum sum considering the current element and the previous two elements.\n    - Update the current element in look_up with the maximum of the calculated sum and the current element itself.\nStep 6. Return the last element of look_up as the result."}
{"task_id": "train/15874", "prompt": "def last(n):\n    return n[-1]\n\n\ndef sort_list_last(tuples):\n    \"\"\"Write a function to sort a list in increasing order by the last element in each tuple from a given list of non-empty tuples.\n    \"\"\"\n", "entry_point": "sort_list_last", "canonical_solution": "    return sorted(tuples, key=last)\n", "test": "def check(candidate):\n    assert candidate([(2, 5), (1, 2), (4, 4), (2, 3), (2, 1)])==[(2, 1), (1, 2), (2, 3), (4, 4), (2, 5)] \n    assert candidate([(9,8), (4, 7), (3,5), (7,9), (1,2)])==[(1,2), (3,5), (4,7), (9,8), (7,9)] \n    assert candidate([(20,50), (10,20), (40,40)])==[(10,20),(40,40),(20,50)] \n", "cot": "How to solve:\nStep 1. Define a function last(n) that returns the last element of a list.\nStep 2. Define a function sort_list_last(tuples) that takes a list of tuples.\nStep 3. Use the sorted() function with key parameter set to last function to sort the list of tuples based on the last element of each tuple.\nStep 4. Return the sorted list."}
{"task_id": "train/15875", "prompt": "def is_Word_Present(sentence, word):\n    \"\"\"Write a python function to check whether the word is present in a given sentence or not.\n    \"\"\"\n", "entry_point": "is_Word_Present", "canonical_solution": "    s = sentence.split(\" \")\n    for i in s:\n        if i == word:\n            return True\n    return False\n", "test": "def check(candidate):\n    assert candidate(\"machine learning\",\"machine\") == True\n    assert candidate(\"easy\",\"fun\") == False\n    assert candidate(\"python language\",\"code\") == False\n", "cot": "How to solve:\nStep 1. Split the input sentence into a list of words.\nStep 2. Iterate through each word in the list.\n    - If the word matches the given word, return True.\nStep 3. If no match is found, return False."}
{"task_id": "train/15876", "prompt": "from itertools import groupby\n\n\ndef extract_elements(numbers, n):\n    \"\"\"Write a function to extract specified number of elements from a given list, which follow each other continuously.\n    \"\"\"\n", "entry_point": "extract_elements", "canonical_solution": "    result = [i for i, j in groupby(numbers) if len(list(j)) == n]\n    return result\n", "test": "def check(candidate):\n    assert candidate([1, 1, 3, 4, 4, 5, 6, 7],2)==[1, 4]\n    assert candidate([0, 1, 2, 3, 4, 4, 4, 4, 5, 7],4)==[4]\n    assert candidate([0,0,0,0,0],5)==[0]\n", "cot": "How to solve:\nStep 1. Use the groupby function from itertools to group consecutive elements in the list.\nStep 2. Iterate through the grouped elements.\nStep 3. Check the length of each group, if it matches the specified number 'n'.\nStep 4. Extract the elements from the group and store them in the result list.\nStep 5. Return the result list containing the specified number of elements that follow each other continuously."}
{"task_id": "train/15877", "prompt": "def check_f(arr, n):\n    \"\"\"Write a python function to check whether an array can be sorted or not by picking only the corner elements.\n    \"\"\"\n", "entry_point": "check_f", "canonical_solution": "    g = 0\n    for i in range(1, n):\n        if arr[i] - arr[i - 1] > 0 and g == 1:\n            return False\n        if arr[i] - arr[i] < 0:\n            g = 1\n    return True\n", "test": "def check(candidate):\n    assert candidate([3,2,1,2,3,4],6) == True\n    assert candidate([2,1,4,5,1],5) == True\n    assert candidate([1,2,2,1,2,3],6) == True\n", "cot": "How to solve:\nStep 1. Initialize a variable g as 0.\nStep 2. Iterate through the array from index 1 to n-1.\n    - If the current element minus the previous element is greater than 0 and g is 1, return False.\n    - If the current element minus itself is less than 0, set g as 1.\nStep 3. If the loop completes without returning False, return True."}
{"task_id": "train/15878", "prompt": "import re\n\n\ndef match_num(string):\n    \"\"\"Write a function where a string will start with a specific number.\n    \"\"\"\n", "entry_point": "match_num", "canonical_solution": "    text = re.compile(r\"^5\")\n    if text.match(string):\n        return True\n    else:\n        return False\n", "test": "def check(candidate):\n    assert candidate('5-2345861')==True\n    assert candidate('6-2345861')==False\n    assert candidate('78910')==False\n", "cot": "How to solve:\nStep 1. Import the regular expression module.\nStep 2. Define a function that takes a string as input.\nStep 3. Use re.compile to create a regular expression pattern that matches strings starting with the number 5.\nStep 4. Use the match method of the compiled pattern to check if the input string matches the pattern.\nStep 5. If there is a match, return True, otherwise return False."}
{"task_id": "train/15879", "prompt": "def smallest_multiple(n):\n    \"\"\"Write a function to find the smallest multiple of the first n numbers.\n    \"\"\"\n", "entry_point": "smallest_multiple", "canonical_solution": "    if n <= 2:\n        return n\n    i = n * 2\n    factors = [number for number in range(n, 1, -1) if number * 2 > n]\n    while True:\n        for a in factors:\n            if i % a != 0:\n                i += n\n                break\n            if a == factors[-1] and i % a == 0:\n                return i\n", "test": "def check(candidate):\n    assert candidate(13)==360360\n    assert candidate(2)==2\n    assert candidate(1)==1\n", "cot": "How to solve:\nStep 1. If n <= 2, return n.\nStep 2. Initialize i as n * 2.\nStep 3. Create a list of factors from n to 1 where number * 2 > n.\nStep 4. Start an infinite loop.\nStep 5. Iterate through factors.\n    - If i is not divisible by a, increment i by n and break.\n    - If a is the last element in factors and i is divisible by a, return i.\nStep 6. End of the loop."}
{"task_id": "train/15880", "prompt": "from collections import Counter\n\n\ndef add_dict(d1, d2):\n    \"\"\"Write a function to combine two dictionaries by adding values for common keys.\n    \"\"\"\n", "entry_point": "add_dict", "canonical_solution": "    add_dict = Counter(d1) + Counter(d2)\n    return add_dict\n", "test": "def check(candidate):\n    assert candidate({'a': 100, 'b': 200, 'c':300},{'a': 300, 'b': 200, 'd':400})==({'b': 400, 'd': 400, 'a': 400, 'c': 300}) \n    assert candidate({'a': 500, 'b': 700, 'c':900},{'a': 500, 'b': 600, 'd':900})==({'b': 1300, 'd': 900, 'a': 1000, 'c': 900}) \n    assert candidate({'a':900,'b':900,'d':900},{'a':900,'b':900,'d':900})==({'b': 1800, 'd': 1800, 'a': 1800})\n", "cot": "How to solve:\nStep 1. Import Counter from collections.\nStep 2. Define a function add_dict that takes two dictionaries d1 and d2 as input.\nStep 3. Use Counter to convert d1 and d2 into Counter objects.\nStep 4. Add the Counters together to combine the dictionaries by adding values for common keys.\nStep 5. Return the combined dictionary."}
{"task_id": "train/15881", "prompt": "def count_Unset_Bits(n):\n    \"\"\"Write a python function to count the total unset bits from 1 to n.\n    \"\"\"\n", "entry_point": "count_Unset_Bits", "canonical_solution": "    cnt = 0\n    for i in range(1, n + 1):\n        temp = i\n        while temp:\n            if temp % 2 == 0:\n                cnt += 1\n            temp = temp // 2\n    return cnt\n", "test": "def check(candidate):\n    assert candidate(2) == 1\n    assert candidate(5) == 4\n    assert candidate(14) == 17\n", "cot": "How to solve:\nStep 1. Initialize a counter variable cnt as 0.\nStep 2. Iterate from 1 to n.\nStep 3. For each number, convert it to binary and count the number of unset bits (bits with value 0).\nStep 4. Increment the counter cnt for each unset bit found.\nStep 5. Return the total count of unset bits from 1 to n."}
{"task_id": "train/15882", "prompt": "def even_num(x):\n    \"\"\"Write a function to return true if the given number is even else return false.\n    \"\"\"\n", "entry_point": "even_num", "canonical_solution": "    if x % 2 == 0:\n        return True\n    else:\n        return False\n", "test": "def check(candidate):\n    assert candidate(13.5)==False\n    assert candidate(0)==True\n    assert candidate(-9)==False\n", "cot": "How to solve:\nStep 1. Check if the given number x is divisible by 2.\nStep 2. If x is divisible by 2 (i.e., x % 2 == 0), return True.\nStep 3. Otherwise, return False."}
{"task_id": "train/15883", "prompt": "def factorial(start, end):\n    \"\"\"Write a python function to find the sum of squares of binomial co-efficients.\n    \"\"\"\n", "entry_point": "factorial", "canonical_solution": "    res = 1\n    for i in range(start, end + 1):\n        res *= i\n    return res\n\n\ndef sum_of_square(n):\n    return int(factorial(n + 1, 2 * n) / factorial(1, n))\n", "test": "def check(candidate):\n    assert sum_of_square(4) == 70\n    assert sum_of_square(5) == 252\n    assert sum_of_square(2) == 6\n", "cot": "How to solve:\nStep 1. Define a function factorial that calculates the factorial of a given range.\nStep 2. Initialize res as 1.\nStep 3. Iterate through the range from start to end.\n    - Multiply each value to res.\nStep 4. Return res.\nStep 5. Define a function sum_of_square that calculates the sum of squares of binomial coefficients.\nStep 6. Return the integer division of factorial(n + 1, 2 * n) by factorial(1, n)."}
{"task_id": "train/15884", "prompt": "import re\n\n\ndef extract_date(url):\n    \"\"\"Write a function to extract year, month and date from a url by using regex.\n    \"\"\"\n", "entry_point": "extract_date", "canonical_solution": "    return re.findall(r\"/(\\d{4})/(\\d{1,2})/(\\d{1,2})/\", url)\n", "test": "def check(candidate):\n    assert candidate(\"https://www.washingtonpost.com/news/football-insider/wp/2016/09/02/odell-beckhams-fame-rests-on-one-stupid-little-ball-josh-norman-tells-author/\") == [('2016', '09', '02')]\n    assert candidate(\"https://www.indiatoday.in/movies/celebrities/story/wp/2020/11/03/odeof-sushant-singh-rajput-s-death-his-brother-in-law-shares-advice-for-fans-1749646/\") == [('2020', '11', '03')]\n    assert candidate(\"https://economictimes.indiatimes.com/news/economy/2020/12/29/finance/pension-assets-under-pfrda-touch-rs-5-32-lakh-crore/articleshow/79736619.cms\") == [('2020', '12', '29')]\n", "cot": "How to solve:\nStep 1. Import the 're' module for regular expressions.\nStep 2. Define a function 'extract_date' that takes a URL as input.\nStep 3. Use re.findall to extract year, month, and date from the URL using regex pattern \"/(\\d{4})/(\\d{1,2})/(\\d{1,2})/\".\nStep 4. The regex pattern captures groups for year, month, and date.\nStep 5. Return the result of re.findall."}
{"task_id": "train/15885", "prompt": "def lucky_num(n):\n    \"\"\"Write a function to print the first n lucky numbers.\n    \"\"\"\n", "entry_point": "lucky_num", "canonical_solution": "    List = range(-1, n * n + 9, 2)\n    i = 2\n    while List[i:]:\n        List = sorted(set(List) - set(List[List[i] :: List[i]]))\n        i += 1\n    return List[1 : n + 1]\n", "test": "def check(candidate):\n    assert candidate(10)==[1, 3, 7, 9, 13, 15, 21, 25, 31, 33] \n    assert candidate(5)==[1, 3, 7, 9, 13]\n    assert candidate(8)==[1, 3, 7, 9, 13, 15, 21, 25]\n", "cot": "How to solve:\nStep 1. Initialize a list 'List' with odd numbers starting from -1 up to n * n + 9.\nStep 2. Initialize i as 2.\nStep 3. While there are elements in List starting from index i:\n    - Remove multiples of List[i] from List.\n    - Increment i by 1.\nStep 4. Return the sublist of List containing the first n lucky numbers starting from index 1."}
{"task_id": "train/15886", "prompt": "def find_fixed_point(arr, n):\n    \"\"\"Write a function to find the fixed point in the given array.\n    \"\"\"\n", "entry_point": "find_fixed_point", "canonical_solution": "    for i in range(n):\n        if arr[i] is i:\n            return i\n    return -1\n", "test": "def check(candidate):\n    assert candidate([-10, -1, 0, 3, 10, 11, 30, 50, 100],9) == 3\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8],8) == -1\n    assert candidate([0, 2, 5, 8, 17],5) == 0\n", "cot": "How to solve:\nStep 1. Iterate through the array using a loop.\nStep 2. Check if the value at the current index is equal to the index itself.\n    - If true, return the index.\nStep 3. If no fixed point is found after the loop, return -1."}
{"task_id": "train/15887", "prompt": "def previous_palindrome(num):\n    \"\"\"Write a function to find the previous palindrome of a specified number.\n    \"\"\"\n", "entry_point": "previous_palindrome", "canonical_solution": "    for x in range(num - 1, 0, -1):\n        if str(x) == str(x)[::-1]:\n            return x\n", "test": "def check(candidate):\n    assert candidate(99)==88\n    assert candidate(1221)==1111\n    assert candidate(120)==111\n", "cot": "How to solve:\nStep 1. Start a loop from num-1 down to 1.\nStep 2. Check if the current number is a palindrome by comparing it with its reverse.\nStep 3. If a palindrome is found, return that number.\nStep 4. If no palindrome is found, the loop will continue until it reaches 1."}
{"task_id": "train/15888", "prompt": "import datetime\n\n\ndef check_date(m, d, y):\n    \"\"\"Write a function to validate a gregorian date.\n    \"\"\"\n", "entry_point": "check_date", "canonical_solution": "    try:\n        m, d, y = map(int, (m, d, y))\n        datetime.date(y, m, d)\n        return True\n    except ValueError:\n        return False\n", "test": "def check(candidate):\n    assert candidate(11,11,2002)==True\n    assert candidate(13,11,2002)==False\n    assert candidate('11','11','2002')==True\n", "cot": "How to solve:\nStep 1. Use the datetime module to validate a gregorian date.\nStep 2. Try to convert the input month, day, and year to integers.\nStep 3. Create a datetime object using the converted values (year, month, day).\nStep 4. If the above steps execute without errors, return True (valid date).\nStep 5. If any ValueError occurs during conversion or creating the datetime object, return False (invalid date)."}
{"task_id": "train/15889", "prompt": "import heapq\n\n\ndef maximum_product(nums):\n    \"\"\"Write a function to compute maximum product of three numbers of a given array of integers using heap queue algorithm.\n    \"\"\"\n", "entry_point": "maximum_product", "canonical_solution": "\n    a, b = heapq.nlargest(3, nums), heapq.nsmallest(2, nums)\n    return max(a[0] * a[1] * a[2], a[0] * b[0] * b[1])\n", "test": "def check(candidate):\n    assert candidate( [12, 74, 9, 50, 61, 41])==225700\n    assert candidate([25, 35, 22, 85, 14, 65, 75, 25, 58])==414375\n    assert candidate([18, 14, 10, 9, 8, 7, 9, 3, 2, 4, 1])==2520\n", "cot": "How to solve:\nStep 1. Use heapq to get the three largest and two smallest numbers from the input array.\nStep 2. Calculate the maximum product of three numbers by multiplying the three largest numbers and compare it with the product of the largest number and two smallest numbers.\nStep 3. Return the maximum product calculated in the previous step."}
{"task_id": "train/15890", "prompt": "def binomial_coeff(n, k):\n    \"\"\"Write a function to find ln, m lobb number.\n    \"\"\"\n", "entry_point": "binomial_coeff", "canonical_solution": "    C = [[0 for j in range(k + 1)] for i in range(n + 1)]\n    for i in range(0, n + 1):\n        for j in range(0, min(i, k) + 1):\n            if j == 0 or j == i:\n                C[i][j] = 1\n            else:\n                C[i][j] = C[i - 1][j - 1] + C[i - 1][j]\n    return C[n][k]\n\n\ndef lobb_num(n, m):\n    return ((2 * m + 1) * binomial_coeff(2 * n, m + n)) / (m + n + 1)\n", "test": "def check(candidate):\n    assert int(lobb_num(5, 3)) == 35\n    assert int(lobb_num(3, 2)) == 5\n    assert int(lobb_num(4, 2)) == 20\n", "cot": "How to solve:\nStep 1. Define a function binomial_coeff to calculate binomial coefficient using dynamic programming.\nStep 2. Initialize a 2D list C to store the coefficients.\nStep 3. Fill the list C using the binomial coefficient formula.\nStep 4. Define a function lobb_num to calculate the Lobb number using the binomial_coeff function.\nStep 5. Calculate the Lobb number using the provided formula.\nStep 6. Return the calculated Lobb number."}
{"task_id": "train/15891", "prompt": "import re\n\n\ndef end_num(string):\n    \"\"\"Write a function to check for a number at the end of a string.\n    \"\"\"\n", "entry_point": "end_num", "canonical_solution": "    text = re.compile(r\".*[0-9]$\")\n    if text.match(string):\n        return True\n    else:\n        return False\n", "test": "def check(candidate):\n    assert candidate('abcdef')==False\n    assert candidate('abcdef7')==True\n    assert candidate('abc')==False\n", "cot": "How to solve:\nStep 1. Import the regular expression module.\nStep 2. Define a function that takes a string as input.\nStep 3. Compile a regular expression pattern that matches any string ending with a number.\nStep 4. Use the compiled pattern to check if the input string matches the pattern.\nStep 5. If there is a match, return True; otherwise, return False."}
{"task_id": "train/15892", "prompt": "def is_Two_Alter(s):\n    \"\"\"Write a python function to check whether the given string is made up of two alternating characters or not.\n    \"\"\"\n", "entry_point": "is_Two_Alter", "canonical_solution": "    for i in range(len(s) - 2):\n        if s[i] != s[i + 2]:\n            return False\n    if s[0] == s[1]:\n        return False\n    return True\n", "test": "def check(candidate):\n    assert candidate(\"abab\") == True\n    assert candidate(\"aaaa\") == False\n    assert candidate(\"xyz\") == False\n", "cot": "How to solve:\nStep 1. Iterate through the string up to the second last character.\nStep 2. Check if the character at the current index is different from the character two positions ahead.\n    - If not, return False.\nStep 3. Check if the first two characters are the same.\n    - If they are, return False.\nStep 4. If all checks pass, return True."}
{"task_id": "train/15893", "prompt": "def rearrange_numbs(array_nums):\n    \"\"\"Write a function to rearrange positive and negative numbers in a given array using lambda function.\n    \"\"\"\n", "entry_point": "rearrange_numbs", "canonical_solution": "    result = sorted(array_nums, key=lambda i: 0 if i == 0 else -1 / i)\n    return result\n", "test": "def check(candidate):\n    assert candidate([-1, 2, -3, 5, 7, 8, 9, -10])==[2, 5, 7, 8, 9, -10, -3, -1]\n    assert candidate([10,15,14,13,-18,12,-20])==[10, 12, 13, 14, 15, -20, -18]\n    assert candidate([-20,20,-10,10,-30,30])==[10, 20, 30, -30, -20, -10]\n", "cot": "How to solve:\nStep 1. Use the sorted function to rearrange the array_nums based on a custom key.\nStep 2. Define a lambda function as the key:\n    - If the number is 0, return 0.\n    - Otherwise, return -1 divided by the number.\nStep 3. Sort the array based on the lambda function key.\nStep 4. Return the rearranged array."}
{"task_id": "train/15894", "prompt": "def find_triplet_array(A, arr_size, sum):\n    \"\"\"Write a function to find if there is a triplet in the array whose sum is equal to a given value.\n    \"\"\"\n", "entry_point": "find_triplet_array", "canonical_solution": "    for i in range(0, arr_size - 2):\n        for j in range(i + 1, arr_size - 1):\n            for k in range(j + 1, arr_size):\n                if A[i] + A[j] + A[k] == sum:\n                    return A[i], A[j], A[k]\n                    return True\n    return False\n", "test": "def check(candidate):\n    assert candidate([1, 4, 45, 6, 10, 8], 6, 22) == (4, 10, 8)\n    assert candidate([12, 3, 5, 2, 6, 9], 6, 24) == (12, 3, 9)\n    assert candidate([1, 2, 3, 4, 5], 5, 9) == (1, 3, 5)\n", "cot": "How to solve:\nStep 1. Iterate through the array using three nested loops to find all possible triplets.\nStep 2. Check if the sum of the current triplet is equal to the given value.\nStep 3. If found, return the triplet.\nStep 4. If no triplet is found after all iterations, return False."}
{"task_id": "train/15895", "prompt": "import re\n\n\ndef text_uppercase_lowercase(text):\n    \"\"\"Write a function to find the sequences of one upper case letter followed by lower case letters.\n    \"\"\"\n", "entry_point": "text_uppercase_lowercase", "canonical_solution": "    patterns = \"[A-Z]+[a-z]+$\"\n    if re.search(patterns, text):\n        return \"Found a match!\"\n    else:\n        return \"Not matched!\"\n", "test": "def check(candidate):\n    assert candidate(\"AaBbGg\")==('Found a match!')\n    assert candidate(\"aA\")==('Not matched!')\n    assert candidate(\"PYTHON\")==('Not matched!')\n", "cot": "How to solve:\nStep 1. Import the regular expression module.\nStep 2. Define a function to find sequences of one uppercase letter followed by lowercase letters.\nStep 3. Define the pattern \"[A-Z]+[a-z]+$\" to match the required sequence.\nStep 4. Use re.search to search for the pattern in the input text.\nStep 5. If a match is found, return \"Found a match!\", else return \"Not matched!\"."}
{"task_id": "train/15896", "prompt": "def coin_change(S, m, n):\n    \"\"\"Write a function to count coin change.\n    \"\"\"\n", "entry_point": "coin_change", "canonical_solution": "    table = [[0 for x in range(m)] for x in range(n + 1)]\n    for i in range(m):\n        table[0][i] = 1\n    for i in range(1, n + 1):\n        for j in range(m):\n            x = table[i - S[j]][j] if i - S[j] >= 0 else 0\n            y = table[i][j - 1] if j >= 1 else 0\n            table[i][j] = x + y\n    return table[n][m - 1]\n", "test": "def check(candidate):\n    assert candidate([1, 2, 3],3,4)==4\n    assert candidate([4,5,6,7,8,9],6,9)==2\n    assert candidate([4,5,6,7,8,9],6,4)==1\n", "cot": "How to solve:\nStep 1. Create a table of size (n+1) x m filled with zeros.\nStep 2. Initialize the first row of the table with 1.\nStep 3. Iterate over rows from 1 to n+1 and columns from 0 to m.\nStep 4. Calculate x as table[i - S[j]][j] if i - S[j] >= 0, else 0.\nStep 5. Calculate y as table[i][j - 1] if j >= 1, else 0.\nStep 6. Update table[i][j] as the sum of x and y.\nStep 7. Return the value at table[n][m-1] as the result of counting coin change."}
{"task_id": "train/15897", "prompt": "def multiply_list(items):\n    \"\"\"Write a python function to multiply all items in the list.\n    \"\"\"\n", "entry_point": "multiply_list", "canonical_solution": "    tot = 1\n    for x in items:\n        tot *= x\n    return tot\n", "test": "def check(candidate):\n    assert candidate([1,-2,3]) == -6\n    assert candidate([1,2,3,4]) == 24\n    assert candidate([3,1,2,3]) == 18\n", "cot": "How to solve:\nStep 1. Initialize a variable 'tot' as 1.\nStep 2. Iterate through each item in the list.\n    - Multiply each item with 'tot'.\nStep 3. Return the final value of 'tot' after multiplying all items in the list."}
{"task_id": "train/15898", "prompt": "def remove_tuple(test_list):\n    \"\"\"Write a function to remove all tuples with all none values in the given tuple list.\n    \"\"\"\n", "entry_point": "remove_tuple", "canonical_solution": "    res = [sub for sub in test_list if not all(ele == None for ele in sub)]\n    return str(res)\n", "test": "def check(candidate):\n    assert candidate([(None, 2), (None, None), (3, 4), (12, 3), (None, )] ) == '[(None, 2), (3, 4), (12, 3)]'\n    assert candidate([(None, None), (None, None), (3, 6), (17, 3), (None,1 )] ) == '[(3, 6), (17, 3), (None, 1)]'\n    assert candidate([(1, 2), (2, None), (3, None), (24, 3), (None, None )] ) == '[(1, 2), (2, None), (3, None), (24, 3)]'\n", "cot": "How to solve:\nStep 1. Iterate through the tuples in the input list.\nStep 2. Check if all elements in the tuple are None.\nStep 3. If all elements are None, exclude the tuple from the result list.\nStep 4. Return the result list as a string."}
{"task_id": "train/15899", "prompt": "def chunk_tuples(test_tup, N):\n    \"\"\"Write a function to perform chunking of tuples each of size n.\n    \"\"\"\n", "entry_point": "chunk_tuples", "canonical_solution": "    res = [test_tup[i : i + N] for i in range(0, len(test_tup), N)]\n    return res\n", "test": "def check(candidate):\n    assert candidate((10, 4, 5, 6, 7, 6, 8, 3, 4), 3) == [(10, 4, 5), (6, 7, 6), (8, 3, 4)]\n    assert candidate((1, 2, 3, 4, 5, 6, 7, 8, 9), 2) == [(1, 2), (3, 4), (5, 6), (7, 8), (9,)]\n    assert candidate((11, 14, 16, 17, 19, 21, 22, 25), 4) == [(11, 14, 16, 17), (19, 21, 22, 25)]\n", "cot": "How to solve:\nStep 1. Initialize an empty list to store the chunked tuples.\nStep 2. Use list comprehension to iterate through the input tuple.\n    - Slice the tuple from index i to i+N to create chunks of size N.\n    - Append each chunk to the result list.\nStep 3. Return the list of chunked tuples."}
{"task_id": "train/15900", "prompt": "def max_product(arr):\n    \"\"\"Write a function to find a pair with the highest product from a given array of integers.\n    \"\"\"\n", "entry_point": "max_product", "canonical_solution": "    arr_len = len(arr)\n    if arr_len < 2:\n        return None\n    x = arr[0]\n    y = arr[1]\n    for i in range(0, arr_len):\n        for j in range(i + 1, arr_len):\n            if arr[i] * arr[j] > x * y:\n                x = arr[i]\n                y = arr[j]\n    return x, y\n", "test": "def check(candidate):\n    assert candidate([1, 2, 3, 4, 7, 0, 8, 4])==(7, 8)\n    assert candidate([0, -1, -2, -4, 5, 0, -6])==(-4, -6)\n    assert candidate([1, 3, 5, 6, 8, 9])==(8,9)\n", "cot": "How to solve:\nStep 1. Initialize x and y as the first two elements of the array.\nStep 2. Iterate through all pairs of elements in the array.\nStep 3. If the product of the current pair is greater than the product of x and y, update x and y.\nStep 4. Return the pair (x, y) with the highest product."}
{"task_id": "train/15901", "prompt": "def super_seq(X, Y, m, n):\n    \"\"\"Write a function to find the length of the shortest string that has both str1 and str2 as subsequences.\n    \"\"\"\n", "entry_point": "super_seq", "canonical_solution": "    if not m:\n        return n\n    if not n:\n        return m\n    if X[m - 1] == Y[n - 1]:\n        return 1 + super_seq(X, Y, m - 1, n - 1)\n    return 1 + min(super_seq(X, Y, m - 1, n), super_seq(X, Y, m, n - 1))\n", "test": "def check(candidate):\n    assert candidate(\"AGGTAB\", \"GXTXAYB\", 6, 7) == 9\n    assert candidate(\"feek\", \"eke\", 4, 3) == 5\n    assert candidate(\"PARRT\", \"RTA\", 5, 3) == 6\n", "cot": "How to solve:\nStep 1. Check if either of the strings is empty, return the length of the other string.\nStep 2. If the last characters of both strings match, recursively call the function with the last characters removed.\nStep 3. If the last characters don't match, recursively call the function with either the last character of the first string removed or the last character of the second string removed.\nStep 4. Return the minimum of the above recursive calls plus 1."}
{"task_id": "train/15902", "prompt": "def max_of_two(x, y):\n    \"\"\"Write a function to find maximum of two numbers.\n    \"\"\"\n", "entry_point": "max_of_two", "canonical_solution": "    if x > y:\n        return x\n    return y\n", "test": "def check(candidate):\n    assert candidate(10,20)==20\n    assert candidate(19,15)==19\n    assert candidate(-10,-20)==-10\n", "cot": "How to solve:\nStep 1. Define a function max_of_two that takes two parameters x and y.\nStep 2. Check if x is greater than y.\n    - If true, return x as the maximum.\n    - If false, return y as the maximum."}
{"task_id": "train/15903", "prompt": "def mutiple_tuple(nums):\n    \"\"\"Write a python function to calculate the product of all the numbers of a given tuple.\n    \"\"\"\n", "entry_point": "mutiple_tuple", "canonical_solution": "    temp = list(nums)\n    product = 1\n    for x in temp:\n        product *= x\n    return product\n", "test": "def check(candidate):\n    assert candidate((4, 3, 2, 2, -1, 18)) == -864\n    assert candidate((1,2,3)) == 6\n    assert candidate((-2,-4,-6)) == -48\n", "cot": "How to solve:\nStep 1. Convert the input tuple to a list.\nStep 2. Initialize a variable 'product' to 1.\nStep 3. Iterate through the list.\n    - Multiply each element with 'product'.\nStep 4. Return the final product."}
{"task_id": "train/15904", "prompt": "def binomial_coeffi(n, k):\n    \"\"\"Write a function to find n-th rencontres number.\n    \"\"\"\n", "entry_point": "binomial_coeffi", "canonical_solution": "    if k == 0 or k == n:\n        return 1\n    return binomial_coeffi(n - 1, k - 1) + binomial_coeffi(n - 1, k)\n\n\ndef rencontres_number(n, m):\n    if n == 0 and m == 0:\n        return 1\n    if n == 1 and m == 0:\n        return 0\n    if m == 0:\n        return (n - 1) * (rencontres_number(n - 1, 0) + rencontres_number(n - 2, 0))\n    return binomial_coeffi(n, m) * rencontres_number(n - m, 0)\n", "test": "def check(candidate):\n    assert rencontres_number(7, 2) == 924\n    assert rencontres_number(3, 0) == 2\n    assert rencontres_number(3, 1) == 3\n", "cot": "How to solve:\nStep 1. Define a recursive function binomial_coeffi to calculate binomial coefficients.\nStep 2. Define a recursive function rencontres_number to calculate the n-th rencontres number.\nStep 3. Handle base cases for rencontres_number function:\n    - If n and m are both 0, return 1.\n    - If n is 1 and m is 0, return 0.\n    - If m is 0, return the formula (n - 1) * (rencontres_number(n - 1, 0) + rencontres_number(n - 2, 0)).\nStep 4. For other cases, return the product of binomial coefficient and rencontres_number recursively."}
{"task_id": "train/15905", "prompt": "class Node:\n    def __init__(self, data):\n        self.data = data\n        self.left = None\n        self.right = None\n\n\ndef max_height(node):\n    \"\"\"Write a function to calculate the height of the given binary tree.\n    \"\"\"\n", "entry_point": "max_height", "canonical_solution": "    if node is None:\n        return 0\n    else:\n        left_height = max_height(node.left)\n        right_height = max_height(node.right)\n        if left_height > right_height:\n            return left_height + 1\n        else:\n            return right_height + 1\n", "test": "root = Node(1) \r\nroot.left = Node(2) \r\nroot.right = Node(3) \r\nroot.left.left = Node(4) \r\nroot.left.right = Node(5) \r\nroot1 = Node(1);  \r\nroot1.left = Node(2);  \r\nroot1.right = Node(3);  \r\nroot1.left.left = Node(4);  \r\nroot1.right.left = Node(5);  \r\nroot1.right.right = Node(6);  \r\nroot1.right.right.right= Node(7);  \r\nroot1.right.right.right.right = Node(8)\r\nroot2 = Node(1) \r\nroot2.left = Node(2) \r\nroot2.right = Node(3) \r\nroot2.left.left = Node(4) \r\nroot2.left.right = Node(5)\r\nroot2.left.left.left = Node(6)\r\nroot2.left.left.right = Node(7)\ndef check(candidate):\n    assert (max_height(root)) == 3\n    assert (max_height(root1)) == 5 \n    assert (max_height(root2)) == 4\n", "cot": "How to solve:\nStep 1. Define a class Node with data, left, and right attributes.\nStep 2. Implement a function max_height to calculate the height of a binary tree.\nStep 3. If the node is None, return 0 (base case).\nStep 4. Recursively calculate the height of the left and right subtrees.\nStep 5. Compare the heights of the left and right subtrees.\nStep 6. Return the maximum height of the left or right subtree plus 1."}
{"task_id": "train/15906", "prompt": "import re\n\n\ndef change_date_format(dt):\n    \"\"\"Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    \"\"\"\n", "entry_point": "change_date_format", "canonical_solution": "    return re.sub(r\"(\\d{4})-(\\d{1,2})-(\\d{1,2})\", \"\\\\3-\\\\2-\\\\1\", dt)\n    return change_date_format(dt)\n", "test": "def check(candidate):\n    assert candidate('2026-01-02')=='02-01-2026'\n    assert candidate('2021-01-04')=='04-01-2021'\n    assert candidate('2030-06-06')=='06-06-2030'\n", "cot": "How to solve:\nStep 1. Use regular expression to match the date format yyyy-mm-dd.\nStep 2. Use re.sub() to replace the matched date format with dd-mm-yyyy format.\nStep 3. Return the modified date."}
{"task_id": "train/15907", "prompt": "def count_tuplex(tuplex, value):\n    \"\"\"Write a function to count repeated items of a tuple.\n    \"\"\"\n", "entry_point": "count_tuplex", "canonical_solution": "    count = tuplex.count(value)\n    return count\n", "test": "def check(candidate):\n    assert candidate((2, 4, 5, 6, 2, 3, 4, 4, 7),4)==3\n    assert candidate((2, 4, 5, 6, 2, 3, 4, 4, 7),2)==2\n    assert candidate((2, 4, 7, 7, 7, 3, 4, 4, 7),7)==4\n", "cot": "How to solve:\nStep 1. Use the count method on the tuple to count the occurrences of the specified value.\nStep 2. Return the count of the specified value in the tuple."}
{"task_id": "train/15908", "prompt": "import re\n\n\ndef text_match(text):\n    \"\"\"Write a function that matches a string that has an a followed by zero or more b's by using regex.\n    \"\"\"\n", "entry_point": "text_match", "canonical_solution": "    patterns = \"ab*?\"\n    if re.search(patterns, text):\n        return \"Found a match!\"\n    else:\n        return \"Not matched!\"\n", "test": "def check(candidate):\n    assert candidate(\"msb\") == 'Not matched!'\n    assert candidate(\"a0c\") == 'Found a match!'\n    assert candidate(\"abbc\") == 'Found a match!'\n", "cot": "How to solve:\nStep 1. Define a regex pattern \"ab*?\" where 'a' is followed by zero or more 'b's.\nStep 2. Use re.search to search for the pattern in the input text.\nStep 3. If a match is found, return \"Found a match!\".\nStep 4. If no match is found, return \"Not matched!\"."}
{"task_id": "train/15909", "prompt": "import math\n\n\ndef sum_series(number):\n    \"\"\"Write a function to calculate the sum of series 1\u00b3+2\u00b3+3\u00b3+\u2026.+n\u00b3.\n    \"\"\"\n", "entry_point": "sum_series", "canonical_solution": "    total = 0\n    total = math.pow((number * (number + 1)) / 2, 2)\n    return total\n", "test": "def check(candidate):\n    assert candidate(7)==784\n    assert candidate(5)==225\n    assert candidate(15)==14400\n", "cot": "How to solve:\nStep 1. Import the math module.\nStep 2. Define a function sum_series that takes a number as input.\nStep 3. Initialize total as 0.\nStep 4. Calculate the sum of the series using the formula: (n * (n + 1) / 2) ^ 2.\nStep 5. Return the total."}
{"task_id": "train/15910", "prompt": "def remove_duplic_list(l):\n    \"\"\"Write a function to remove duplicate words from a given list of strings.\n    \"\"\"\n", "entry_point": "remove_duplic_list", "canonical_solution": "    temp = []\n    for x in l:\n        if x not in temp:\n            temp.append(x)\n    return temp\n", "test": "def check(candidate):\n    assert candidate([\"Python\", \"Exercises\", \"Practice\", \"Solution\", \"Exercises\"])==['Python', 'Exercises', 'Practice', 'Solution']\n    assert candidate([\"Python\", \"Exercises\", \"Practice\", \"Solution\", \"Exercises\",\"Java\"])==['Python', 'Exercises', 'Practice', 'Solution', 'Java']\n    assert candidate([\"Python\", \"Exercises\", \"Practice\", \"Solution\", \"Exercises\",\"C++\",\"C\",\"C++\"])==['Python', 'Exercises', 'Practice', 'Solution','C++','C']\n", "cot": "How to solve:\nStep 1. Initialize an empty list called temp.\nStep 2. Iterate through each word in the input list.\n    - If the word is not already in the temp list, add it to temp.\nStep 3. Return the temp list containing unique words."}
{"task_id": "train/15911", "prompt": "import re\n\n\ndef camel_to_snake(text):\n    \"\"\"Write a function to convert camel case string to snake case string by using regex.\n    \"\"\"\n", "entry_point": "camel_to_snake", "canonical_solution": "    str1 = re.sub(\"(.)([A-Z][a-z]+)\", r\"\\1_\\2\", text)\n    return re.sub(\"([a-z0-9])([A-Z])\", r\"\\1_\\2\", str1).lower()\n", "test": "def check(candidate):\n    assert candidate('GoogleAssistant') == 'google_assistant'\n    assert candidate('ChromeCast') == 'chrome_cast'\n    assert candidate('QuadCore') == 'quad_core'\n", "cot": "How to solve:\nStep 1. Import the 're' module for regular expressions.\nStep 2. Define a function 'camel_to_snake' that takes a camel case string as input.\nStep 3. Use re.sub to replace occurrences of a lowercase letter followed by an uppercase letter with the lowercase letter, an underscore, and the uppercase letter.\nStep 4. Use re.sub again to replace occurrences of a lowercase letter or digit followed by an uppercase letter with the lowercase letter/digit, an underscore, and the uppercase letter.\nStep 5. Convert the result to lowercase.\nStep 6. Return the snake case string."}
{"task_id": "train/15912", "prompt": "def dealnnoy_num(n, m):\n    \"\"\"Write a function to find the nth delannoy number.\n    \"\"\"\n", "entry_point": "dealnnoy_num", "canonical_solution": "    if m == 0 or n == 0:\n        return 1\n    return dealnnoy_num(m - 1, n) + dealnnoy_num(m - 1, n - 1) + dealnnoy_num(m, n - 1)\n", "test": "def check(candidate):\n    assert candidate(3, 4) == 129\n    assert candidate(3, 3) == 63\n    assert candidate(4, 5) == 681\n", "cot": "How to solve:\nStep 1. Define a recursive function dealnnoy_num that takes two parameters n and m.\nStep 2. Check if either m or n is 0, return 1.\nStep 3. Recursively call dealnnoy_num with updated parameters:\n    - Call dealnnoy_num(m - 1, n) + dealnnoy_num(m - 1, n - 1) + dealnnoy_num(m, n - 1).\nStep 4. The function will keep calling itself until the base case is reached, and then return the sum of the three recursive calls."}
{"task_id": "train/15913", "prompt": "def series_sum(number):\n    \"\"\"Write a function to calculate the sum of series 1\u00b2+2\u00b2+3\u00b2+\u2026.+n\u00b2.\n    \"\"\"\n", "entry_point": "series_sum", "canonical_solution": "    total = 0\n    total = (number * (number + 1) * (2 * number + 1)) / 6\n    return total\n", "test": "def check(candidate):\n    assert candidate(6)==91\n    assert candidate(7)==140\n    assert candidate(12)==650\n", "cot": "How to solve:\nStep 1. Initialize total as 0.\nStep 2. Calculate the sum of the series using the formula: (number * (number + 1) * (2 * number + 1)) / 6.\nStep 3. Return the total sum of the series."}
{"task_id": "train/15914", "prompt": "def re_arrange_tuples(test_list, ord_list):\n    \"\"\"Write a function to re-arrange the given tuples based on the given ordered list.\n    \"\"\"\n", "entry_point": "re_arrange_tuples", "canonical_solution": "    temp = dict(test_list)\n    res = [(key, temp[key]) for key in ord_list]\n    return res\n", "test": "def check(candidate):\n    assert candidate([(4, 3), (1, 9), (2, 10), (3, 2)],  [1, 4, 2, 3]) == [(1, 9), (4, 3), (2, 10), (3, 2)]\n    assert candidate([(5, 4), (2, 10), (3, 11), (4, 3)],  [3, 4, 2, 3]) == [(3, 11), (4, 3), (2, 10), (3, 11)]\n    assert candidate([(6, 3), (3, 8), (5, 7), (2, 4)],  [2, 5, 3, 6]) == [(2, 4), (5, 7), (3, 8), (6, 3)]\n", "cot": "How to solve:\nStep 1. Convert the test_list into a dictionary.\nStep 2. Create a list comprehension to rearrange tuples based on the ordered list.\nStep 3. Return the rearranged list of tuples."}
{"task_id": "train/15915", "prompt": "from collections import Counter\n\n\ndef max_char(str1):\n    \"\"\"Write a function to count the most common character in a given string.\n    \"\"\"\n", "entry_point": "max_char", "canonical_solution": "    temp = Counter(str1)\n    max_char = max(temp, key=temp.get)\n    return max_char\n", "test": "def check(candidate):\n    assert candidate(\"hello world\")==('l')\n    assert candidate(\"hello \")==('l')\n    assert candidate(\"python pr\")==('p')\n", "cot": "How to solve:\nStep 1. Import Counter from collections.\nStep 2. Create a Counter object 'temp' for the input string.\nStep 3. Find the character with the maximum count using max function with key as temp.get.\nStep 4. Return the character with the maximum count."}
{"task_id": "train/15916", "prompt": "import sys\n\n\ndef find_closet(A, B, C, p, q, r):\n    \"\"\"Write a function to find three closest elements from three sorted arrays.\n    \"\"\"\n", "entry_point": "find_closet", "canonical_solution": "    diff = sys.maxsize\n    res_i = 0\n    res_j = 0\n    res_k = 0\n    i = 0\n    j = 0\n    k = 0\n    while i < p and j < q and k < r:\n        minimum = min(A[i], min(B[j], C[k]))\n        maximum = max(A[i], max(B[j], C[k]))\n        if maximum - minimum < diff:\n            res_i = i\n            res_j = j\n            res_k = k\n            diff = maximum - minimum\n        if diff == 0:\n            break\n        if A[i] == minimum:\n            i = i + 1\n        elif B[j] == minimum:\n            j = j + 1\n        else:\n            k = k + 1\n    return A[res_i], B[res_j], C[res_k]\n", "test": "def check(candidate):\n    assert candidate([1, 4, 10],[2, 15, 20],[10, 12],3,3,2) == (10, 15, 10)\n    assert candidate([20, 24, 100],[2, 19, 22, 79, 800],[10, 12, 23, 24, 119],3,5,5) == (24, 22, 23)\n    assert candidate([2, 5, 11],[3, 16, 21],[11, 13],3,3,2) == (11, 16, 11)\n", "cot": "How to solve:\nStep 1. Initialize variables to store the closest elements and the minimum difference.\nStep 2. Initialize pointers for each array.\nStep 3. Iterate through the arrays while pointers are within bounds.\nStep 4. Find the minimum and maximum elements among the current pointers.\nStep 5. Update the closest elements if the current difference is smaller.\nStep 6. Move the pointer of the array with the minimum element.\nStep 7. Return the three closest elements."}
{"task_id": "train/15917", "prompt": "def sorted_models(models):\n    \"\"\"Write a function to sort a list of dictionaries using lambda function.\n    \"\"\"\n", "entry_point": "sorted_models", "canonical_solution": "    sorted_models = sorted(models, key=lambda x: x[\"color\"])\n    return sorted_models\n", "test": "def check(candidate):\n    assert candidate([{'make':'Nokia', 'model':216, 'color':'Black'}, {'make':'Mi Max', 'model':2, 'color':'Gold'}, {'make':'Samsung', 'model': 7, 'color':'Blue'}])==[{'make': 'Nokia', 'model': 216, 'color': 'Black'}, {'make': 'Samsung', 'model': 7, 'color': 'Blue'}, {'make': 'Mi Max', 'model': 2, 'color': 'Gold'}]\n    assert candidate([{'make':'Vivo', 'model':20,'color':'Blue'},{'make': 'oppo','model':17,'color':'Gold'},{'make':'Apple','model':11,'color':'red'}])==([{'make':'Vivo', 'model':20,'color':'Blue'},{'make': 'oppo','model':17,'color':'Gold'},{'make':'Apple','model':11,'color':'red'}])\n    assert candidate([{'make':'micromax','model':40,'color':'grey'},{'make':'poco','model':60,'color':'blue'}])==([{'make':'poco','model':60,'color':'blue'},{'make':'micromax','model':40,'color':'grey'}])\n", "cot": "How to solve:\nStep 1. Use the sorted() function to sort the list of dictionaries.\nStep 2. Pass the list of dictionaries 'models' and a lambda function as arguments to the sorted() function.\nStep 3. Use the lambda function to specify the key for sorting, in this case, sorting based on the value of the \"color\" key in each dictionary.\nStep 4. Return the sorted list of dictionaries."}
{"task_id": "train/15918", "prompt": "def heap_sort(arr):\n    \"\"\"Write a function to sort the given array by using heap sort.\n    \"\"\"\n", "entry_point": "heap_sort", "canonical_solution": "    heapify(arr)\n    end = len(arr) - 1\n    while end > 0:\n        arr[end], arr[0] = arr[0], arr[end]\n        shift_down(arr, 0, end - 1)\n        end -= 1\n    return arr\n\n\ndef heapify(arr):\n    start = len(arr) // 2\n    while start >= 0:\n        shift_down(arr, start, len(arr) - 1)\n        start -= 1\n\n\ndef shift_down(arr, start, end):\n    root = start\n    while root * 2 + 1 <= end:\n        child = root * 2 + 1\n        if child + 1 <= end and arr[child] < arr[child + 1]:\n            child += 1\n        if child <= end and arr[root] < arr[child]:\n            arr[root], arr[child] = arr[child], arr[root]\n            root = child\n        else:\n            return\n", "test": "def check(candidate):\n    assert candidate([12, 2, 4, 5, 2, 3]) == [2, 2, 3, 4, 5, 12]\n    assert candidate([32, 14, 5, 6, 7, 19]) == [5, 6, 7, 14, 19, 32]\n    assert candidate([21, 15, 29, 78, 65]) == [15, 21, 29, 65, 78]\n", "cot": "How to solve:\nStep 1. Define a heap_sort function that sorts the given array using heap sort.\nStep 2. Call the heapify function to build a max heap from the input array.\nStep 3. Initialize the end index as the last index of the array.\nStep 4. Swap the first element (max element) with the end element and then shift down the new root element.\nStep 5. Decrement the end index and repeat the process until the end index is greater than 0.\nStep 6. Define the heapify function to build a max heap from the array.\nStep 7. Define the shift_down function to maintain the heap property while shifting down the root element.\nStep 8. The final sorted array is returned."}
{"task_id": "train/15919", "prompt": "def count_elim(num):\n    \"\"\"Write a function to count the elements in a list until an element is a tuple.\n    \"\"\"\n", "entry_point": "count_elim", "canonical_solution": "    count_elim = 0\n    for n in num:\n        if isinstance(n, tuple):\n            break\n        count_elim += 1\n    return count_elim\n", "test": "def check(candidate):\n    assert candidate([10,20,30,(10,20),40])==3\n    assert candidate([10,(20,30),(10,20),40])==1\n    assert candidate([(10,(20,30,(10,20),40))])==0\n", "cot": "How to solve:\nStep 1. Initialize count_elim as 0.\nStep 2. Iterate through elements in the list.\n    - If the element is a tuple, break the loop.\n    - Increment count_elim by 1 for each non-tuple element.\nStep 3. Return the final count_elim value."}
{"task_id": "train/15920", "prompt": "def check_element(test_tup, check_list):\n    \"\"\"Write a function to check if any list element is present in the given list.\n    \"\"\"\n", "entry_point": "check_element", "canonical_solution": "    res = False\n    for ele in check_list:\n        if ele in test_tup:\n            res = True\n            break\n    return res\n", "test": "def check(candidate):\n    assert candidate((4, 5, 7, 9, 3),  [6, 7, 10, 11]) == True\n    assert candidate((1, 2, 3, 4),  [4, 6, 7, 8, 9]) == True\n    assert candidate((3, 2, 1, 4, 5),  [9, 8, 7, 6]) == False\n", "cot": "How to solve:\nStep 1. Initialize result as False.\nStep 2. Iterate through each element in check_list.\n    - Check if the element is present in test_tup.\n    - If found, set result to True and break the loop.\nStep 3. Return the final result."}
{"task_id": "train/15921", "prompt": "from heapq import merge\n\n\ndef combine_lists(num1, num2):\n    \"\"\"Write a function to combine two given sorted lists using heapq module.\n    \"\"\"\n", "entry_point": "combine_lists", "canonical_solution": "    combine_lists = list(merge(num1, num2))\n    return combine_lists\n", "test": "def check(candidate):\n    assert candidate([1, 3, 5, 7, 9, 11],[0, 2, 4, 6, 8, 10])==[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]\n    assert candidate([1, 3, 5, 6, 8, 9], [2, 5, 7, 11])==[1,2,3,5,5,6,7,8,9,11]\n    assert candidate([1,3,7],[2,4,6])==[1,2,3,4,6,7]\n", "cot": "How to solve:\nStep 1. Import the merge function from the heapq module.\nStep 2. Define a function combine_lists that takes two sorted lists num1 and num2 as input.\nStep 3. Use the merge function to merge the two lists into a single sorted list.\nStep 4. Convert the merged result into a list using the list() function.\nStep 5. Return the combined sorted list."}
{"task_id": "train/15922", "prompt": "import re\n\n\ndef num_position(text):\n    \"\"\"Write a function to separate and print the numbers and their position of a given string.\n    \"\"\"\n", "entry_point": "num_position", "canonical_solution": "    for m in re.finditer(\"\\d+\", text):\n        return m.start()\n", "test": "def check(candidate):\n    assert candidate(\"there are 70 flats in this apartment\")==10\n    assert candidate(\"every adult have 32 teeth\")==17\n    assert candidate(\"isha has 79 chocolates in her bag\")==9\n", "cot": "How to solve:\nStep 1. Import the regular expression module.\nStep 2. Define a function that takes a text input.\nStep 3. Use re.finditer to find all occurrences of digits in the text.\nStep 4. Iterate over the matches found.\nStep 5. Return the start position of the first match found."}
{"task_id": "train/15923", "prompt": "def tuple_to_set(t):\n    \"\"\"Write a function to convert the given tuples into set.\n    \"\"\"\n", "entry_point": "tuple_to_set", "canonical_solution": "    s = set(t)\n    return s\n", "test": "def check(candidate):\n    assert candidate(('x', 'y', 'z') ) == {'y', 'x', 'z'}\n    assert candidate(('a', 'b', 'c') ) == {'c', 'a', 'b'}\n    assert candidate(('z', 'd', 'e') ) == {'d', 'e', 'z'}\n", "cot": "How to solve:\nStep 1. Convert the input tuple 't' into a set using the set() function.\nStep 2. Return the resulting set."}
{"task_id": "train/15924", "prompt": "from collections import Counter\n\n\ndef most_common_elem(s, a):\n    \"\"\"Write a function to find the most common elements and their counts of a specified text.\n    \"\"\"\n", "entry_point": "most_common_elem", "canonical_solution": "    most_common_elem = Counter(s).most_common(a)\n    return most_common_elem\n", "test": "def check(candidate):\n    assert candidate('lkseropewdssafsdfafkpwe',3)==[('s', 4), ('e', 3), ('f', 3)] \n    assert candidate('lkseropewdssafsdfafkpwe',2)==[('s', 4), ('e', 3)]\n    assert candidate('lkseropewdssafsdfafkpwe',7)==[('s', 4), ('e', 3), ('f', 3), ('k', 2), ('p', 2), ('w', 2), ('d', 2)]\n", "cot": "How to solve:\nStep 1. Import the Counter class from the collections module.\nStep 2. Use Counter to count the occurrences of each element in the input text 's'.\nStep 3. Use the most_common method of Counter to get the 'a' most common elements and their counts.\nStep 4. Return the result obtained from the most_common method."}
{"task_id": "train/15925", "prompt": "def len_log(list1):\n    \"\"\"Write a python function to find the length of the shortest word.\n    \"\"\"\n", "entry_point": "len_log", "canonical_solution": "    min = len(list1[0])\n    for i in list1:\n        if len(i) < min:\n            min = len(i)\n    return min\n", "test": "def check(candidate):\n    assert candidate([\"win\",\"lose\",\"great\"]) == 3\n    assert candidate([\"a\",\"ab\",\"abc\"]) == 1\n    assert candidate([\"12\",\"12\",\"1234\"]) == 2\n", "cot": "How to solve:\nStep 1. Initialize min as the length of the first word in the list.\nStep 2. Iterate through each word in the list.\n    - If the length of the current word is less than min, update min to be the length of the current word.\nStep 3. Return the final value of min, which represents the length of the shortest word in the list."}
{"task_id": "train/15926", "prompt": "def get_item(tup1, index):\n    \"\"\"Write a function to get an item of a tuple.\n    \"\"\"\n", "entry_point": "get_item", "canonical_solution": "    item = tup1[index]\n    return item\n", "test": "def check(candidate):\n    assert candidate((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"),3)==('e')\n    assert candidate((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"),-4)==('u')\n    assert candidate((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"),-3)==('r')\n", "cot": "How to solve:\nStep 1. Access the item at the specified index in the tuple.\nStep 2. Return the item."}
{"task_id": "train/15927", "prompt": "def count_digs(tup):\n    \"\"\"Write a function to sort the given tuple list basis the total digits in tuple.\n    \"\"\"\n", "entry_point": "count_digs", "canonical_solution": "    return sum([len(str(ele)) for ele in tup])\n\n\ndef sort_list(test_list):\n    test_list.sort(key=count_digs)\n    return str(test_list)\n", "test": "def check(candidate):\n    assert sort_list([(3, 4, 6, 723), (1, 2), (12345,), (134, 234, 34)] ) == '[(1, 2), (12345,), (3, 4, 6, 723), (134, 234, 34)]'\n    assert sort_list([(3, 4, 8), (1, 2), (1234335,), (1345, 234, 334)] ) == '[(1, 2), (3, 4, 8), (1234335,), (1345, 234, 334)]'\n    assert sort_list([(34, 4, 61, 723), (1, 2), (145,), (134, 23)] ) == '[(1, 2), (145,), (134, 23), (34, 4, 61, 723)]'\n", "cot": "How to solve:\nStep 1. Define a function count_digs(tup) to calculate the total digits in each tuple element.\nStep 2. Within count_digs, convert each element to string, find its length, and sum all lengths.\nStep 3. Define a function sort_list(test_list) to sort the list of tuples based on the total digits in each tuple.\nStep 4. Sort the test_list using the count_digs function as the key for sorting.\nStep 5. Return the sorted list as a string."}
{"task_id": "train/15928", "prompt": "def chinese_zodiac(year):\n    \"\"\"Write a function to display sign of the chinese zodiac for given year.\n    \"\"\"\n", "entry_point": "chinese_zodiac", "canonical_solution": "    if (year - 2000) % 12 == 0:\n        sign = \"Dragon\"\n    elif (year - 2000) % 12 == 1:\n        sign = \"Snake\"\n    elif (year - 2000) % 12 == 2:\n        sign = \"Horse\"\n    elif (year - 2000) % 12 == 3:\n        sign = \"sheep\"\n    elif (year - 2000) % 12 == 4:\n        sign = \"Monkey\"\n    elif (year - 2000) % 12 == 5:\n        sign = \"Rooster\"\n    elif (year - 2000) % 12 == 6:\n        sign = \"Dog\"\n    elif (year - 2000) % 12 == 7:\n        sign = \"Pig\"\n    elif (year - 2000) % 12 == 8:\n        sign = \"Rat\"\n    elif (year - 2000) % 12 == 9:\n        sign = \"Ox\"\n    elif (year - 2000) % 12 == 10:\n        sign = \"Tiger\"\n    else:\n        sign = \"Hare\"\n    return sign\n", "test": "def check(candidate):\n    assert candidate(1997)==('Ox')\n    assert candidate(1998)==('Tiger')\n    assert candidate(1994)==('Dog')\n", "cot": "How to solve:\nStep 1. Calculate the Chinese zodiac sign based on the given year.\nStep 2. Find the remainder of the year minus 2000 divided by 12.\nStep 3. Based on the remainder, assign the corresponding zodiac sign.\nStep 4. Return the zodiac sign."}
{"task_id": "train/15929", "prompt": "def max_similar_indices(test_list1, test_list2):\n    \"\"\"Write a function to find the maximum of similar indices in two lists of tuples.\n    \"\"\"\n", "entry_point": "max_similar_indices", "canonical_solution": "    res = [(max(x[0], y[0]), max(x[1], y[1])) for x, y in zip(test_list1, test_list2)]\n    return res\n", "test": "def check(candidate):\n    assert candidate([(2, 4), (6, 7), (5, 1)],[(5, 4), (8, 10), (8, 14)]) == [(5, 4), (8, 10), (8, 14)]\n    assert candidate([(3, 5), (7, 8), (6, 2)],[(6, 5), (9, 11), (9, 15)]) == [(6, 5), (9, 11), (9, 15)]\n    assert candidate([(4, 6), (8, 9), (7, 3)],[(7, 6), (10, 12), (10, 16)]) == [(7, 6), (10, 12), (10, 16)]\n", "cot": "How to solve:\nStep 1. Iterate through both input lists using zip.\nStep 2. For each pair of tuples, find the maximum value at index 0 and index 1.\nStep 3. Create a new tuple with the maximum values found in step 2.\nStep 4. Store these new tuples in a result list.\nStep 5. Return the result list containing the maximum values of similar indices from the input lists."}
{"task_id": "train/15930", "prompt": "def nCr_mod_p(n, r, p):\n    \"\"\"Write a function to compute the value of ncr mod p.\n    \"\"\"\n", "entry_point": "nCr_mod_p", "canonical_solution": "    if r > n - r:\n        r = n - r\n    C = [0 for i in range(r + 1)]\n    C[0] = 1\n    for i in range(1, n + 1):\n        for j in range(min(i, r), 0, -1):\n            C[j] = (C[j] + C[j - 1]) % p\n    return C[r]\n", "test": "def check(candidate):\n    assert candidate(10, 2, 13) == 6\n    assert candidate(11, 3, 14) == 11\n    assert candidate(18, 14, 19) == 1\n", "cot": "How to solve:\nStep 1. Check if r is greater than n - r, then set r to n - r.\nStep 2. Initialize an array C of size r+1 with all elements as 0, and set C[0] to 1.\nStep 3. Iterate i from 1 to n+1 and iterate j from min(i, r) to 0 in reverse.\nStep 4. Update C[j] as (C[j] + C[j - 1]) % p.\nStep 5. Return C[r] as the result of nCr mod p."}
{"task_id": "train/15931", "prompt": "def subset(ar, n):\n    \"\"\"Write a python function to find the minimun number of subsets with distinct elements.\n    \"\"\"\n", "entry_point": "subset", "canonical_solution": "    res = 0\n    ar.sort()\n    for i in range(0, n):\n        count = 1\n        for i in range(n - 1):\n            if ar[i] == ar[i + 1]:\n                count += 1\n            else:\n                break\n        res = max(res, count)\n    return res\n", "test": "def check(candidate):\n    assert candidate([1, 2, 3, 4],4) == 1\n    assert candidate([5, 6, 9, 3, 4, 3, 4],7) == 2\n    assert candidate([1, 2, 3 ],3) == 1\n", "cot": "How to solve:\nStep 1. Initialize a variable res to 0.\nStep 2. Sort the input array ar.\nStep 3. Iterate through the array ar.\n    - Initialize count to 1.\n    - Check if the current element is the same as the next element.\n    - If they are the same, increment count.\n    - If they are different, update res to the maximum of res and count.\nStep 4. Return the final value of res as the minimum number of subsets with distinct elements."}
{"task_id": "train/15932", "prompt": "def profit_amount(actual_cost, sale_amount):\n    \"\"\"Write a function that gives profit amount if the given amount has profit else return none.\n    \"\"\"\n", "entry_point": "profit_amount", "canonical_solution": "    if actual_cost > sale_amount:\n        amount = actual_cost - sale_amount\n        return amount\n    else:\n        return None\n", "test": "def check(candidate):\n    assert candidate(1500,1200)==300\n    assert candidate(100,200)==None\n    assert candidate(2000,5000)==None\n", "cot": "How to solve:\nStep 1. Compare actual_cost and sale_amount.\nStep 2. If actual_cost is greater than sale_amount:\n    - Calculate the profit amount as actual_cost - sale_amount.\n    - Return the profit amount.\nStep 3. If actual_cost is not greater than sale_amount:\n    - Return None."}
{"task_id": "train/15933", "prompt": "def is_abundant(n):\n    \"\"\"Write a function to find out, if the given number is abundant.\n    \"\"\"\n", "entry_point": "is_abundant", "canonical_solution": "    fctrsum = sum([fctr for fctr in range(1, n) if n % fctr == 0])\n    return fctrsum > n\n", "test": "def check(candidate):\n    assert candidate(12)==True\n    assert candidate(13)==False\n    assert candidate(9)==False\n", "cot": "How to solve:\nStep 1. Calculate the sum of factors of the given number 'n' excluding 'n' itself.\nStep 2. Return True if the sum of factors is greater than 'n', else return False."}
{"task_id": "train/15934", "prompt": "import re\n\n\ndef split_list(text):\n    \"\"\"Write a function to split the given string at uppercase letters by using regex.\n    \"\"\"\n", "entry_point": "split_list", "canonical_solution": "    return re.findall(\"[A-Z][^A-Z]*\", text)\n", "test": "def check(candidate):\n    assert candidate(\"LearnToBuildAnythingWithGoogle\") == ['Learn', 'To', 'Build', 'Anything', 'With', 'Google']\n    assert candidate(\"ApmlifyingTheBlack+DeveloperCommunity\") == ['Apmlifying', 'The', 'Black+', 'Developer', 'Community']\n    assert candidate(\"UpdateInTheGoEcoSystem\") == ['Update', 'In', 'The', 'Go', 'Eco', 'System']\n", "cot": "How to solve:\nStep 1. Import the 're' module for regular expressions.\nStep 2. Define a function named 'split_list' that takes a text input.\nStep 3. Use the re.findall method with the regex pattern \"[A-Z][^A-Z]*\" to split the text at uppercase letters.\nStep 4. Return the result of the re.findall operation.\nStep 5. The function will split the text at uppercase letters and return a list of substrings."}
{"task_id": "train/15935", "prompt": "import math\n\n\ndef get_First_Set_Bit_Pos(n):\n    \"\"\"Write a python function to get the position of rightmost set bit.\n    \"\"\"\n", "entry_point": "get_First_Set_Bit_Pos", "canonical_solution": "    return math.log2(n & -n) + 1\n", "test": "def check(candidate):\n    assert candidate(12) == 3\n    assert candidate(18) == 2\n    assert candidate(16) == 5\n", "cot": "How to solve:\nStep 1. Use bitwise AND operation between n and its two's complement (-n) to get the rightmost set bit.\nStep 2. Use math.log2 to find the position of the rightmost set bit.\nStep 3. Add 1 to the result to get the position starting from 1.\nStep 4. Return the position of the rightmost set bit."}
{"task_id": "train/15936", "prompt": "def int_to_roman(num):\n    \"\"\"Write a function to convert an integer into a roman numeral.\n    \"\"\"\n", "entry_point": "int_to_roman", "canonical_solution": "    val = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1]\n    syb = [\"M\", \"CM\", \"D\", \"CD\", \"C\", \"XC\", \"L\", \"XL\", \"X\", \"IX\", \"V\", \"IV\", \"I\"]\n    roman_num = \"\"\n    i = 0\n    while num > 0:\n        for _ in range(num // val[i]):\n            roman_num += syb[i]\n            num -= val[i]\n        i += 1\n    return roman_num\n", "test": "def check(candidate):\n    assert candidate(1)==(\"I\")\n    assert candidate(50)==(\"L\")\n    assert candidate(4)==(\"IV\")\n", "cot": "How to solve:\nStep 1. Create two lists: val with corresponding integer values and syb with corresponding Roman numeral symbols.\nStep 2. Initialize an empty string roman_num to store the Roman numeral.\nStep 3. Initialize i to 0.\nStep 4. While num is greater than 0, do the following:\n    - Iterate through val list:\n        - Repeat num // val[i] times:\n            - Append the corresponding symbol syb[i] to roman_num.\n            - Subtract val[i] from num.\n        - Move to the next element in val.\nStep 5. Return the constructed roman_num."}
{"task_id": "train/15937", "prompt": "def Average(lst):\n    \"\"\"Write a python function to find the average of a list.\n    \"\"\"\n", "entry_point": "Average", "canonical_solution": "    return sum(lst) / len(lst)\n", "test": "def check(candidate):\n    assert candidate([15, 9, 55, 41, 35, 20, 62, 49]) == 35.75\n    assert candidate([4, 5, 1, 2, 9, 7, 10, 8]) == 5.75\n    assert candidate([1,2,3]) == 2\n", "cot": "How to solve:\nStep 1. Calculate the sum of all elements in the list using the sum() function.\nStep 2. Calculate the average by dividing the sum by the length of the list using the len() function.\nStep 3. Return the calculated average."}
{"task_id": "train/15938", "prompt": "def get_noOfways(n):\n    \"\"\"Write a function to solve tiling problem.\n    \"\"\"\n", "entry_point": "get_noOfways", "canonical_solution": "    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    return get_noOfways(n - 1) + get_noOfways(n - 2)\n", "test": "def check(candidate):\n    assert candidate(4)==3\n    assert candidate(3)==2\n    assert candidate(5)==5\n", "cot": "How to solve:\nStep 1. Define a recursive function to solve the tiling problem.\nStep 2. Base cases: If n is 0, return 0. If n is 1, return 1.\nStep 3. Recursively call the function with n-1 and n-2, and return the sum of the results.\nStep 4. The function will keep calling itself until it reaches the base cases and then return the sum of the previous two results."}
{"task_id": "train/15939", "prompt": "def roman_to_int(s):\n    \"\"\"Write a function to convert a roman numeral to an integer.\n    \"\"\"\n", "entry_point": "roman_to_int", "canonical_solution": "    rom_val = {\"I\": 1, \"V\": 5, \"X\": 10, \"L\": 50, \"C\": 100, \"D\": 500, \"M\": 1000}\n    int_val = 0\n    for i in range(len(s)):\n        if i > 0 and rom_val[s[i]] > rom_val[s[i - 1]]:\n            int_val += rom_val[s[i]] - 2 * rom_val[s[i - 1]]\n        else:\n            int_val += rom_val[s[i]]\n    return int_val\n", "test": "def check(candidate):\n    assert candidate('MMMCMLXXXVI')==3986\n    assert candidate('MMMM')==4000\n    assert candidate('C')==100\n", "cot": "How to solve:\nStep 1. Create a dictionary mapping Roman numerals to integers.\nStep 2. Initialize an integer variable to store the result.\nStep 3. Iterate through the input Roman numeral string.\nStep 4. If the current numeral is greater than the previous one, subtract twice the value of the previous numeral from the current numeral and add it to the result.\nStep 5. Otherwise, add the value of the current numeral to the result.\nStep 6. Return the final integer value obtained after processing all Roman numerals."}
{"task_id": "train/15940", "prompt": "def sum_Natural(n):\n    \"\"\"Write a python function to find the sum of all even natural numbers within the range l and r.\n    \"\"\"\n", "entry_point": "sum_Natural", "canonical_solution": "    sum = n * (n + 1)\n    return int(sum)\n\n\ndef sum_Even(l, r):\n    return sum_Natural(int(r / 2)) - sum_Natural(int((l - 1) / 2))\n", "test": "def check(candidate):\n    assert sum_Even(2,5) == 6\n    assert sum_Even(3,8) == 18\n    assert sum_Even(4,6) == 10\n", "cot": "How to solve:\nStep 1. Define a function sum_Natural(n) to calculate the sum of all even natural numbers up to n.\nStep 2. Calculate the sum of even numbers up to n using the formula n * (n + 1).\nStep 3. Define a function sum_Even(l, r) to find the sum of even natural numbers within the range l and r.\nStep 4. Calculate the sum of even numbers up to r/2 using sum_Natural(int(r / 2)).\nStep 5. Calculate the sum of even numbers up to (l-1)/2 using sum_Natural(int((l - 1) / 2)).\nStep 6. Return the difference between the sums calculated in step 4 and step 5."}
{"task_id": "train/15941", "prompt": "def discriminant_value(x, y, z):\n    \"\"\"Write a function to calculate the discriminant value.\n    \"\"\"\n", "entry_point": "discriminant_value", "canonical_solution": "    discriminant = (y ** 2) - (4 * x * z)\n    if discriminant > 0:\n        return (\"Two solutions\", discriminant)\n    elif discriminant == 0:\n        return (\"one solution\", discriminant)\n    elif discriminant < 0:\n        return (\"no real solution\", discriminant)\n", "test": "def check(candidate):\n    assert candidate(4,8,2)==(\"Two solutions\",32)\n    assert candidate(5,7,9)==(\"no real solution\",-131)\n    assert candidate(0,0,9)==(\"one solution\",0)\n", "cot": "How to solve:\nStep 1. Calculate the discriminant value using the formula: discriminant = (y ** 2) - (4 * x * z).\nStep 2. Check the value of the discriminant:\n    - If discriminant > 0, return (\"Two solutions\", discriminant).\n    - If discriminant == 0, return (\"One solution\", discriminant).\n    - If discriminant < 0, return (\"No real solution\", discriminant)."}
{"task_id": "train/15942", "prompt": "def word_len(s):\n    \"\"\"Write a python function to check whether the length of the word is even or not.\n    \"\"\"\n", "entry_point": "word_len", "canonical_solution": "    s = s.split(\" \")\n    for word in s:\n        if len(word) % 2 == 0:\n            return True\n        else:\n            return False\n", "test": "def check(candidate):\n    assert candidate(\"program\") == False\n    assert candidate(\"solution\") == True\n    assert candidate(\"data\") == True\n", "cot": "How to solve:\nStep 1. Split the input string 's' into words.\nStep 2. Iterate through each word.\n    - Check if the length of the word is even.\n    - If it is even, return True.\n    - If it is odd, return False.\nNote: The current implementation returns after checking the first word, which may not be the intended behavior."}
{"task_id": "train/15943", "prompt": "import re\n\n\ndef camel_to_snake(text):\n    \"\"\"Write a function to convert camel case string to snake case string.\n    \"\"\"\n", "entry_point": "camel_to_snake", "canonical_solution": "\n    str1 = re.sub(\"(.)([A-Z][a-z]+)\", r\"\\1_\\2\", text)\n    return re.sub(\"([a-z0-9])([A-Z])\", r\"\\1_\\2\", str1).lower()\n", "test": "def check(candidate):\n    assert candidate('PythonProgram')==('python_program')\n    assert candidate('pythonLanguage')==('python_language')\n    assert candidate('ProgrammingLanguage')==('programming_language')\n", "cot": "How to solve:\nStep 1. Import the regular expression module.\nStep 2. Define a function camel_to_snake that takes a camel case string as input.\nStep 3. Use re.sub to replace occurrences of a lowercase letter followed by an uppercase letter with the lowercase letter, an underscore, and the uppercase letter.\nStep 4. Use re.sub again to replace occurrences of a lowercase letter or digit followed by an uppercase letter with the lowercase letter/digit, an underscore, and the uppercase letter.\nStep 5. Convert the result to lowercase.\nStep 6. Return the snake case string."}
{"task_id": "train/15944", "prompt": "def remove_empty(tuple1):    \"\"\"Write a function to remove an empty tuple from a list of tuples.\n    \"\"\"\n", "entry_point": "remove_empty", "canonical_solution": "    tuple1 = [t for t in tuple1 if t]\n    return tuple1\n", "test": "def check(candidate):\n    assert candidate([(), (), ('',), ('a', 'b'), ('a', 'b', 'c'), ('d')])==[('',), ('a', 'b'), ('a', 'b', 'c'), 'd']  \n    assert candidate([(), (), ('',), (\"python\"), (\"program\")])==[('',), (\"python\"), (\"program\")]  \n    assert candidate([(), (), ('',), (\"java\")])==[('',),(\"java\") ]  \n", "cot": "How to solve:\nStep 1. Iterate through each tuple in the list.\nStep 2. Check if the tuple is not empty.\nStep 3. If the tuple is not empty, keep it in the list.\nStep 4. Return the list with non-empty tuples."}
{"task_id": "train/15945", "prompt": "def check_s(string):\n    \"\"\"Write a python function to accept the strings which contains all vowels.\n    \"\"\"\n", "entry_point": "check_s", "canonical_solution": "    if len(set(string).intersection(\"AEIOUaeiou\")) >= 5:\n        return \"accepted\"\n    else:\n        return \"not accepted\"\n", "test": "def check(candidate):\n    assert candidate(\"SEEquoiaL\") == 'accepted'\n    assert candidate('program') == \"not accepted\"\n    assert candidate('fine') == \"not accepted\"\n", "cot": "How to solve:\nStep 1. Define a function check_s that takes a string as input.\nStep 2. Create a set of vowels \"AEIOUaeiou\".\nStep 3. Find the intersection of the set of vowels and the input string.\nStep 4. Check if the length of the intersection is greater than or equal to 5.\nStep 5. If the condition is met, return \"accepted\", otherwise return \"not accepted\"."}
{"task_id": "train/15946", "prompt": "def floor_Max(A, B, N):\n    \"\"\"Write a python function to find maximum possible value for the given periodic function.\n    \"\"\"\n", "entry_point": "floor_Max", "canonical_solution": "    x = min(B - 1, N)\n    return (A * x) // B\n", "test": "def check(candidate):\n    assert candidate(11,10,9) == 9\n    assert candidate(5,7,4) == 2\n    assert candidate(2,2,1) == 1\n", "cot": "How to solve:\nStep 1. Calculate x as the minimum of (B - 1) and N.\nStep 2. Calculate the maximum possible value using the formula (A * x) // B.\nStep 3. Return the calculated value as the result."}
{"task_id": "train/15947", "prompt": "def join_tuples(test_list):\n    \"\"\"Write a function to join the tuples if they have similar initial elements.\n    \"\"\"\n", "entry_point": "join_tuples", "canonical_solution": "    res = []\n    for sub in test_list:\n        if res and res[-1][0] == sub[0]:\n            res[-1].extend(sub[1:])\n        else:\n            res.append([ele for ele in sub])\n    res = list(map(tuple, res))\n    return res\n", "test": "def check(candidate):\n    assert candidate([(5, 6), (5, 7), (6, 8), (6, 10), (7, 13)] ) == [(5, 6, 7), (6, 8, 10), (7, 13)]\n    assert candidate([(6, 7), (6, 8), (7, 9), (7, 11), (8, 14)] ) == [(6, 7, 8), (7, 9, 11), (8, 14)]\n    assert candidate([(7, 8), (7, 9), (8, 10), (8, 12), (9, 15)] ) == [(7, 8, 9), (8, 10, 12), (9, 15)]\n", "cot": "How to solve:\nStep 1. Initialize an empty list 'res'.\nStep 2. Iterate through each tuple in 'test_list'.\nStep 3. Check if 'res' is not empty and the first element of the last tuple in 'res' is equal to the first element of the current tuple.\nStep 4. If the condition is met, extend the last tuple in 'res' with the elements of the current tuple excluding the first element.\nStep 5. If the condition is not met, append a new list containing all elements of the current tuple to 'res'.\nStep 6. Convert the lists in 'res' to tuples.\nStep 7. Return the final 'res'."}
{"task_id": "train/15948", "prompt": "def min_of_two(x, y):\n    \"\"\"Write a function to find minimum of two numbers.\n    \"\"\"\n", "entry_point": "min_of_two", "canonical_solution": "    if x < y:\n        return x\n    return y\n", "test": "def check(candidate):\n    assert candidate(10,20)==10\n    assert candidate(19,15)==15\n    assert candidate(-10,-20)==-20\n", "cot": "How to solve:\nStep 1. Define a function min_of_two that takes two parameters x and y.\nStep 2. Check if x is less than y.\n    - If true, return x as the minimum.\n    - If false, return y as the minimum.\nStep 3. Function ends."}
{"task_id": "train/15949", "prompt": "def maximum_segments(n, a, b, c):\n    \"\"\"Write a function to find the maximum number of segments of lengths a, b and c that can be formed from n.\n    \"\"\"\n", "entry_point": "maximum_segments", "canonical_solution": "    dp = [-1] * (n + 10)\n    dp[0] = 0\n    for i in range(0, n):\n        if dp[i] != -1:\n            if i + a <= n:\n                dp[i + a] = max(dp[i] + 1, dp[i + a])\n            if i + b <= n:\n                dp[i + b] = max(dp[i] + 1, dp[i + b])\n            if i + c <= n:\n                dp[i + c] = max(dp[i] + 1, dp[i + c])\n    return dp[n]\n", "test": "def check(candidate):\n    assert candidate(7, 5, 2, 5) == 2\n    assert candidate(17, 2, 1, 3) == 17\n    assert candidate(18, 16, 3, 6) == 6\n", "cot": "How to solve:\nStep 1. Initialize an array dp with -1 values of size n+10 and set dp[0] to 0.\nStep 2. Iterate from 0 to n.\nStep 3. If dp[i] is not -1:\n    - Update dp[i+a], dp[i+b], dp[i+c] to the maximum of (dp[i] + 1) and the current value.\nStep 4. Return dp[n] which holds the maximum number of segments that can be formed from n with lengths a, b, and c."}
{"task_id": "train/15950", "prompt": "def concatenate_nested(test_tup1, test_tup2):\n    \"\"\"Write a function to concatenate the given two tuples to a nested tuple.\n    \"\"\"\n", "entry_point": "concatenate_nested", "canonical_solution": "    res = test_tup1 + test_tup2\n    return res\n", "test": "def check(candidate):\n    assert candidate((3, 4), (5, 6)) == (3, 4, 5, 6)\n    assert candidate((1, 2), (3, 4)) == (1, 2, 3, 4)\n    assert candidate((4, 5), (6, 8)) == (4, 5, 6, 8)\n", "cot": "How to solve:\nStep 1. Concatenate the two input tuples test_tup1 and test_tup2.\nStep 2. Return the concatenated tuple as the result."}
{"task_id": "train/15951", "prompt": "def left_rotate(s, d):\n    \"\"\"Write a python function to left rotate the string.\n    \"\"\"\n", "entry_point": "left_rotate", "canonical_solution": "    tmp = s[d:] + s[0:d]\n    return tmp\n", "test": "def check(candidate):\n    assert candidate(\"python\",2) == \"thonpy\"   \n    assert candidate(\"bigdata\",3 ) == \"databig\" \n    assert candidate(\"hadoop\",1 ) == \"adooph\" \n", "cot": "How to solve:\nStep 1. Create a temporary variable 'tmp'.\nStep 2. Assign the rotated string to 'tmp' by concatenating the substring from index 'd' to the end of the string with the substring from the beginning of the string to index 'd'.\nStep 3. Return the rotated string 'tmp'."}
{"task_id": "train/15952", "prompt": "def min_sum_path(A):\n    \"\"\"Write a function to find the minimum total path sum in the given triangle.\n    \"\"\"\n", "entry_point": "min_sum_path", "canonical_solution": "    memo = [None] * len(A)\n    n = len(A) - 1\n    for i in range(len(A[n])):\n        memo[i] = A[n][i]\n    for i in range(len(A) - 2, -1, -1):\n        for j in range(len(A[i])):\n            memo[j] = A[i][j] + min(memo[j], memo[j + 1])\n    return memo[0]\n", "test": "def check(candidate):\n    assert candidate([[ 2 ], [3, 9 ], [1, 6, 7 ]]) == 6\n    assert candidate([[ 2 ], [3, 7 ], [8, 5, 6 ]]) == 10 \n    assert candidate([[ 3 ], [6, 4 ], [5, 2, 7 ]]) == 9\n", "cot": "How to solve:\nStep 1. Create a memo list of the same length as the input triangle.\nStep 2. Initialize the memo list with the values of the last row of the triangle.\nStep 3. Iterate from the second last row of the triangle up to the first row.\nStep 4. For each element in the current row, update the memo list with the minimum sum path from that element to the bottom.\nStep 5. Return the first element of the memo list which will contain the minimum total path sum from top to bottom."}
{"task_id": "train/15953", "prompt": "import yaml\n\n\ndef serialize_to_yaml(obj, file_path):\n    \"\"\"\n    Serialize a Python object into a YAML file.\n    Args:\n        obj: The Python object to be serialized.\n        file_path: The path of the YAML file to be created.\n    Raises:\n        FileNotFoundError: If the directory of `file_path` does not exist.\n    Returns:\n        None\n    \"\"\"\n", "entry_point": "serialize_to_yaml", "canonical_solution": "    try:\n        with open(file_path, \"w\") as file:\n            yaml.dump(obj, file)\n    except FileNotFoundError:\n        raise\n", "test": "def check(candidate):\n    assert candidate([1, 2, 3], \"test.yaml\") == None\n    assert candidate({\"name\": \"Alice\", \"age\": 30}, \"data.yaml\") == None\n    assert candidate((1, 2, 3), \"output.yaml\") == None", "cot": "How to solve:\nStep 1. Import the yaml module.\nStep 2. Define a function serialize_to_yaml that takes a Python object and a file path as input.\nStep 3. Use a try-except block to handle the FileNotFoundError.\nStep 4. Open the file at the given file_path in write mode.\nStep 5. Use yaml.dump to serialize the Python object into the file.\nStep 6. If the directory of file_path does not exist, raise FileNotFoundError."}
{"task_id": "train/15954", "prompt": "def find_first_non_repeating_vowel(s):\n    \"\"\"\n    Submit an algorithm to find the first non-repeating vowel character in the given string.\n    The string will only contain lowercase letters.\n    \"\"\"\n", "entry_point": "find_first_non_repeating_vowel", "canonical_solution": "    vowel_count = {}\n    vowels = []\n    for ch in s:\n        if ch in [\"a\", \"e\", \"i\", \"o\", \"u\"]:\n            if ch not in vowel_count:\n                vowel_count[ch] = 1\n            else:\n                vowel_count[ch] += 1\n            if ch not in vowels:\n                vowels.append(ch)\n    for v in vowels:\n        if vowel_count[v] == 1:\n            return v\n    return None\n", "test": "def check(candidate):\n    assert candidate(\"hello\") == \"e\"\n    assert candidate(\"programming\") == \"o\"\n    assert candidate(\"algorithm\") == \"a\"", "cot": "How to solve:\nStep 1. Create an empty dictionary vowel_count and an empty list vowels.\nStep 2. Iterate through each character in the input string.\n    - If the character is a vowel, update the vowel_count and add it to the vowels list if not already present.\nStep 3. Iterate through the vowels list.\n    - If the count of the vowel in vowel_count is 1, return the vowel.\nStep 4. If no non-repeating vowel is found, return None."}
{"task_id": "train/15955", "prompt": "def minnum(a, b, c):\n    \"\"\"\n    Create a function that takes three positive integers and returns the smallest number.\n    \"\"\"\n", "entry_point": "minnum", "canonical_solution": "    min_num = [a, b, c]\n    return min(min_num)\n", "test": "def check(candidate):\n    assert candidate(5, 3, 7) == 3\n    assert candidate(10, 10, 10) == 10\n    assert candidate(1, 2, 1) == 1", "cot": "How to solve:\nStep 1. Define a function minnum that takes three positive integers a, b, and c as input.\nStep 2. Create a list min_num containing the three integers a, b, and c.\nStep 3. Return the minimum value from the list min_num using the min() function."}
{"task_id": "train/15956", "prompt": "def calculate_params_values(num_iterations):\n    \"\"\"\n    You are working on a project that involves training a generative adversarial network (GAN) using TensorFlow.\n    The code snippet provided is a part of the training loop for the GAN.\n    The variables `cb_params_dis.cur_step_num`, `cb_params_genc.batch_num`, `cb_params_gdec.batch_num`, and `cb_params_dis.batch_num` are being updated within a loop, and then the `step_end` method of checkpoint callbacks `ckpt_cb_genc`, `ckpt_cb_gdec`, and `ckpt_cb_dis` is called.\n    Additionally, the variable `it` is being incremented at the end of each iteration.\n    \"\"\"\n", "entry_point": "calculate_params_values", "canonical_solution": "\n    cb_params_dis_cur_step_num = 0\n    cb_params_genc_batch_num = 0\n    cb_params_gdec_batch_num = 0\n    cb_params_dis_batch_num = 0\n    it = 0\n    while it < num_iterations:\n        cb_params_dis_cur_step_num = it + 1\n        cb_params_genc_batch_num = it + 2\n        cb_params_gdec_batch_num = it + 2\n        cb_params_dis_batch_num = it + 2\n        it += 1\n    return (\n        cb_params_dis_cur_step_num,\n        cb_params_genc_batch_num,\n        cb_params_gdec_batch_num,\n        cb_params_dis_batch_num,\n    )\n", "test": "def check(candidate):\n    assert candidate(5) == (5, 6, 6, 6)\n    assert candidate(0) == (0, 0, 0, 0)\n    assert candidate(10) == (10, 11, 11, 11)\n", "cot": "How to solve:\nStep 1. Initialize variables `cb_params_dis_cur_step_num`, `cb_params_genc_batch_num`, `cb_params_gdec_batch_num`, `cb_params_dis_batch_num`, and `it` as 0.\nStep 2. While `it` is less than `num_iterations`, update `cb_params_dis_cur_step_num`, `cb_params_genc_batch_num`, `cb_params_gdec_batch_num`, and `cb_params_dis_batch_num` by incrementing `it` by 1, 2, 2, and 2 respectively.\nStep 3. Return the updated values of `cb_params_dis_cur_step_num`, `cb_params_genc_batch_num`, `cb_params_gdec_batch_num`, and `cb_params_dis_batch_num`."}
{"task_id": "train/15957", "prompt": "def count_unique_topics(classifiers):\n    \"\"\"\n    You are tasked with creating a Python function that processes a list of classifiers and returns a dictionary containing the count of unique topics present in the classifiers list.\n    Each classifier is a string representing a topic in the format `'Topic :: <specific topic>'`.\n    The function should ignore the prefix `'Topic :: '` and consider only the specific topic for counting uniqueness.\n    \"\"\"\n", "entry_point": "count_unique_topics", "canonical_solution": "\n    unique_topics = {}\n    for classifier in classifiers:\n        topic = classifier.split(\"::\")[-1].strip()\n        unique_topics[topic] = unique_topics.get(topic, 0) + 1\n    return unique_topics\n", "test": "def check(candidate):\n    assert candidate(['Topic :: Mathematics', 'Topic :: Science', 'Topic :: Mathematics']) == {'Mathematics': 2, 'Science': 1}\n    assert candidate(['Topic :: Python', 'Topic :: Python', 'Topic :: Java']) == {'Python': 2, 'Java': 1}\n    assert candidate(['Topic :: Machine Learning', 'Topic :: Deep Learning', 'Topic :: AI']) == {'Machine Learning': 1, 'Deep Learning': 1, 'AI': 1}\n", "cot": "How to solve:\nStep 1. Create an empty dictionary unique_topics to store the count of unique topics.\nStep 2. Iterate through the classifiers list.\n    - Split each classifier string using \"::\" as delimiter and get the specific topic.\n    - Strip any leading or trailing whitespaces from the specific topic.\n    - Update the count of the specific topic in the unique_topics dictionary.\nStep 3. Return the unique_topics dictionary containing the count of unique topics."}
{"task_id": "train/15958", "prompt": "import numpy as np\n\n\ndef compute_absolute_difference(arr1, arr2):\n    \"\"\"\n    Compute the element-wise absolute difference between two NumPy arrays.\n    Parameters:\n    arr1 (ndarray): First input array.\n    arr2 (ndarray): Second input array.\n    Returns:\n    ndarray: Element-wise absolute difference between the two input arrays.\n    Raises:\n    ValueError: If the input arrays have different shapes.\n    Examples:\n    >>> arr1 = np.array([1, 2, 3])\n    >>> arr2 = np.array([4, 5, 6])\n    >>> compute_absolute_difference(arr1, arr2)\n    array([3, 3, 3])\n    >>> arr3 = np.array([1, 2, 3])\n    >>> arr4 = np.array([1, 2, 3])\n    >>> compute_absolute_difference(arr3, arr4)\n    array([0, 0, 0])\n    \"\"\"\n", "entry_point": "compute_absolute_difference", "canonical_solution": "    if arr1.shape != arr2.shape:\n        raise ValueError(\"Input arrays must have the same shape.\")\n\n    return np.abs(arr1 - arr2)\n", "test": "def check(candidate):\n    assert candidate(np.array([1, 2, 3]), np.array([4, 5, 6])).tolist() == [3, 3, 3]\n    assert candidate(np.array([1, 2, 3]), np.array([1, 2, 3])).tolist() == [0, 0, 0]\n    assert candidate(np.array([5, 10, 15]), np.array([2, 5, 8])).tolist() == [3, 5, 7]\n", "cot": "How to solve:\nStep 1. Define a function compute_absolute_difference that takes two NumPy arrays arr1 and arr2 as input.\nStep 2. Check if the shapes of arr1 and arr2 are equal. If not, raise a ValueError.\nStep 3. Return the element-wise absolute difference between arr1 and arr2 using np.abs(arr1 - arr2)."}
{"task_id": "train/15959", "prompt": "import heapq\nfrom collections import Counter\n\n\ndef kth_largest_freq(arr, k):\n    \"\"\"\n    Given the subsequent numerical sequence, devise a code structure aimed at identifying the kth largest integer, and the frequency of this integer in the array.\n    Additionally, the code should handle negative integers and zeros.\n\n    \"\"\"\n", "entry_point": "kth_largest_freq", "canonical_solution": "\n    count = Counter(arr)\n    heapq.heapify(arr)\n    kth_largest = heapq.nlargest(k, set(arr))[-1]\n    frequency = count[kth_largest]\n\n    return kth_largest, frequency\n", "test": "def check(candidate):\n    assert candidate([1, 2, 3, 4, 5], 2) == (4, 1)\n    assert candidate([5, 5, 5, 4, 4, 3, 3, 2, 2, 1, 1], 3) == (3, 2)\n    assert candidate([0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 1) == (0, 10)\n", "cot": "How to solve:\nStep 1. Use Counter to count the frequency of each element in the array.\nStep 2. Heapify the array using heapq.heapify to create a min-heap.\nStep 3. Use heapq.nlargest to find the kth largest element in the set of unique elements in the array.\nStep 4. Get the frequency of the kth largest element from the Counter.\nStep 5. Return the kth largest element and its frequency."}
{"task_id": "train/15960", "prompt": "from typing import Tuple\n\n\ndef parse_module_docstring(docstring: str) -> Tuple[str, str]:\n    \"\"\"\n    You are tasked with creating a Python function that parses a given module docstring and extracts the platform and synopsis information.\n    The module docstring is formatted in reStructuredText and contains metadata about the module.\n    \"\"\"\n", "entry_point": "parse_module_docstring", "canonical_solution": "\n    platform_start = docstring.find(\":platform:\")\n    platform_end = docstring.find(\":synopsis:\")\n    platform = docstring[platform_start + 10 : platform_end].strip()\n    synopsis_start = docstring.find(\":synopsis:\")\n    synopsis = docstring[synopsis_start + 10 :].strip()\n    return platform, synopsis\n", "test": "def check(candidate):\n    assert candidate(\n        \"\"\"\n        :platform: Windows\n        :synopsis: This module provides functions for file handling.\n        \"\"\"\n    ) == (\"Windows\", \"This module provides functions for file handling.\")\n\n    assert candidate(\n        \"\"\"\n        :platform: Linux\n        :synopsis: This module contains utility functions for data processing.\n        \"\"\"\n    ) == (\"Linux\", \"This module contains utility functions for data processing.\")\n\n    assert candidate(\n        \"\"\"\n        :platform: MacOS\n        :synopsis: This module implements algorithms for sorting and searching.\n        \"\"\"\n    ) == (\"MacOS\", \"This module implements algorithms for sorting and searching.\")\n", "cot": "How to solve:\nStep 1. Find the index of \":platform:\" and \":synopsis:\" in the docstring.\nStep 2. Extract the platform information between \":platform:\" and \":synopsis:\".\nStep 3. Extract the synopsis information after \":synopsis:\".\nStep 4. Return the extracted platform and synopsis information as a tuple."}
{"task_id": "train/15961", "prompt": "import unittest\n\n\ndef modify_set(elements):\n    \"\"\"\n    You are tasked with implementing a Python function that performs a specific operation on a given set of elements.\n    The function should take a list of elements as input and return a modified set based on the input elements.\n    Additionally, you need to write unit tests for this function using the `unittest` framework to ensure its correctness.\n    \"\"\"\n", "entry_point": "modify_set", "canonical_solution": "\n    modified_set = set(elements)\n    modified_set = sorted(modified_set)\n    return modified_set\n", "test": "def check(candidate):\n    assert candidate([3, 2, 1]) == [1, 2, 3]\n    assert candidate([5, 5, 5, 5]) == [5]\n    assert candidate([10, 5, 8, 3, 1]) == [1, 3, 5, 8, 10]\n", "cot": "How to solve:\nStep 1. Convert the input list of elements into a set to remove duplicates.\nStep 2. Sort the modified set.\nStep 3. Return the modified set.\nStep 4. Write unit tests for the function using the `unittest` framework to ensure its correctness. This involves creating test cases that cover different scenarios and asserting the expected outcomes. Use methods like `assertEqual` to compare the actual and expected results."}
{"task_id": "train/15962", "prompt": "def is_valid_identifier(string):\n    \"\"\"\n    Checks if a given string is a valid identifier.\n    Parameters:\n    string (str): The string to be checked.\n    Returns:\n    bool: True if the string is a valid identifier, False otherwise.\n    \"\"\"\n", "entry_point": "is_valid_identifier", "canonical_solution": "    if len(string) == 0 or string[0].isdigit():\n        return False\n    for char in string:\n        if not (char.isalnum() or char == \"_\"):\n            return False\n    return True\n", "test": "def check(candidate):\n    assert candidate(\"variable123\") == True\n    assert candidate(\"123variable\") == False\n    assert candidate(\"_variable\") == True", "cot": "How to solve:\nStep 1. Check if the string is empty or starts with a digit, return False.\nStep 2. Iterate through each character in the string.\n    - If any character is not alphanumeric or underscore, return False.\nStep 3. If all characters pass the checks, return True."}
{"task_id": "train/15963", "prompt": "def check_string_alphabet(string):\n    \"\"\"\n    Create a program that checks whether a given string contains only alphabets.\n    \"\"\"\n", "entry_point": "check_string_alphabet", "canonical_solution": "    for character in string:\n        if character.isalpha() == False:\n            return False\n    return True\n", "test": "def check(candidate):\n    assert candidate(\"hello\") == True\n    assert candidate(\"123\") == False\n    assert candidate(\"abc123\") == False", "cot": "How to solve:\nStep 1. Iterate through each character in the string.\nStep 2. Check if the character is not an alphabet using the isalpha() method.\n    - If not an alphabet, return False.\nStep 3. If all characters are alphabets, return True."}
{"task_id": "train/15964", "prompt": "def gcd_steps(a, b):\n    \"\"\"\n    Write a recursive function to compute the Greatest Common Divisor of two positive integers, without using any built-in GCD functions provided by your programming language.\n    Also, your function should return the steps taken to reach the GCD, represented as a list of tuples where each tuple represents an iteration of the GCD calculation: the first element of the tuple is the dividend, the second one is the divisor and the third one is the remainder.\n\n    \"\"\"\n", "entry_point": "gcd_steps", "canonical_solution": "\n    if b == 0:\n        return []\n    else:\n        q, r = divmod(a, b)\n        return [(a, b, r)] + gcd_steps(b, r)\n", "test": "def check(candidate):\n    assert candidate(12, 8) == [(12, 8, 4), (8, 4, 0)]\n    assert candidate(35, 21) == [(35, 21, 14), (21, 14, 7), (14, 7, 0)]\n    assert candidate(48, 18) == [(48, 18, 12), (18, 12, 6), (12, 6, 0)]\n", "cot": "How to solve:\nStep 1. Define a recursive function gcd_steps that takes two positive integers a and b as input.\nStep 2. If b is 0, return an empty list.\nStep 3. Otherwise, calculate the quotient q and remainder r of a divided by b using divmod(a, b).\nStep 4. Return a list containing the tuple (a, b, r) concatenated with the result of calling gcd_steps with arguments b and r."}
{"task_id": "train/15965", "prompt": "def get_absolute_differences(input_list):\n    \"\"\"\n    Generate a new list by adding the absolute difference of each element and its next element\n    in the input list.\n    Parameters:\n    input_list (list): The input list from which the new list is generated.\n    Returns:\n    list: A new list containing the absolute differences between each element and its next element.\n    \"\"\"\n", "entry_point": "get_absolute_differences", "canonical_solution": "    absolute_differences = []\n    for i in range(len(input_list) - 1):\n        absolute_difference = abs(input_list[i] - input_list[i + 1])\n        absolute_differences.append(absolute_difference)\n    return absolute_differences\n", "test": "def check(candidate):\n    assert candidate([1, 2, 3, 4]) == [1, 1, 1]\n    assert candidate([5, 5, 5, 5]) == [0, 0, 0]\n    assert candidate([10, 5, 3, 7]) == [5, 2, 4]", "cot": "How to solve:\nStep 1. Create an empty list called absolute_differences.\nStep 2. Iterate through the input_list using a for loop.\nStep 3. Calculate the absolute difference between each element and its next element using abs() function.\nStep 4. Append the absolute difference to the absolute_differences list.\nStep 5. Return the absolute_differences list containing the absolute differences between each element and its next element."}
{"task_id": "train/15966", "prompt": "def most_frequent_item(num_list):\n    \"\"\"\n    Given a list of integers, write a Python code to return the most frequent item.\n    If there are multiple items with the same highest frequency, return the item that appears first in the list.\n    \"\"\"\n", "entry_point": "most_frequent_item", "canonical_solution": "    counts = {}\n    max_count = 0\n    most_frequent = None\n    for num in num_list:\n        if num in counts:\n            counts[num] += 1\n        else:\n            counts[num] = 1\n        if counts[num] > max_count:\n            max_count = counts[num]\n            most_frequent = num\n    return most_frequent\n", "test": "def check(candidate):\n    assert candidate([1, 2, 3, 2, 2, 3]) == 2\n    assert candidate([5, 5, 5, 2, 2, 3, 3]) == 5\n    assert candidate([1, 1, 2, 2, 3, 3, 4, 4]) == 1", "cot": "How to solve:\nStep 1. Create an empty dictionary 'counts' to store the frequency of each number.\nStep 2. Initialize 'max_count' to 0 and 'most_frequent' to None.\nStep 3. Iterate through the 'num_list'.\n    - If the number is already in 'counts', increment its count.\n    - If the number is not in 'counts', add it with a count of 1.\n    - Update 'max_count' and 'most_frequent' if the count of the current number is greater than 'max_count'.\nStep 4. Return 'most_frequent' as the most frequent item."}
{"task_id": "train/15967", "prompt": "def findKSmallest(left, right, k):\n    \"\"\"\n    Create a function that, given two sorted arrays left and right of size x and y, returns an array of the k smallest elements from both arrays.\n    \"\"\"\n", "entry_point": "findKSmallest", "canonical_solution": "    res = []\n    i, j = 0, 0\n    while i < len(left) and j < len(right) and len(res) < k:\n        if left[i] <= right[j]:\n            res.append(left[i])\n            i += 1\n        else:\n            res.append(right[j])\n            j += 1\n    while i < len(left) and len(res) < k:\n        res.append(left[i])\n        i += 1\n    while j < len(right) and len(res) < k:\n        res.append(right[j])\n        j += 1\n    return res\n", "test": "def check(candidate):\n    assert candidate([1, 3, 5], [2, 4, 6], 3) == [1, 2, 3]\n    assert candidate([10, 20, 30], [5, 15, 25], 4) == [5, 10, 15, 20]\n    assert candidate([1, 2, 3], [4, 5, 6], 6) == [1, 2, 3, 4, 5, 6]", "cot": "How to solve:\nStep 1. Initialize an empty list 'res' to store the k smallest elements.\nStep 2. Initialize variables i and j to 0.\nStep 3. Iterate through the arrays 'left' and 'right' while i and j are less than their respective lengths and the length of 'res' is less than k.\n    - If left[i] is less than or equal to right[j], append left[i] to 'res' and increment i by 1.\n    - Otherwise, append right[j] to 'res' and increment j by 1.\nStep 4. If there are remaining elements in 'left' or 'right', append them to 'res'.\nStep 5. Return 'res' containing the k smallest elements from both arrays."}
{"task_id": "train/15968", "prompt": "def find_third_largest(numbers):\n    \"\"\"\n    Find the third largest number in a list.\n    Args:\n        numbers (list): A list of numbers.\n    Returns:\n        int or None: The third largest number in the list, or None if the list does not have at least three distinct numbers.\n    \"\"\"\n", "entry_point": "find_third_largest", "canonical_solution": "    if len(set(numbers)) < 3:\n        return None\n    unique_numbers = list(set(numbers))\n    unique_numbers.sort()\n    return unique_numbers[-3]\n", "test": "def check(candidate):\n    assert candidate([1, 2, 3, 4, 5]) == 3\n    assert candidate([5, 5, 5, 5, 5]) == None\n    assert candidate([10, 20, 30, 40, 50]) == 30", "cot": "How to solve:\nStep 1. Check if the number of unique elements in the list is less than 3, return None.\nStep 2. Create a list of unique numbers from the input list.\nStep 3. Sort the list of unique numbers.\nStep 4. Return the third largest number from the sorted unique numbers list."}
{"task_id": "train/15969", "prompt": "def add_character(string, character):\n    \"\"\"\n    Modify a string by adding a particular character at the end of every word.\n    \"\"\"\n", "entry_point": "add_character", "canonical_solution": "    words = string.split(\" \")\n    result = \"\"\n    for word in words:\n        result += word + character + \" \"\n    return result.strip()\n", "test": "def check(candidate):\n    assert candidate(\"Hello world\", \"!\") == \"Hello! world!\"\n    assert candidate(\"Python is fun\", \"*\") == \"Python* is* fun*\"\n    assert candidate(\"Test string\", \"-\") == \"Test- string-\"", "cot": "How to solve:\nStep 1. Split the input string into words.\nStep 2. Initialize an empty string for the result.\nStep 3. Iterate through each word in the input string.\n    - Add the word and the given character to the result string.\nStep 4. Return the result string with trailing spaces removed."}
{"task_id": "train/15970", "prompt": "def meanAbsoluteDeviation(numbers):\n    \"\"\"\n    script\n    \"\"\"\n", "entry_point": "meanAbsoluteDeviation", "canonical_solution": "\n    mean = sum(numbers) / len(numbers)\n    differences = [abs(number - mean) for number in numbers]\n    mad = sum(differences) / len(numbers)\n    return mad\n", "test": "def check(candidate):\n    assert candidate([1, 2, 3, 4, 5]) == 1.2\n    assert candidate([10, 20, 30, 40, 50]) == 12.0\n    assert candidate([5, 5, 5, 5, 5]) == 0.0\n", "cot": "How to solve:\nStep 1. Calculate the mean of the given numbers by summing them and dividing by the count.\nStep 2. Find the absolute differences between each number and the mean.\nStep 3. Calculate the mean absolute deviation (MAD) by summing the absolute differences and dividing by the count.\nStep 4. Return the mean absolute deviation."}
{"task_id": "train/15971", "prompt": "import pandas as pd\n\n\ndef extract_behavior_metrics(dataframe, mouse_nickname):\n    \"\"\"\n    You are working with a dataset containing behavioral metrics of mice in a research lab.\n    The code snippet provided is part of a data processing pipeline to create a dataframe with behavioral metrics for all mice.\n    The snippet iterates through each mouse's data, retrieves relevant behavioral information, and stores it in a dataframe.\n    Your task is to write a function to process this dataframe and extract specific behavioral metrics for further analysis.\n    \"\"\"\n", "entry_point": "extract_behavior_metrics", "canonical_solution": "\n    mouse_data = dataframe[dataframe[\"mouse\"] == mouse_nickname]\n    if mouse_data.empty:\n        return {}\n    metrics = {\n        \"learned\": mouse_data[\"learned\"].values[0],\n        \"date_learned\": mouse_data[\"date_learned\"].values[0],\n        \"training_time\": mouse_data[\"training_time\"].values[0],\n        \"perf_easy\": mouse_data[\"perf_easy\"].values[0],\n        \"n_trials\": mouse_data[\"n_trials\"].values[0],\n        \"threshold\": mouse_data[\"threshold\"].values[0],\n        \"bias\": mouse_data[\"bias\"].values[0],\n        \"reaction_time\": mouse_data[\"reaction_time\"].values[0],\n        \"lapse_low\": mouse_data[\"lapse_low\"].values[0],\n        \"lapse_high\": mouse_data[\"lapse_high\"].values[0],\n    }\n    return metrics\n", "test": "def check(candidate):\n    # Test case where mouse data exists in the dataframe\n    df = pd.DataFrame({\n        \"mouse\": [\"Mickey\", \"Minnie\"],\n        \"learned\": [True, False],\n        \"date_learned\": [\"2022-01-01\", \"2022-01-02\"],\n        \"training_time\": [60, 45],\n        \"perf_easy\": [0.8, 0.6],\n        \"n_trials\": [100, 120],\n        \"threshold\": [0.5, 0.4],\n        \"bias\": [0.1, 0.2],\n        \"reaction_time\": [0.3, 0.4],\n        \"lapse_low\": [0.05, 0.06],\n        \"lapse_high\": [0.1, 0.12]\n    })\n    assert candidate(df, \"Mickey\") == {\n        \"learned\": True,\n        \"date_learned\": \"2022-01-01\",\n        \"training_time\": 60,\n        \"perf_easy\": 0.8,\n        \"n_trials\": 100,\n        \"threshold\": 0.5,\n        \"bias\": 0.1,\n        \"reaction_time\": 0.3,\n        \"lapse_low\": 0.05,\n        \"lapse_high\": 0.1\n    }\n\n    # Test case where mouse data does not exist in the dataframe\n    assert candidate(df, \"Donald\") == {}\n\n    # Test case with different values for mouse data\n    df = pd.DataFrame({\n        \"mouse\": [\"Jerry\", \"Tom\"],\n        \"learned\": [False, True],\n        \"date_learned\": [\"2022-01-03\", \"2022-01-04\"],\n        \"training_time\": [75, 55],\n        \"perf_easy\": [0.7, 0.5],\n        \"n_trials\": [80, 110],\n        \"threshold\": [0.6, 0.3],\n        \"bias\": [0.15, 0.25],\n        \"reaction_time\": [0.35, 0.45],\n        \"lapse_low\": [0.07, 0.08],\n        \"lapse_high\": [0.11, 0.13]\n    })\n    assert candidate(df, \"Tom\") == {\n        \"learned\": True,\n        \"date_learned\": \"2022-01-04\",\n        \"training_time\": 55,\n        \"perf_easy\": 0.5,\n        \"n_trials\": 110,\n        \"threshold\": 0.3,\n        \"bias\": 0.25,\n        \"reaction_time\": 0.45,\n        \"lapse_low\": 0.08,\n        \"lapse_high\": 0.13\n    }", "cot": "How to solve:\nStep 1. Filter the dataframe to get data for the specified mouse using mouse_nickname.\nStep 2. If the filtered mouse_data is empty, return an empty dictionary.\nStep 3. Create a dictionary of specific behavioral metrics using the values from mouse_data.\nStep 4. Return the dictionary of behavioral metrics."}
{"task_id": "train/15972", "prompt": "def reverse_characters(array):\n    \"\"\"\n    Write a code to reverse each character of each element in an array.\n    \"\"\"\n", "entry_point": "reverse_characters", "canonical_solution": "    reversed_array = []\n    for word in array:\n        reversed_word = \"\"\n        for char in word:\n            reversed_word = char + reversed_word\n        reversed_array.append(reversed_word)\n    return reversed_array\n", "test": "def check(candidate):\n    assert candidate([\"hello\", \"world\"]) == [\"olleh\", \"dlrow\"]\n    assert candidate([\"123\", \"456\"]) == [\"321\", \"654\"]\n    assert candidate([\"abc\", \"def\"]) == [\"cba\", \"fed\"]", "cot": "How to solve:\nStep 1. Create an empty list called reversed_array.\nStep 2. Iterate through each word in the input array.\n    - Create an empty string called reversed_word.\n    - Iterate through each character in the word.\n        - Add the character to the beginning of the reversed_word.\n    - Append the reversed_word to the reversed_array.\nStep 3. Return the reversed_array."}
{"task_id": "train/15973", "prompt": "def longest_ones_sequence(arr):\n    \"\"\"\n    Develop an algorithm for finding the longest consecutive sequence of 1s in an integer array.\n    \"\"\"\n", "entry_point": "longest_ones_sequence", "canonical_solution": "    curr_length = 0\n    max_length = 0\n    for i in range(len(arr)):\n        if arr[i] == 1:\n            curr_length += 1\n            if curr_length > max_length:\n                max_length = curr_length\n        else:\n            curr_length = 0\n    return max_length\n", "test": "def check(candidate):\n    assert candidate([1, 1, 0, 1, 1, 1, 0, 1, 1]) == 3\n    assert candidate([0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1]) == 6\n    assert candidate([1, 1, 1, 1, 1]) == 5", "cot": "How to solve:\nStep 1. Initialize variables curr_length and max_length to 0.\nStep 2. Iterate through the input array.\n    - If the current element is 1, increment curr_length by 1.\n    - If curr_length is greater than max_length, update max_length with curr_length.\n    - If the current element is not 1, reset curr_length to 0.\nStep 3. Return max_length, which represents the longest consecutive sequence of 1s."}
{"task_id": "train/15974", "prompt": "def check_vowel_consonant(char):\n    \"\"\"\n    This function checks if a given character is a vowel or consonant.\n\n    Parameters:\n    char (str): A single character to be checked.\n\n    Returns:\n    str: Returns 'vowel' if the character is a vowel, otherwise 'consonant'.\n\n    Raises:\n    ValueError: If the input is not a single character.\n    \"\"\"\n", "entry_point": "check_vowel_consonant", "canonical_solution": "    if len(char) != 1:\n        raise ValueError(\"Input must be a single character.\")\n\n    char = char.lower()\n\n    vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    if char in vowels:\n        return \"vowel\"\n    else:\n        return \"consonant\"\n", "test": "def check(candidate):\n    assert candidate(\"a\") == \"vowel\"\n    assert candidate(\"b\") == \"consonant\"\n    assert candidate(\"A\") == \"vowel\"  # Testing case insensitivity\n\ncheck(check_vowel_consonant)", "cot": "How to solve:\nStep 1. Check if the input is a single character, if not, raise a ValueError.\nStep 2. Convert the character to lowercase.\nStep 3. Create a list of vowels: [\"a\", \"e\", \"i\", \"o\", \"u\"].\nStep 4. Check if the character is in the list of vowels.\n    - If yes, return \"vowel\".\n    - If no, return \"consonant\"."}
{"task_id": "train/15975", "prompt": "def insert_elements(lst):\n    \"\"\"\n    Insert n new elements at the beginning of a list, where n is the length of the list.\n    \"\"\"\n", "entry_point": "insert_elements", "canonical_solution": "    n = len(lst)\n    for i in range(n):\n        lst.insert(i, \"x\" + str(n - i))\n    return lst\n", "test": "def check(candidate):\n    assert candidate([1, 2, 3]) == ['x3', 'x2', 'x1', 1, 2, 3]\n    assert candidate([\"a\", \"b\", \"c\", \"d\"]) == ['x4', 'x3', 'x2', 'x1', 'a', 'b', 'c', 'd']\n    assert candidate([]) == []", "cot": "How to solve:\nStep 1. Get the length of the list.\nStep 2. Iterate through the range of the length of the list.\n    - Insert a new element at the beginning of the list with the value \"x\" followed by the index.\nStep 3. Return the modified list."}
{"task_id": "train/15976", "prompt": "def cross_product(v1, v2):\n    \"\"\"\n    Create a program for computing the cross product of two given vectors.\n    \"\"\"\n", "entry_point": "cross_product", "canonical_solution": "    cross_product = [\n        v1[1] * v2[2] - v1[2] * v2[1],\n        v1[2] * v2[0] - v1[0] * v2[2],\n        v1[0] * v2[1] - v1[1] * v2[0],\n    ]\n\n    return cross_product\n", "test": "def check(candidate):\n    assert candidate([1, 2, 3], [4, 5, 6]) == [-3, 6, -3]\n    assert candidate([0, 1, 0], [1, 0, 0]) == [0, 0, -1]\n    assert candidate([2, 3, 4], [5, 6, 7]) == [-3, 6, -3]", "cot": "How to solve:\nStep 1. Define a function cross_product that takes two vectors v1 and v2 as input.\nStep 2. Compute the cross product of the two vectors using the formula:\n    - Cross product = [v1[1] * v2[2] - v1[2] * v2[1], v1[2] * v2[0] - v1[0] * v2[2], v1[0] * v2[1] - v1[1] * v2[0]]\nStep 3. Return the computed cross product."}
{"task_id": "train/15977", "prompt": "def create_dictionary_from_string(input_string):\n    \"\"\"\n    Create a dictionary from a string containing key-value pairs.\n    Args:\n        input_string (str): The input string containing key-value pairs. The pairs should be separated by commas,\n                            with the key and value separated by a colon. Example: \"key1:value1,key2:value2\"\n    Returns:\n        dict: A dictionary where each key-value pair from the input string is converted to key-value pairs in the dictionary.\n    Example:\n        >>> create_dictionary_from_string(\"name:John,age:25,city:London\")\n        {'name': 'John', 'age': '25', 'city': 'London'}\n    \"\"\"\n", "entry_point": "create_dictionary_from_string", "canonical_solution": "    input_list = input_string.split(\",\")\n    result_dict = {}\n    for pair in input_list:\n        key, value = pair.split(\":\")\n        result_dict[key] = value\n    return result_dict\n", "test": "def check(candidate):\n    assert candidate(\"name:John,age:25,city:London\") == {'name': 'John', 'age': '25', 'city': 'London'}\n    assert candidate(\"fruit:Apple,color:Red,price:2.5\") == {'fruit': 'Apple', 'color': 'Red', 'price': '2.5'}\n    assert candidate(\"animal:Dog,sound:Bark,legs:4\") == {'animal': 'Dog', 'sound': 'Bark', 'legs': '4'}", "cot": "How to solve:\nStep 1. Split the input string by commas to get a list of key-value pairs.\nStep 2. Initialize an empty dictionary to store the key-value pairs.\nStep 3. Iterate through the list of pairs.\n    - Split each pair by colon to separate key and value.\n    - Add the key-value pair to the dictionary.\nStep 4. Return the resulting dictionary."}
{"task_id": "train/15978", "prompt": "def convert_text_to_hex(text):\n    \"\"\"\n    Write a Python program that converts the given string into its corresponding hexadecimal value based on ASCII representation and displays it.\n    This conversion should be done for a sizeable chunk of text and not just single characters.\n    Ideally, the program should efficiently handle text of lengths up to 10,000 characters.\n    Furthermore, consider how you could optimize this program without increasing the time or space complexity.\n    \"\"\"\n", "entry_point": "convert_text_to_hex", "canonical_solution": "\n    return \"\".join(format(ord(ch), \"02x\") for ch in text)\n", "test": "def check(candidate):\n    assert candidate(\"Hello, World!\") == \"48656c6c6f2c20576f726c6421\"\n    assert candidate(\"Python is fun\") == \"507974686f6e2069732066756e\"\n    assert candidate(\"1234567890\") == \"31323334353637383930\"", "cot": "How to solve:\nStep 1. Iterate through each character in the text.\nStep 2. Use the ord() function to get the ASCII value of each character.\nStep 3. Use the format() function to convert the ASCII value to its corresponding hexadecimal representation with 2 digits.\nStep 4. Join the hexadecimal representations of all characters together.\nStep 5. Return the concatenated hexadecimal representation of the text."}
{"task_id": "train/15979", "prompt": "def process_sensor_config(config_dict):\n    \"\"\"\n    You are tasked with creating a Python function that processes a configuration dictionary for sensor data.\n    The dictionary contains sensor configurations for various parameters, and your function needs to extract and process specific information from it.\n    \"\"\"\n", "entry_point": "process_sensor_config", "canonical_solution": "\n    processed_data = []\n    for sensor, config in config_dict.items():\n        icon = config.get(\"icon\", None)\n        accuracy_decimals = config.get(\"accuracy_decimals\", None)\n        state_class = config.get(\"state_class\", None)\n        unit_of_measurement = config.get(\"unit_of_measurement\", None)\n\n        processed_data.append((sensor, icon, accuracy_decimals, state_class))\n\n    return processed_data\n", "test": "def check(candidate):\n    assert candidate({\"temperature\": {\"icon\": \"thermometer\", \"accuracy_decimals\": 2, \"state_class\": \"measurement\", \"unit_of_measurement\": \"Celsius\"}}) == [(\"temperature\", \"thermometer\", 2, \"measurement\")]\n    assert candidate({\"humidity\": {\"icon\": \"water\", \"accuracy_decimals\": 1, \"state_class\": \"measurement\", \"unit_of_measurement\": \"Percentage\"}}) == [(\"humidity\", \"water\", 1, \"measurement\")]\n    assert candidate({\"pressure\": {\"icon\": \"gauge\", \"accuracy_decimals\": 3, \"state_class\": \"measurement\", \"unit_of_measurement\": \"Pascal\"}}) == [(\"pressure\", \"gauge\", 3, \"measurement\")]\n", "cot": "How to solve:\nStep 1. Create an empty list to store processed data.\nStep 2. Iterate through the items of the config_dict.\nStep 3. For each sensor, extract icon, accuracy_decimals, state_class, and unit_of_measurement from the config and append them as a tuple to the processed_data list.\nStep 4. Return the processed_data list."}
{"task_id": "train/15980", "prompt": "def find_kth_largest(nums, k):\n    \"\"\"\n    Finds the k-th largest element in a given list using the quickselect algorithm.\n    Args:\n        nums: A list of numbers.\n        k: The value of k, representing the k-th largest element to find.\n    Returns:\n        The k-th largest element in the list.\n    Raises:\n        IndexError: If k is out of the range of the input list.\n    Examples:\n        >>> find_kth_largest([3, 1, 7, 2, 5], 2)\n        5\n\n        >>> find_kth_largest([9, 5, 1, 3, 7, 6, 2, 8, 4], 4)\n        6\n    \"\"\"\n", "entry_point": "find_kth_largest", "canonical_solution": "    if k < 1 or k > len(nums):\n        raise IndexError(\"k is out of range\")\n    pivot = nums[0]\n    smaller = [x for x in nums if x < pivot]\n    equal = [x for x in nums if x == pivot]\n    larger = [x for x in nums if x > pivot]\n    if k <= len(larger):\n        return find_kth_largest(larger, k)\n    elif k <= len(larger) + len(equal):\n        return pivot\n    else:\n        return find_kth_largest(smaller, k - len(larger) - len(equal))\n", "test": "def check(candidate):\n    assert candidate([3, 1, 7, 2, 5], 2) == 5\n    assert candidate([9, 5, 1, 3, 7, 6, 2, 8, 4], 4) == 6\n    assert candidate([5, 5, 5, 5, 5], 1) == 5", "cot": "How to solve:\nStep 1. Check if k is out of the range of the input list, raise IndexError if so.\nStep 2. Set the pivot as the first element of the list.\nStep 3. Create three lists: smaller, equal, and larger, to store elements smaller, equal, and larger than the pivot respectively.\nStep 4. If k is less than or equal to the length of the larger list, recursively call the function with the larger list and k.\nStep 5. If k is less than or equal to the length of the larger list plus the length of the equal list, return the pivot.\nStep 6. Otherwise, recursively call the function with the smaller list and k minus the length of the larger list and the length of the equal list."}
{"task_id": "train/15981", "prompt": "def nth_lucas(n):\n    \"\"\"\n    Develop a recursive function that identifies the nth number in the Lucas sequence.\n    \"\"\"\n", "entry_point": "nth_lucas", "canonical_solution": "\n    if n == 0:\n        return 2\n    if n == 1:\n        return 1\n    else:\n        return nth_lucas(n - 1) + nth_lucas(n - 2)\n", "test": "def check(candidate):\n    assert candidate(0) == 2\n    assert candidate(1) == 1\n    assert candidate(2) == 3", "cot": "How to solve:\nStep 1. Define a recursive function nth_lucas that takes an integer n as input.\nStep 2. If n is 0, return 2. If n is 1, return 1.\nStep 3. For any other value of n, return the sum of nth_lucas(n - 1) and nth_lucas(n - 2).\nStep 4. The function will recursively calculate the nth number in the Lucas sequence using the above logic."}
{"task_id": "train/15982", "prompt": "from itertools import islice\n\n\ndef bucketize(iterable, bucket_size):\n    \"\"\"\n    list_values = [...]\n    \"\"\"\n", "entry_point": "bucketize", "canonical_solution": "\n    iterator = iter(iterable)\n    while True:\n        slice = list(islice(iterator, bucket_size))\n        if not slice:\n            return\n        yield slice\n", "test": "def check(candidate):\n    assert list(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9], 3)) == [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    assert list(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9], 4)) == [[1, 2, 3, 4], [5, 6, 7, 8], [9]]\n    assert list(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9], 1)) == [[1], [2], [3], [4], [5], [6], [7], [8], [9]]\n", "cot": "How to solve:\nStep 1. Create an iterator from the input iterable.\nStep 2. Use a while loop to iterate through the iterator.\nStep 3. Use islice to slice the iterator into chunks of size bucket_size.\nStep 4. If the slice is empty, return.\nStep 5. Yield the slice."}
{"task_id": "train/15983", "prompt": "def subtraction(num1, num2):\n    \"\"\"\n    Develop a subroutine that necessitates two numeric entries, particularly integer values or floats, in the guise of arguments and performs the operation of arithmetic subtraction, with emphasis on deducting the value of the secondary numeric entry from the initial numeric entry.\n    \"\"\"\n", "entry_point": "subtraction", "canonical_solution": "\n    return num1 - num2\n", "test": "def check(candidate):\n    assert candidate(5, 3) == 2\n    assert candidate(10, 7) == 3\n    assert candidate(100, 50) == 50", "cot": "How to solve:\nStep 1. Define a function named subtraction that takes two numeric arguments, num1 and num2.\nStep 2. Subtract num2 from num1 and return the result.\nStep 3. The function performs the arithmetic subtraction operation by deducting the value of num2 from num1."}
{"task_id": "train/15984", "prompt": "def unique_alpha(string1, string2):\n    \"\"\"\n    Construct a Python algorithm to identify all distinct alphabetical elements present in a couple of alphanumeric sequences.\n    In addition, ensure your function is case-sensitive and ignores any non-alphabet character.\n\n    \"\"\"\n", "entry_point": "unique_alpha", "canonical_solution": "\n    set1 = set(char for char in string1 if char.isalpha())\n    set2 = set(char for char in string2 if char.isalpha())\n    return set1.union(set2)\n", "test": "def check(candidate):\n    assert candidate(\"abc123\", \"def456\") == {'a', 'b', 'c', 'd', 'e', 'f'}\n    assert candidate(\"hello\", \"world\") == {'h', 'e', 'l', 'o', 'w', 'r', 'd'}\n    assert candidate(\"123\", \"456\") == set()\n", "cot": "How to solve:\nStep 1. Create sets set1 and set2 to store distinct alphabetical elements from string1 and string2 respectively.\nStep 2. Use set comprehension to iterate through each character in string1 and string2, checking if it is an alphabet character.\nStep 3. Return the union of set1 and set2 to get all distinct alphabetical elements present in both strings while ensuring case-sensitivity and ignoring non-alphabet characters."}
{"task_id": "train/15985", "prompt": "def malware_detect(data):\n    \"\"\"\n    Create a system to detect malicious software in a given dataset.\n    \"\"\"\n", "entry_point": "malware_detect", "canonical_solution": "    malicious = set()\n    for d in data:\n        if d[1] == 1:\n            malicious.add(d[0])\n    return malicious\n", "test": "def check(candidate):\n    assert candidate([(1, 0), (2, 1), (3, 1), (4, 0)]) == {2, 3}\n    assert candidate([(5, 1), (6, 1), (7, 1)]) == {5, 6, 7}\n    assert candidate([(8, 0), (9, 0), (10, 0)]) == set()\n\ncheck(malware_detect)", "cot": "How to solve:\nStep 1. Initialize an empty set called malicious.\nStep 2. Iterate through the data.\n    - If the second element of the tuple is 1, add the first element to the malicious set.\nStep 3. Return the malicious set containing the detected malicious software."}
{"task_id": "train/15986", "prompt": "def check_route_template(route_templates, requested_route):\n    \"\"\"\n    You are tasked with creating a Python function that simulates a simple web server routing system.\n    Your function should take a route and return the appropriate HTTP status code and message based on the existence of a template for the route.\n    \"\"\"\n", "entry_point": "check_route_template", "canonical_solution": "\n    if requested_route in route_templates:\n        if route_templates[requested_route]:\n            return 200, \"OK\"\n        else:\n            return 204, \"No Content\"\n    else:\n        return 404, \"Not Found\"\n", "test": "def check(candidate):\n    assert candidate({'/home': True, '/about': False}, '/home') == (200, \"OK\")\n    assert candidate({'/contact': True, '/services': True}, '/services') == (200, \"OK\")\n    assert candidate({'/login': False, '/signup': False}, '/logout') == (404, \"Not Found\")", "cot": "How to solve:\nStep 1. Check if the requested route exists in the route_templates dictionary.\nStep 2. If the route exists, check if there is a template for the route.\n    - If a template exists, return 200 and \"OK\".\n    - If no template exists, return 204 and \"No Content\".\nStep 3. If the route does not exist in the route_templates dictionary, return 404 and \"Not Found\"."}
{"task_id": "train/15987", "prompt": "def area_rectangle(length, width):\n    \"\"\"\n    Can you generate a program to find the rectangular area, given the two sides (length and width) of a rectangle?\n    \"\"\"\n", "entry_point": "area_rectangle", "canonical_solution": "    return length * width\n", "test": "def check(candidate):\n    assert candidate(3, 4) == 12\n    assert candidate(5, 5) == 25\n    assert candidate(10, 2) == 20", "cot": "How to solve:\nStep 1. Define a function area_rectangle that takes length and width as input.\nStep 2. Multiply the length and width to calculate the area of the rectangle.\nStep 3. Return the calculated area."}
{"task_id": "train/15988", "prompt": "def find_smallest_num(num_list):\n    \"\"\"\n    Develop a recursive function using the Python programming language that is specially designed to pinpoint the smallest numerical value present within a particular list of integers.\n    \"\"\"\n", "entry_point": "find_smallest_num", "canonical_solution": "\n    if len(num_list) == 1:\n        return num_list[0]\n    else:\n        smallest_other = find_smallest_num(num_list[1:])\n        return num_list[0] if num_list[0] < smallest_other else smallest_other\n", "test": "def check(candidate):\n    assert candidate([2, 3, 1, 5, 4]) == 1\n    assert candidate([10, 5, 8, 3, 6]) == 3\n    assert candidate([7, 9, 2, 4, 6]) == 2", "cot": "How to solve:\nStep 1. Define a recursive function find_smallest_num that takes a list of integers as input.\nStep 2. Check if the length of the list is 1, then return the single element as the smallest number.\nStep 3. If the length is greater than 1, call the function recursively with the sublist starting from the second element.\nStep 4. Compare the first element of the original list with the result of the recursive call to find the smallest number.\nStep 5. Return the smaller of the two numbers as the smallest number in the list."}
{"task_id": "train/15989", "prompt": "def find_least_num(lst):\n    \"\"\"\n    Devise an algorithmic operation which intakes an array of five unique numerical constituents and yields the most insignificant or minute number amongst the set, taking into consideration that the concept of 'least significant' might differ in various numerical systems.\n    \"\"\"\n", "entry_point": "find_least_num", "canonical_solution": "\n    return min(lst)\n", "test": "def check(candidate):\n    assert candidate([1, 2, 3, 4, 5]) == 1\n    assert candidate([10, 20, 30, 40, 50]) == 10\n    assert candidate([0.1, 0.2, 0.3, 0.4, 0.5]) == 0.1", "cot": "How to solve:\nStep 1. Define a function that takes a list of five unique numerical constituents as input.\nStep 2. Use the built-in min() function to find the smallest number in the list.\nStep 3. Return the smallest number as the result."}
{"task_id": "train/15990", "prompt": "import re\n\n\ndef find_urls_in_text(text):\n    \"\"\"\n    Construct a regular expression pattern that will precisely and accurately identify all instances of Uniform Resource Locators (URLs) embedded within a body of text.\n    \"\"\"\n", "entry_point": "find_urls_in_text", "canonical_solution": "\n    url_pattern = re.compile(\n        r\"http[s]?://(?:[a-zA-Z]|[0-9]|[$-_@.&+]|[!*\\\\(\\\\),]|(?:%[0-9a-fA-F][0-9a-fA-F]))+\"\n    )\n    urls = re.findall(url_pattern, text)\n    return urls\n", "test": "def check(candidate):\n    assert candidate(\"Check out this website: https://www.example.com\") == [\"https://www.example.com\"]\n    assert candidate(\"Here are two URLs: http://www.example1.com and https://www.example2.com\") == [\"http://www.example1.com\", \"https://www.example2.com\"]\n    assert candidate(\"No URLs in this text\") == []\n    \ncheck(find_urls_in_text)", "cot": "How to solve:\nStep 1. Define a function find_urls_in_text that takes a text input.\nStep 2. Construct a regular expression pattern to identify URLs using re.compile.\nStep 3. Use re.findall to find all instances of URLs in the input text based on the constructed pattern.\nStep 4. Return the list of URLs found."}
{"task_id": "train/15991", "prompt": "def sum_matrix(matrix):\n    \"\"\"\n    Given a matrix of integers, write a program to find the sum of all elements in each row and return the sum of all the row sums.\n    \"\"\"\n", "entry_point": "sum_matrix", "canonical_solution": "    row_sums = []\n    for row in matrix:\n        row_sum = sum(row)\n        row_sums.append(row_sum)\n    return sum(row_sums)\n", "test": "def check(candidate):\n    assert candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 45\n    assert candidate([[0, 0, 0], [0, 0, 0], [0, 0, 0]]) == 0\n    assert candidate([[1, 1], [2, 2], [3, 3]]) == 12", "cot": "How to solve:\nStep 1. Initialize an empty list called row_sums.\nStep 2. Iterate through each row in the matrix.\n    - Calculate the sum of elements in each row.\n    - Append the row sum to the row_sums list.\nStep 3. Calculate the sum of all the row sums in the row_sums list.\nStep 4. Return the sum of all the row sums."}
{"task_id": "train/15992", "prompt": "def is_divisible(num1, num2):\n    \"\"\"\n    Write a script to check if two numbers are divisible.\n    \"\"\"\n", "entry_point": "is_divisible", "canonical_solution": "    if num1 % num2 == 0:\n        return True\n    else:\n        return False\n", "test": "def check(candidate):\n    assert candidate(10, 2) == True\n    assert candidate(15, 4) == False\n    assert candidate(100, 5) == True", "cot": "How to solve:\nStep 1. Define a function is_divisible that takes two parameters num1 and num2.\nStep 2. Check if num1 is divisible by num2 using the modulo operator.\n    - If the remainder is 0, return True.\n    - Otherwise, return False."}
{"task_id": "train/15993", "prompt": "def get_maximum_element(s):\n    \"\"\"\n    Returns the maximum element from a set.\n    Args:\n    - s: A set containing elements of comparable types.\n    Returns:\n    - The maximum element in the set, or None if the set is empty.\n    Raises:\n    - TypeError: If the input is not a set.\n    Examples:\n    >>> get_maximum_element({1, 2, 3, 4, 5})\n    5\n    >>> get_maximum_element({'a', 'b', 'c'})\n    'c'\n    >>> get_maximum_element(set())\n    None\n    \"\"\"\n", "entry_point": "get_maximum_element", "canonical_solution": "    if not isinstance(s, set):\n        raise TypeError(\"Input must be a set\")\n    return max(s, default=None)\n", "test": "def check(candidate):\n    assert candidate({1, 2, 3, 4, 5}) == 5\n    assert candidate({'a', 'b', 'c'}) == 'c'\n    assert candidate(set()) == None", "cot": "How to solve:\nStep 1. Check if the input is a set, if not, raise a TypeError.\nStep 2. Return the maximum element in the set using the max function, with a default value of None if the set is empty."}
{"task_id": "train/15994", "prompt": "def findNameMaterial(material_name, existing_materials, counter):\n    \"\"\"\n    You are working on a software tool for managing materials in a 3D modeling application.\n    The code snippet provided is a part of a function that aims to clean up the names of materials by removing unorthodox characters and creating unique names for each material.\n    The function `cleanMaterials()` retrieves the list of materials from the 3D modeling document and then iterates through each material to clean its name.\n    The `findNameMaterial()` function is called to create a unique name for each material and remove any unorthodox characters.\n    \"\"\"\n", "entry_point": "findNameMaterial", "canonical_solution": "\n    clean_name = \"\".join(e for e in material_name if e.isalnum() or e.isspace())\n    unique_name = clean_name\n    while unique_name in existing_materials:\n        unique_name = f\"{clean_name}_{counter}\"\n        counter += 1\n    return unique_name\n", "test": "def check(candidate):\n    assert candidate(\"Material1\", [\"Material2\", \"Material3\"], 1) == \"Material1\"\n    assert candidate(\"Material 2\", [\"Material1\", \"Material_2\"], 1) == \"Material 2\"\n    assert candidate(\"Material@3\", [\"Material1\", \"Material2\", \"Material 3\"], 1) == \"Material3\"", "cot": "How to solve:\nStep 1. Clean the material name by removing unorthodox characters and creating a clean name.\nStep 2. Check if the clean name already exists in the list of existing materials.\nStep 3. If the clean name exists, create a unique name by appending a counter to the clean name.\nStep 4. Increment the counter and repeat step 2 and 3 until a unique name is found.\nStep 5. Return the unique name."}
{"task_id": "train/15995", "prompt": "def remove_padding_characters(text, chars):\n    \"\"\"\n    Develop a Python function to strip off the whitespace, tabs, newlines or any form of padding characters present anywhere in the provided text segment while preserving the structure of words and sentences.\n    The function should also take in a separate list of user-defined padding characters to be stripped off.\n    For example, with your code, if the source string is \"   hello   \\t\", and the padding characters list is [\" \", \"\\t\"], the string \"hello\" should be returned.\n    \"\"\"\n", "entry_point": "remove_padding_characters", "canonical_solution": "\n    words = text.split()\n    cleaned_words = []\n    for word in words:\n        for ch in chars:\n            if ch in word:\n                word = word.replace(ch, \"\")\n        cleaned_words.append(word)\n    cleaned_text = \" \".join(cleaned_words)\n    return cleaned_text\n", "test": "def check(candidate):\n    assert candidate(\"   hello   \\t\", [\" \", \"\\t\"]) == \"hello\"\n    assert candidate(\"   hello   \\t world   \\n\", [\" \", \"\\t\", \"\\n\"]) == \"hello world\"\n    assert candidate(\"   hello   \\t world   \\n\", [\" \", \"\\t\", \"\\n\", \"o\"]) == \"hell wrld\"", "cot": "How to solve:\nStep 1. Split the input text into words.\nStep 2. Create an empty list to store cleaned words.\nStep 3. Iterate through each word and for each word, iterate through the user-defined padding characters.\n    - If a padding character is found in the word, remove it.\n    - Append the cleaned word to the list of cleaned words.\nStep 4. Join the cleaned words with a space and return the result."}
{"task_id": "train/15996", "prompt": "def maxtf_job(solution):\n    \"\"\"\n    You are tasked with implementing a simulated annealing (SA) optimization algorithm to maximize a given objective function.\n    Simulated annealing is a probabilistic optimization technique used to find the global optimum in a large search space.\n    The algorithm starts with an initial solution and iteratively explores the solution space by accepting new solutions based on a probability distribution.\n    Over time, the algorithm gradually reduces the probability of accepting worse solutions, mimicking the annealing process in metallurgy.\n    \"\"\"\n", "entry_point": "maxtf_job", "canonical_solution": "\n    return -1 * (solution[0] ** 2 + solution[1] ** 2)\n", "test": "def check(candidate):\n    assert candidate([1, 2]) == -5\n    assert candidate([-3, 4]) == -25\n    assert candidate([0, 0]) == 0", "cot": "How to solve:\nStep 1. Define the objective function to be maximized, which is the negative of the sum of squares of the solution components.\nStep 2. Implement the simulated annealing (SA) algorithm.\nStep 3. Start with an initial solution and iteratively explore the solution space by accepting new solutions based on a probability distribution.\nStep 4. Gradually reduce the probability of accepting worse solutions over time, mimicking the annealing process in metallurgy.\nStep 5. Continue the iterative process until the algorithm converges to the global optimum."}
{"task_id": "train/15997", "prompt": "import argparse\n\n\ndef main(input_file, output_file):\n    \"\"\"\n    This function takes an input file and an output file as command-line arguments\n    and performs some operation using these files.\n    Parameters:\n        input_file (str): Path to the input file.\n        output_file (str): Path to the output file.\n    \"\"\"\n", "entry_point": "main", "canonical_solution": "    print(f\"Input file: {input_file}\")\n    print(f\"Output file: {output_file}\")\n", "test": "def check(candidate):\n    assert candidate(\"input.txt\", \"output.txt\") == None\n    assert candidate(\"data.csv\", \"result.csv\") == None\n    assert candidate(\"config.json\", \"output.json\") == None", "cot": "How to solve:\nStep 1. Import the argparse module.\nStep 2. Define a function main that takes input_file and output_file as parameters.\nStep 3. Inside the main function, print the input_file and output_file using f-strings.\nStep 4. The main function can be used to perform operations using the input and output files provided as command-line arguments."}
{"task_id": "train/15998", "prompt": "def hausdorff_distance(set1, set2):\n    \"\"\"\n    Generate a script to calculate the Hausdorff distance between two sets of points.\n    \"\"\"\n", "entry_point": "hausdorff_distance", "canonical_solution": "    max_distance = float(\"-inf\")\n    for A in set1:\n        distance = float(\"inf\")\n        for B in set2:\n            distance = min(distance, abs(A - B))\n        max_distance = max(max_distance, distance)\n    return max_distance\n", "test": "def check(candidate):\n    assert candidate([1, 2, 3], [4, 5, 6]) == 3\n    assert candidate([0, 0, 0], [0, 0, 0]) == 0\n    assert candidate([10, 20, 30], [15, 25, 35]) == 5", "cot": "How to solve:\nStep 1. Initialize max_distance as negative infinity.\nStep 2. Iterate through each point A in set1.\n    - Initialize distance as positive infinity.\n    - Iterate through each point B in set2.\n        - Update distance as the minimum of its current value and the absolute difference between A and B.\n    - Update max_distance as the maximum of its current value and distance.\nStep 3. Return max_distance as the Hausdorff distance between set1 and set2."}
{"task_id": "train/15999", "prompt": "def remove_target(string, target):\n    \"\"\"\n    Develop a function to remove all occurrences of a given target string from a given string.\n    \"\"\"\n", "entry_point": "remove_target", "canonical_solution": "    return string.replace(target, \"\")\n", "test": "def check(candidate):\n    assert candidate(\"hello world\", \"o\") == \"hell wrld\"\n    assert candidate(\"programming is fun\", \"ing\") == \"programm is fun\"\n    assert candidate(\"banana\", \"a\") == \"bnn\"", "cot": "How to solve:\nStep 1. Use the replace() method to remove all occurrences of the target string from the given string.\nStep 2. Return the modified string."}