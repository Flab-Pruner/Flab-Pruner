{"task_id": "valid/0", "prompt": "def classify_text(text):\n    \"\"\"\n    Design a rule-based system to classify text into predefined categories.\n    \"\"\"\n", "entry_point": "classify_text", "canonical_solution": "    categories = [\"sports\", \"finance\", \"health\", \"technology\"]\n\n    rules = {\n        \"sports\": (\"football\", \"basketball\", \"soccer\"),\n        \"finance\": (\"stock\", \"financial planning\", \"investment\"),\n        \"health\": (\"diet\", \"healthcare\", \"exercise\"),\n        \"technology\": (\"AI\", \"machine learning\", \"data science\"),\n    }\n\n    for category in categories:\n        for rule in rules[category]:\n            if rule in text:\n                return category\n\n    return \"other\"\n", "test": "def check(candidate):\n    assert candidate(\"I love playing basketball\",) == \"sports\"\n    assert candidate(\"I am interested in financial planning\",) == \"finance\"\n    assert candidate(\"I follow the latest AI trends\",) == \"technology\"", "cot": "How to solve:\nStep 1. Define categories and rules for classification.\nStep 2. Iterate through each category and its associated rules.\nStep 3. Check if any rule is present in the input text.\nStep 4. If a rule is found, return the corresponding category.\nStep 5. If no rule is found in any category, return \"other\"."}
{"task_id": "valid/1", "prompt": "def create_frozen_set(s):\n    \"\"\"\n    Create a frozen set from an existing set.\n    Parameters:\n    s (set): The original set.\n    Returns:\n    frozenset: The frozen set created from the original set.\n    \"\"\"\n", "entry_point": "create_frozen_set", "canonical_solution": "    return frozenset(s)\n", "test": "def check(candidate):\n    assert candidate({1, 2, 3}) == frozenset({1, 2, 3})\n    assert candidate({'a', 'b', 'c'}) == frozenset({'a', 'b', 'c'})\n    assert candidate(set()) == frozenset()", "cot": "How to solve:\nStep 1. Define a function that takes a set 's' as input.\nStep 2. Use the 'frozenset' function to create a frozen set from the original set 's'.\nStep 3. Return the frozen set created from the original set."}
{"task_id": "valid/2", "prompt": "def bitwise_xor(num1, num2):\n    \"\"\"\n    Calculates the bitwise XOR of two integers.\n    Parameters:\n    num1 (int): The first integer value.\n    num2 (int): The second integer value.\n    Returns:\n    int: The bitwise XOR of num1 and num2.\n    Example:\n    >>> bitwise_xor(5, 3)\n    6\n    >>> bitwise_xor(8, 12)\n    4\n    \"\"\"\n", "entry_point": "bitwise_xor", "canonical_solution": "    return num1 ^ num2\n", "test": "def check(candidate):\n    assert candidate(5, 3) == 6\n    assert candidate(8, 12) == 4\n    assert candidate(0, 0) == 0", "cot": "How to solve:\nStep 1. Define a function that takes two integer parameters, num1 and num2.\nStep 2. Use the bitwise XOR operator (^) to calculate the bitwise XOR of num1 and num2.\nStep 3. Return the result of the bitwise XOR operation."}
{"task_id": "valid/3", "prompt": "def sort_instruments(instruments):\n    \"\"\"\n    Given the following list of musical instruments, create a function that sorts and returns these instruments in descending order based on their English alphabetic sequence:\n    \"\"\"\n", "entry_point": "sort_instruments", "canonical_solution": "\n    sorted_instruments = sorted(instruments, reverse=True)\n    return sorted_instruments\n", "test": "def check(candidate):\n    assert candidate(['guitar', 'piano', 'violin']) == ['violin', 'piano', 'guitar']\n    assert candidate(['flute', 'drums', 'trumpet', 'saxophone']) == ['trumpet', 'saxophone', 'flute', 'drums']\n    assert candidate(['cello', 'bass', 'clarinet', 'oboe']) == ['oboe', 'clarinet', 'cello', 'bass']\n", "cot": "How to solve:\nStep 1. Use the sorted() function to sort the instruments in ascending order based on their English alphabetic sequence.\nStep 2. Use the reverse=True parameter in the sorted() function to reverse the order and get the instruments in descending order.\nStep 3. Return the sorted_instruments."}
{"task_id": "valid/4", "prompt": "import json\n\n\ndef convert_json_to_list(json_string):\n    \"\"\"\n    Convert a JSON string to a list of dictionaries.\n    Parameters:\n    - json_string: A JSON string to convert.\n    Returns:\n    - A list of dictionaries representing the JSON data.\n    Raises:\n    - ValueError if the input is not a valid JSON string.\n    Example Usage:\n    >>> json_string = '[{\"name\": \"Alice\", \"age\": 25}, {\"name\": \"Bob\", \"age\": 30}]'\n    >>> convert_json_to_list(json_string)\n    [{'name': 'Alice', 'age': 25}, {'name': 'Bob', 'age': 30}]\n    \"\"\"\n", "entry_point": "convert_json_to_list", "canonical_solution": "    try:\n        json_data = json.loads(json_string)\n        if isinstance(json_data, list):\n            return json_data\n        return [json_data]\n\n    except ValueError as e:\n        raise ValueError(\"Invalid JSON string.\") from e\n", "test": "def check(candidate):\n    assert candidate('[{\"name\": \"Alice\", \"age\": 25}, {\"name\": \"Bob\", \"age\": 30}]') == [{'name': 'Alice', 'age': 25}, {'name': 'Bob', 'age': 30}]\n    assert candidate('{\"name\": \"Alice\", \"age\": 25}') == [{'name': 'Alice', 'age': 25}]\n    assert candidate('{\"name\": \"Alice\"}') == [{'name': 'Alice'}]", "cot": "How to solve:\nStep 1. Use the `json.loads()` function to load the JSON string into a Python object.\nStep 2. Check if the loaded data is a list of dictionaries or a single dictionary.\nStep 3. Return the list of dictionaries if it's a list, otherwise return a list containing the single dictionary.\nStep 4. If the JSON string is invalid, catch the `ValueError` exception and raise a new `ValueError` with a custom message."}
{"task_id": "valid/5", "prompt": "def is_divisible_and_sum_divisible(n):\n    \"\"\"\n    Create a function that returns true if the number is divisible by 5 and the sum of its digits is also divisible by 3.\n    If the input is not a number or a negative number, return False.\n    \"\"\"\n", "entry_point": "is_divisible_and_sum_divisible", "canonical_solution": "    if not isinstance(n, int) or n < 0:\n        return False\n\n    if n % 5 != 0:\n        return False\n\n    digit_sum = sum(int(digit) for digit in str(n))\n\n    if digit_sum % 3 == 0:\n        return True\n    else:\n        return False\n", "test": "def check(candidate):\n    assert candidate(15) == True\n    assert candidate(20) == False\n    assert candidate(-10) == False", "cot": "How to solve:\nStep 1. Check if the input is an integer and not negative, if not, return False.\nStep 2. Check if the number is divisible by 5, if not, return False.\nStep 3. Calculate the sum of the digits of the number.\nStep 4. Check if the sum of the digits is divisible by 3, if yes, return True, else return False."}
{"task_id": "valid/6", "prompt": "def discrete_logarithm(n, base):\n    \"\"\"\n    Write a function to return the discrete logarithm of a number to a given base.\n    \"\"\"\n", "entry_point": "discrete_logarithm", "canonical_solution": "    power = 1\n    result = 0\n    while base**power <= n:\n        power += 1\n    return power - 1\n", "test": "def check(candidate):\n    assert candidate(10, 2) == 3\n    assert candidate(81, 3) == 4\n    assert candidate(1000, 10) == 3", "cot": "How to solve:\nStep 1. Initialize power as 1 and result as 0.\nStep 2. Use a while loop to calculate the power such that base raised to power is less than or equal to n.\nStep 3. Increment power in each iteration.\nStep 4. Return power - 1 as the discrete logarithm."}
{"task_id": "valid/7", "prompt": "import json\nimport pprint\n\n\ndef pretty_print_json(json_str):\n    \"\"\"\n    Formats and pretty prints JSON data.\n    Args:\n        json_str (str): The JSON string to be pretty printed.\n    Returns:\n        None\n    Raises:\n        ValueError: If the provided json_str is not a valid JSON string.\n    \"\"\"\n", "entry_point": "pretty_print_json", "canonical_solution": "    try:\n        json_data = json.loads(json_str)\n        pprint.pprint(json_data, indent=4)\n    except ValueError:\n        raise ValueError(\"Invalid JSON string\")\n", "test": "def check(candidate):\n    assert candidate('{\"name\": \"Alice\", \"age\": 30}') == None\n    assert candidate('{\"name\": \"Bob\", \"age\": 25}') == None\n    assert candidate('{\"name\": \"Charlie\", \"age\": 35}') == None", "cot": "How to solve:\nStep 1. Define a function pretty_print_json that takes a JSON string as input.\nStep 2. Use json.loads to parse the input JSON string into a Python object.\nStep 3. Use pprint.pprint to pretty print the parsed JSON data with an indentation of 4 spaces.\nStep 4. If the input JSON string is not valid, catch the ValueError and raise a new ValueError with the message \"Invalid JSON string\"."}
{"task_id": "valid/8", "prompt": "def has_consecutive_repeating_chars(s):\n    \"\"\"\n    Check if a string contains consecutive repeating characters.\n    Args:\n        s (str): The input string to check.\n    Returns:\n        bool: True if the string contains consecutive repeating characters, False otherwise.\n    \"\"\"\n", "entry_point": "has_consecutive_repeating_chars", "canonical_solution": "    for i in range(len(s) - 1):\n        if s[i] == s[i + 1]:\n            return True\n\n    return False\n", "test": "def check(candidate):\n    assert candidate(\"hello\") == True\n    assert candidate(\"world\") == False\n    assert candidate(\"mississippi\") == True", "cot": "How to solve:\nStep 1. Iterate through the string using a for loop.\nStep 2. Check if the current character is equal to the next character.\n    - If it is, return True.\nStep 3. If no consecutive repeating characters are found, return False."}
{"task_id": "valid/9", "prompt": "def replace_placeholders(template, values):\n    \"\"\"\n    You are tasked with creating a Python function that processes a template and replaces placeholders with values from a given dictionary.\n    The template will be provided as a string with placeholders enclosed in double curly braces, e.g., \"{{placeholder}}\".\n    The function should replace these placeholders with corresponding values from the dictionary and return the updated template.\n    \"\"\"\n", "entry_point": "replace_placeholders", "canonical_solution": "\n    for key, value in values.items():\n        template = template.replace(\"{{\" + key + \"}}\", str(value))\n    return template\n", "test": "def check(candidate):\n    assert candidate(\"Hello, {{name}}!\", {\"name\": \"Alice\"}) == \"Hello, Alice!\"\n    assert candidate(\"My favorite color is {{color}}.\", {\"color\": \"blue\"}) == \"My favorite color is blue.\"\n    assert candidate(\"I have {{number}} cats.\", {\"number\": 3}) == \"I have 3 cats.\"", "cot": "How to solve:\nStep 1. Iterate through each key-value pair in the dictionary.\nStep 2. Replace each placeholder in the template string with the corresponding value from the dictionary using the replace() method.\nStep 3. Return the updated template after replacing all placeholders."}
{"task_id": "valid/10", "prompt": "def are_all_characters_unique(string):\n    \"\"\"\n    Generate a code to check whether all the characters in a given string are unique or not.\n    \"\"\"\n", "entry_point": "are_all_characters_unique", "canonical_solution": "    string_chars = set()\n    for char in string:\n        if char in string_chars:\n            return False\n        string_chars.add(char)\n\n    return True\n", "test": "def check(candidate):\n    assert candidate(\"hello\") == False\n    assert candidate(\"world\") == True\n    assert candidate(\"apple\") == False", "cot": "How to solve:\nStep 1. Create an empty set to store unique characters.\nStep 2. Iterate through each character in the string.\n    - If the character is already in the set, return False.\n    - Otherwise, add the character to the set.\nStep 3. If the loop completes without returning False, return True."}
{"task_id": "valid/11", "prompt": "from datetime import datetime, timedelta\n\n\ndef add_days(date_string, days):\n    \"\"\"\n    Add a certain number of days to a given date and return the resulting date.\n    Args:\n        date_string (str): A string representing a date in the format 'YYYY-MM-DD'.\n        days (int): The number of days to add to the given date.\n    Returns:\n        str: A string representing the resulting date in the format 'YYYY-MM-DD'.\n    \"\"\"\n", "entry_point": "add_days", "canonical_solution": "    date_format = \"%Y-%m-%d\"\n    original_date = datetime.strptime(date_string, date_format)\n    new_date = original_date + timedelta(days=days)\n    return new_date.strftime(date_format)\n", "test": "def check(candidate):\n    assert candidate(\"2022-01-01\", 5) == \"2022-01-06\"\n    assert candidate(\"2023-12-31\", 1) == \"2024-01-01\"\n    assert candidate(\"2021-02-28\", 1) == \"2021-03-01\"", "cot": "How to solve:\nStep 1. Define a function to add a certain number of days to a given date and return the resulting date.\nStep 2. Parse the input date string to a datetime object using the specified date format.\nStep 3. Add the given number of days to the original date using timedelta.\nStep 4. Convert the resulting date back to a string in the specified date format.\nStep 5. Return the resulting date string."}
{"task_id": "valid/12", "prompt": "def eliminate_whitespace(text):\n    \"\"\"\n    Develop a Python function to eliminate the whitespace present at the start and finish of a provided text segment.\n    Additionally, the function should also eliminate any extra whitespace between words.\n    Allow the function to accept texts of up to 10,000 characters.\n    \"\"\"\n", "entry_point": "eliminate_whitespace", "canonical_solution": "\n    if len(text) > 10000:\n        return \"Error: Text is too long\"\n\n    words = text.split()\n\n    result = \" \".join(words)\n\n    return result\n", "test": "def check(candidate):\n    assert candidate(\"  Hello  \") == \"Hello\"\n    assert candidate(\"  Hello  World  \") == \"Hello World\"\n    assert candidate(\"This is a long text with extra spaces\") == \"This is a long text with extra spaces\"\n", "cot": "How to solve:\nStep 1. Check if the length of the text is greater than 10000, if so, return \"Error: Text is too long\".\nStep 2. Split the text into words.\nStep 3. Join the words back together with a single space between them.\nStep 4. Return the result."}
{"task_id": "valid/13", "prompt": "import string\n\n\ndef normalize_text(text):\n    \"\"\"\n    Implement a function in Python that normalizes a given text string for natural language processing, considering the impact of multilingual data and the requirement for handling linguistic variations and irregularities.\n    \"\"\"\n", "entry_point": "normalize_text", "canonical_solution": "    text = text.lower()\n\n    text = text.translate(str.maketrans(\"\", \"\", string.punctuation))\n\n    text = \"\".join([i for i in text if not i.isdigit()])\n\n    text = text.strip()\n\n    text = \" \".join(text.split())\n\n    return text\n", "test": "def check(candidate):\n    assert candidate(\"Hello, World!\") == \"hello world\"\n    assert candidate(\"1234abc5678\") == \"abc\"\n    assert candidate(\"  This is a test.  \") == \"this is a test\"", "cot": "How to solve:\nStep 1. Convert the input text to lowercase.\nStep 2. Remove punctuation from the text using the translate method and string.punctuation.\nStep 3. Remove digits from the text using list comprehension.\nStep 4. Strip any leading or trailing whitespace from the text.\nStep 5. Join the remaining text by spaces to remove extra spaces.\nStep 6. Return the normalized text."}
{"task_id": "valid/14", "prompt": "import re\n\n\ndef match_words(text, word1, word2):\n    \"\"\"\n    Match a string that contains either of two specific words.\n    Parameters:\n    - text (str): The input string to be matched.\n    - word1 (str): The first word to be matched.\n    - word2 (str): The second word to be matched.\n    Returns:\n    - bool: True if the string contains either of the two words, False otherwise.\n    \"\"\"\n", "entry_point": "match_words", "canonical_solution": "    pattern = rf\"\\b({re.escape(word1)}|{re.escape(word2)})\\b\"\n    return bool(re.search(pattern, text))\n", "test": "def check(candidate):\n    assert candidate(\"Hello, world!\", \"Hello\", \"world\") == True\n    assert candidate(\"Python is great\", \"Java\", \"C++\") == False\n    assert candidate(\"I love pizza\", \"love\", \"hate\") == True", "cot": "How to solve:\nStep 1. Define a function match_words that takes input text, word1, and word2.\nStep 2. Use re.escape to escape any special characters in word1 and word2.\nStep 3. Create a pattern using f-string with word1 and word2 as alternatives inside a word boundary.\nStep 4. Use re.search to check if the pattern matches the text.\nStep 5. Return True if there is a match, otherwise return False."}
{"task_id": "valid/15", "prompt": "def layer_sum(array):\n    \"\"\"\n    Create a function that takes a 2D array and returns the sum of individual layers.\n    \"\"\"\n", "entry_point": "layer_sum", "canonical_solution": "\n    layer_sums = []\n    for layer in array:\n        layer_sums.append(sum(layer))\n    return layer_sums\n", "test": "def check(candidate):\n    assert candidate([[1, 2], [3, 4]]) == [3, 7]\n    assert candidate([[5, 5, 5], [1, 1, 1], [2, 2, 2]]) == [15, 3, 6]\n    assert candidate([[10, 20, 30], [40, 50, 60]]) == [60, 150]", "cot": "How to solve:\nStep 1. Initialize an empty list to store layer sums.\nStep 2. Iterate through each layer in the 2D array.\n    - Calculate the sum of each layer.\n    - Append the sum to the layer_sums list.\nStep 3. Return the layer_sums list containing the sum of individual layers."}
{"task_id": "valid/16", "prompt": "def parse_vim_settings(comment: str) -> dict:\n    \"\"\"\n    You are given a code snippet that contains a comment indicating specific settings for the Vim text editor.\n    Your task is to write a program that parses this comment and extracts the tabstop, expandtab, shiftwidth, and softtabstop values.\n    \"\"\"\n", "entry_point": "parse_vim_settings", "canonical_solution": "\n    settings = {}\n    parts = comment.split(\": \")[1].split(\" \")\n    for part in parts:\n        key, value = part.split(\"=\")\n        if value.isdigit():\n            settings[key] = value\n        elif value.lower() == \"true\":\n            settings[key] = True\n        elif value.lower() == \"false\":\n            settings[key] = False\n    return settings\n", "test": "def check(candidate):\n    assert candidate(\"# Vim settings: tabstop=4 expandtab=true shiftwidth=4 softtabstop=4\") == {'tabstop': '4', 'expandtab': True, 'shiftwidth': '4', 'softtabstop': '4'}\n    assert candidate(\"# Vim settings: tabstop=2 expandtab=false shiftwidth=2 softtabstop=2\") == {'tabstop': '2', 'expandtab': False, 'shiftwidth': '2', 'softtabstop': '2'}\n    assert candidate(\"# Vim settings: tabstop=8 expandtab=true shiftwidth=2 softtabstop=2\") == {'tabstop': '8', 'expandtab': True, 'shiftwidth': '2', 'softtabstop': '2'}", "cot": "How to solve:\nStep 1. Initialize an empty dictionary called settings.\nStep 2. Split the comment to extract the settings part.\nStep 3. Split the settings part to get key-value pairs.\nStep 4. Iterate through the key-value pairs.\n    - If the value is a digit, store it as is.\n    - If the value is \"true\", store it as True.\n    - If the value is \"false\", store it as False.\nStep 5. Return the settings dictionary."}
{"task_id": "valid/17", "prompt": "def disassemble_sentence(sentence):\n    \"\"\"\n    Design a software function that can accept a complex linguistic structure, specifically a sentence, as an argument and disassemble it into a precisely arranged collection of lexical items, or words.\n    \"\"\"\n", "entry_point": "disassemble_sentence", "canonical_solution": "\n    return sentence.split()\n", "test": "def check(candidate):\n    assert candidate(\"I love programming\") == [\"I\", \"love\", \"programming\"]\n    assert candidate(\"The quick brown fox jumps over the lazy dog\") == [\"The\", \"quick\", \"brown\", \"fox\", \"jumps\", \"over\", \"the\", \"lazy\", \"dog\"]\n    assert candidate(\"Hello, world!\") == [\"Hello,\", \"world!\"]", "cot": "How to solve:\nStep 1. Define a function disassemble_sentence that takes a sentence as input.\nStep 2. Use the split method to split the sentence into words based on spaces.\nStep 3. Return the collection of words obtained from the split operation."}
{"task_id": "valid/18", "prompt": "def find_digits_count(num):\n    \"\"\"\n    This function takes an integer parameter num and returns the count of digits in the number using recursion.\n\n    Parameters:\n    num (int): The integer number to count the digits for.\n\n    Returns:\n    int: The count of digits in the number.\n    \"\"\"\n", "entry_point": "find_digits_count", "canonical_solution": "    if num < 10:\n        return 1\n    else:\n        return 1 + find_digits_count(num // 10)\n", "test": "def check(candidate):\n    assert candidate(123) == 3\n    assert candidate(0) == 1\n    assert candidate(987654321) == 9", "cot": "How to solve:\nStep 1. Define a function find_digits_count that takes an integer parameter num.\nStep 2. Check if num is less than 10, return 1.\nStep 3. If num is greater than or equal to 10, return 1 plus the result of find_digits_count with num divided by 10.\nStep 4. The function will recursively count the digits in the number until the base case is met, and then return the count of digits."}
{"task_id": "valid/19", "prompt": "def reverse_combine_sort(list1, list2):\n    \"\"\"\n    Write a function that takes in 2 lists, reverses the elements of each list, combines the elements to output a single list, and then sorts the elements in ascending order.\n    \"\"\"\n", "entry_point": "reverse_combine_sort", "canonical_solution": "    reversed_list1 = list1[::-1]\n    reversed_list2 = list2[::-1]\n    combined_list = reversed_list1 + reversed_list2\n    sorted_list = sorted(combined_list)\n    return sorted_list\n", "test": "def check(candidate):\n    assert candidate([1, 2, 3], [4, 5, 6]) == [1, 2, 3, 4, 5, 6]\n    assert candidate([9, 8, 7], [6, 5, 4]) == [4, 5, 6, 7, 8, 9]\n    assert candidate([3, 1], [2, 4]) == [1, 2, 3, 4]", "cot": "How to solve:\nStep 1. Reverse the elements of list1 and list2.\nStep 2. Combine the reversed lists into a single list.\nStep 3. Sort the combined list in ascending order.\nStep 4. Return the sorted list."}
{"task_id": "valid/20", "prompt": "def replace_all_words(input_string, old_word, new_word):\n    \"\"\"\n    This function takes a string as input and returns the string with all occurrences of a specified word replaced with another word.\n    Parameters:\n    input_string (str): The input string.\n    old_word (str): The word to be replaced.\n    new_word (str): The word to replace with.\n    Returns:\n    str: The input string with all occurrences of old_word replaced with new_word.\n    \"\"\"\n", "entry_point": "replace_all_words", "canonical_solution": "    return input_string.replace(old_word, new_word)\n", "test": "def check(candidate):\n    assert candidate(\"hello world\", \"world\", \"universe\") == \"hello universe\"\n    assert candidate(\"apple banana apple\", \"apple\", \"orange\") == \"orange banana orange\"\n    assert candidate(\"programming is fun\", \"is\", \"can be\") == \"programming can be fun\"", "cot": "How to solve:\nStep 1. Define a function that takes input_string, old_word, and new_word as parameters.\nStep 2. Use the replace method on input_string to replace all occurrences of old_word with new_word.\nStep 3. Return the modified input_string."}
{"task_id": "valid/21", "prompt": "def square_complex_number(z):\n    \"\"\"\n    Calculate the square of a given complex number.\n    Parameters:\n        z (complex): The complex number to be squared.\n    Returns:\n        complex: The square of the given complex number.\n    \"\"\"\n", "entry_point": "square_complex_number", "canonical_solution": "    return z**2\n", "test": "def check(candidate):\n    assert candidate(2+3j) == -5+12j\n    assert candidate(1j) == -1\n    assert candidate(4-2j) == 12-16j", "cot": "How to solve:\nStep 1. Define a function square_complex_number that takes a complex number z as input.\nStep 2. Calculate the square of the complex number using the exponentiation operator (**).\nStep 3. Return the squared complex number as the output."}
{"task_id": "valid/22", "prompt": "def get_nested_dictionary_value(dictionary):\n    \"\"\"\n    Accesses the value associated with the key \"name\" in the nested dictionary.\n    Args:\n        dictionary (dict): The nested dictionary.\n    Returns:\n        object: The value associated with the key \"name\" in the nested dictionary.\n                Returns None if the key is not found.\n    \"\"\"\n", "entry_point": "get_nested_dictionary_value", "canonical_solution": "    try:\n        return dictionary[\"name\"]\n    except KeyError:\n        return None\n", "test": "def check(candidate):\n    assert candidate({\"name\": \"Alice\"}) == \"Alice\"\n    assert candidate({\"age\": 25, \"city\": \"New York\"}) == None\n    assert candidate({\"name\": {\"first\": \"Bob\", \"last\": \"Smith\"}}) == {\"first\": \"Bob\", \"last\": \"Smith\"}", "cot": "How to solve:\nStep 1. Define a function that takes a nested dictionary as input.\nStep 2. Use a try-except block to access the value associated with the key \"name\" in the dictionary.\nStep 3. If the key \"name\" is found, return the associated value.\nStep 4. If the key \"name\" is not found, catch the KeyError and return None."}
{"task_id": "valid/23", "prompt": "def struct_to_dict(struct):\n    \"\"\"\n    You are tasked with implementing a function that converts a Python data structure into a dictionary.\n    The function should handle nested structures and convert them into nested dictionaries.\n    The function should be named `struct_to_dict` and should take a single argument `struct` representing the input data structure.\n    The function should return a dictionary representation of the input structure.\n    \"\"\"\n", "entry_point": "struct_to_dict", "canonical_solution": "\n    if isinstance(struct, dict):\n        return {key: struct_to_dict(value) for key, value in struct.items()}\n    elif isinstance(struct, (list, tuple)):\n        return [struct_to_dict(item) for item in struct]\n    elif hasattr(struct, \"__dict__\"):\n        return struct_to_dict(struct.__dict__)\n    else:\n        return struct\n", "test": "def check(candidate):\n    assert candidate({'a': 1, 'b': [2, 3]},) == {'a': 1, 'b': [2, 3]}\n    assert candidate([{'x': 1}, {'y': 2}]) == [{'x': 1}, {'y': 2}]\n    assert candidate((1, 2, 3)) == [1, 2, 3]\n", "cot": "How to solve:\nStep 1. Define a function `struct_to_dict` that takes a single argument `struct`.\nStep 2. Check if the `struct` is a dictionary:\n    - If yes, create a new dictionary by recursively calling `struct_to_dict` on each value and return the result.\nStep 3. Check if the `struct` is a list or tuple:\n    - If yes, create a new list by recursively calling `struct_to_dict` on each item and return the result.\nStep 4. Check if the `struct` has a `__dict__` attribute:\n    - If yes, call `struct_to_dict` on `struct.__dict__` and return the result.\nStep 5. If none of the above conditions are met, return the `struct` itself."}
{"task_id": "valid/24", "prompt": "def findClosestPalindrome(num):\n    \"\"\"\n    Design a python function that finds the closest palindrome to a given number.\n    \"\"\"\n", "entry_point": "findClosestPalindrome", "canonical_solution": "    num_str = str(num)\n    length = len(num_str)\n    solution = None\n    for i in range(10**length):\n        temp_str = str(i).zfill(length)\n        if temp_str == temp_str[::-1]:\n            diff = abs(i - num)\n            if solution is None or diff < solution[1]:\n                solution = (i, diff)\n    return solution[0]\n", "test": "def check(candidate):\n    assert candidate(123) == 121\n    assert candidate(456) == 454\n    assert candidate(789) == 787", "cot": "How to solve:\nStep 1. Convert the given number to a string.\nStep 2. Initialize a variable to store the solution.\nStep 3. Iterate through a range of numbers up to 10 to the power of the length of the given number.\n    - Convert the current number to a string and pad it with zeros to match the length of the given number.\n    - Check if the padded number is a palindrome.\n    - Calculate the absolute difference between the padded number and the given number.\n    - Update the solution if it's None or if the difference is smaller than the previous solution.\nStep 4. Return the closest palindrome found."}
{"task_id": "valid/25", "prompt": "def sqrt_calc(num):\n    \"\"\"\n    Generate a python program to calculate the square root of a number\n    \"\"\"\n", "entry_point": "sqrt_calc", "canonical_solution": "    return num**0.5\n", "test": "def check(candidate):\n    assert candidate(4) == 2\n    assert candidate(9) == 3\n    assert candidate(16) == 4", "cot": "How to solve:\nStep 1. Define a function sqrt_calc that takes a number as input.\nStep 2. Calculate the square root of the input number using the exponentiation operator ** with 0.5 as the exponent.\nStep 3. Return the calculated square root."}
{"task_id": "valid/26", "prompt": "def matrix_properties(matrix):\n    \"\"\"\n    Design a function that takes in a matrix, finds its number of rows and columns, and calculates the sum of the diagonal elements.\n    Additionally, the function should check if the input matrix is a square matrix or not (i.e.\n    the number of rows is equal to the number of columns).\n    The function should return the number of rows, columns, sum of the diagonal elements, and a boolean indicating if the matrix is square or not.\n    \"\"\"\n", "entry_point": "matrix_properties", "canonical_solution": "\n    rows = len(matrix)\n    cols = len(matrix[0]) if matrix else 0\n    diagonal_sum = sum(matrix[i][i] for i in range(min(rows, cols)))\n    is_square = rows == cols\n    return rows, cols, diagonal_sum, is_square\n", "test": "def check(candidate):\n    assert candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == (3, 3, 15, True)\n    assert candidate([[1, 2], [3, 4], [5, 6]]) == (3, 2, 5, False)\n    assert candidate([[1, 0, 0], [0, 2, 0], [0, 0, 3]]) == (3, 3, 6, True)\n", "cot": "How to solve:\nStep 1. Find the number of rows in the matrix using len(matrix).\nStep 2. Find the number of columns in the matrix using len(matrix[0]) if the matrix is not empty, else set it to 0.\nStep 3. Calculate the sum of the diagonal elements by iterating through the matrix using sum(matrix[i][i] for i in range(min(rows, cols))).\nStep 4. Check if the matrix is square by comparing the number of rows and columns.\nStep 5. Return the number of rows, columns, sum of the diagonal elements, and a boolean indicating if the matrix is square or not."}
{"task_id": "valid/27", "prompt": "import base64\n\n\ndef string_to_base64(string):\n    \"\"\"\n    Convert a string to Base64 encoding.\n    Parameters:\n    string (str): The string to be converted.\n    Returns:\n    str: The Base64 encoding of the given string.\n    \"\"\"\n", "entry_point": "string_to_base64", "canonical_solution": "    string_bytes = string.encode(\"ascii\")\n    base64_bytes = base64.b64encode(string_bytes)\n    base64_string = base64_bytes.decode(\"ascii\")\n    return base64_string\n", "test": "def check(candidate):\n    assert candidate(\"Hello, World!\") == \"SGVsbG8sIFdvcmxkIQ==\"\n    assert candidate(\"12345\") == \"MTIzNDU=\"\n    assert candidate(\"Python is fun!\") == \"UHl0aG9uIGlzIGZ1biE=\"\n    # Additional test cases can be added based on the expected behavior of the function.", "cot": "How to solve:\nStep 1. Encode the input string to ASCII bytes.\nStep 2. Use the base64.b64encode() function to convert the ASCII bytes to Base64 bytes.\nStep 3. Decode the Base64 bytes to a Base64 string using the decode() method.\nStep 4. Return the Base64 string."}
{"task_id": "valid/28", "prompt": "def clean_and_lower_string(s):\n    \"\"\"\n    Devise a programming function to transform a given input string into an equivalent string in lowercase whilst systematically omitting any characters that fall outside of the realm of alphabetical categorization.\n    \"\"\"\n", "entry_point": "clean_and_lower_string", "canonical_solution": "\n    return \"\".join(c.lower() for c in s if c.isalpha())\n", "test": "def check(candidate):\n    assert candidate(\"Hello World!\") == \"helloworld\"\n    assert candidate(\"123abc456\") == \"abc\"\n    assert candidate(\"This is a Test\") == \"thisisatest\"", "cot": "How to solve:\nStep 1. Iterate through each character in the input string.\nStep 2. Check if the character is alphabetical using the isalpha() method.\nStep 3. If the character is alphabetical, convert it to lowercase using the lower() method.\nStep 4. Join the lowercase alphabetical characters together to form the transformed string.\nStep 5. Return the transformed string."}
{"task_id": "valid/29", "prompt": "def find_minimum(lst):\n    \"\"\"\n    Complete the function so that it returns the minimum element in the provided list.\n    \"\"\"\n", "entry_point": "find_minimum", "canonical_solution": "    return min(lst)\n", "test": "def check(candidate):\n    assert candidate([3, 5, 1, 9]) == 1\n    assert candidate([10, 20, 30, 40]) == 10\n    assert candidate([-5, -2, 0, 3, 1]) == -5", "cot": "How to solve:\nStep 1. Use the min() function to find the minimum element in the provided list.\nStep 2. Return the minimum element."}
{"task_id": "valid/30", "prompt": "import json\n\n\ndef validate_key_value(json_data, key, value):\n    \"\"\"\n    Validate if a specific key-value pair does not exist in a JSON dictionary.\n\n    Parameters:\n    json_data (str or dict): The JSON data either as a string or a Python dictionary.\n    key (str): The key to be checked in the JSON dictionary.\n    value (any): The value to be checked against the given key in the JSON dictionary.\n\n    Returns:\n    bool: True if the key-value pair does not exist in the JSON dictionary, False otherwise.\n    \"\"\"\n", "entry_point": "validate_key_value", "canonical_solution": "    if isinstance(json_data, str):\n        json_data = json.loads(json_data)\n\n    return key not in json_data or json_data[key] != value\n", "test": "def check(candidate):\n    # Test case where the key-value pair does not exist in the JSON dictionary\n    assert candidate('{\"name\": \"Alice\", \"age\": 30}', 'city', 'New York') == True\n    \n    # Test case where the key-value pair exists in the JSON dictionary with a different value\n    assert candidate('{\"name\": \"Bob\", \"age\": 25}', 'name', 'Alice') == True\n    \n    # Test case where the key-value pair exists in the JSON dictionary with the correct value\n    assert candidate('{\"name\": \"Charlie\", \"age\": 35}', 'name', 'Charlie') == False", "cot": "How to solve:\nStep 1. Check if the input json_data is a string, if so, convert it to a dictionary using json.loads().\nStep 2. Check if the key exists in the JSON dictionary and if its value matches the given value.\nStep 3. Return True if the key-value pair does not exist in the JSON dictionary, otherwise return False."}
{"task_id": "valid/31", "prompt": "def _make_button_table(buttons, num_columns):\n    \"\"\"\n    You are tasked with creating a Python function that generates a table of buttons based on a given list of buttons and the number of columns to display.\n    Each button should trigger a specific action when clicked.\n    Your task is to implement the `_make_button_table` function, which takes in two parameters:\n    \"\"\"\n", "entry_point": "_make_button_table", "canonical_solution": "\n    table = \"<table>\"\n    for i in range(0, len(buttons), num_columns):\n        table += \"<tr>\"\n        for j in range(num_columns):\n            if i + j < len(buttons):\n                table += f\"<td><button onclick='buttonClicked({i + j})'>{buttons[i + j]}</button></td>\"\n        table += \"</tr>\"\n    table += \"</table>\"\n    return table\n", "test": "def check(candidate):\n    assert candidate([\"A\", \"B\", \"C\", \"D\"], 2) == \"<table><tr><td><button onclick='buttonClicked(0)'>A</button></td><td><button onclick='buttonClicked(1)'>B</button></td></tr><tr><td><button onclick='buttonClicked(2)'>C</button></td><td><button onclick='buttonClicked(3)'>D</button></td></tr></table>\"\n    assert candidate([\"X\", \"Y\", \"Z\"], 3) == \"<table><tr><td><button onclick='buttonClicked(0)'>X</button></td><td><button onclick='buttonClicked(1)'>Y</button></td><td><button onclick='buttonClicked(2)'>Z</button></td></tr></table>\"\n    assert candidate([\"1\", \"2\", \"3\", \"4\", \"5\", \"6\"], 4) == \"<table><tr><td><button onclick='buttonClicked(0)'>1</button></td><td><button onclick='buttonClicked(1)'>2</button></td><td><button onclick='buttonClicked(2)'>3</button></td><td><button onclick='buttonClicked(3)'>4</button></td></tr><tr><td><button onclick='buttonClicked(4)'>5</button></td><td><button onclick='buttonClicked(5)'>6</button></td></tr></table>\"", "cot": "How to solve:\nStep 1. Initialize an empty string 'table' with \"<table>\".\nStep 2. Iterate through the buttons list in steps of 'num_columns'.\n    - For each iteration, add a new row \"<tr>\" to the 'table'.\n    - Iterate through the current row's buttons.\n        - Add a cell \"<td>\" with a button that triggers 'buttonClicked' function and displays the button label.\n    - Close the row with \"</tr>\".\nStep 3. Close the table with \"</table>\" and return the 'table' string."}
{"task_id": "valid/32", "prompt": "def check_alphabet_order(s):\n    \"\"\"\n    Check if a given string contains all the alphabets in a specific order.\n    The alphabets must appear consecutively and in the same order as they do in the English alphabet.\n    \"\"\"\n", "entry_point": "check_alphabet_order", "canonical_solution": "    s = s.lower()\n    expected_char = \"a\"\n    for char in s:\n        if char == expected_char:\n            expected_char = chr(ord(expected_char) + 1)\n\n        if expected_char == \"z\":\n            return True\n\n    return False\n", "test": "def check(candidate):\n    assert candidate(\"abcdefghijklmnopqrstuvwxyz\") == True\n    assert candidate(\"abcde\") == False\n    assert candidate(\"abdefghijklmnopqrstuvwxyz\") == False", "cot": "How to solve:\nStep 1. Convert the input string to lowercase.\nStep 2. Initialize the expected character as 'a'.\nStep 3. Iterate through each character in the string.\n    - If the character matches the expected character, update the expected character to the next alphabet.\n    - If the expected character reaches 'z', return True.\nStep 4. If the loop completes without returning True, return False."}
{"task_id": "valid/33", "prompt": "def larger_num(a, b):\n    \"\"\"\n    Write a function in Python that receives two numbers as parameters and returns the larger one\n    \"\"\"\n", "entry_point": "larger_num", "canonical_solution": "    if a > b:\n        return a\n    else:\n        return b\n", "test": "def check(candidate):\n    assert candidate(5, 3) == 5\n    assert candidate(10, 10) == 10\n    assert candidate(-2, -5) == -2", "cot": "How to solve:\nStep 1. Define a function named larger_num that takes two parameters a and b.\nStep 2. Use an if-else statement to compare a and b.\n    - If a is greater than b, return a.\n    - Otherwise, return b."}
{"task_id": "valid/34", "prompt": "def sum_numeric_substrings(ts: str) -> int:\n    \"\"\"\n    You are given a string `ts` containing a mix of alphabetic characters and digits.\n    Your task is to write a function that extracts all the numeric substrings from the input string and returns the sum of these numeric values.\n    \"\"\"\n", "entry_point": "sum_numeric_substrings", "canonical_solution": "\n    from string import ascii_lowercase\n\n    res = set()\n    cur = []\n    for c in ts:\n        if c in ascii_lowercase:\n            if cur:\n                s = \"\".join(cur)\n                res.add(int(s))\n                cur = []\n        else:\n            cur.append(c)\n    if cur:\n        s = \"\".join(cur)\n        res.add(int(s))\n    return sum(res)\n", "test": "def check(candidate):\n    assert candidate(\"abc123def456\") == 579\n    assert candidate(\"1a2b3c4d5e\") == 15\n    assert candidate(\"abc\") == 0", "cot": "How to solve:\nStep 1. Initialize an empty set 'res' to store unique numeric substrings.\nStep 2. Initialize an empty list 'cur' to store the current numeric substring being processed.\nStep 3. Iterate through each character 'c' in the input string 'ts'.\n    - If 'c' is an alphabetic character, convert 'cur' to a string and add it to 'res' if 'cur' is not empty, then reset 'cur' to an empty list.\n    - If 'c' is a digit, append it to 'cur'.\nStep 4. After the loop, convert the remaining 'cur' to a string and add it to 'res' if 'cur' is not empty.\nStep 5. Return the sum of the unique numeric substrings in 'res'."}
{"task_id": "valid/35", "prompt": "def convert_last_to_upper(words):\n    \"\"\"\n    Craft a Python function that takes in a list of singular lower-cased English nouns, and it yields a altered list in which the final alphabetic character of each entry is converted to its upper-case equivalent.\n    \"\"\"\n", "entry_point": "convert_last_to_upper", "canonical_solution": "\n    return [word[:-1] + word[-1].upper() for word in words]\n", "test": "def check(candidate):\n    assert candidate(['apple', 'banana', 'orange']) == ['applE', 'bananA', 'orangE']\n    assert candidate(['cat', 'dog', 'bird']) == ['caT', 'doG', 'birD']\n    assert candidate(['book', 'pen', 'paper']) == ['booK', 'peN', 'papeR']", "cot": "How to solve:\nStep 1. Define a function that takes a list of singular lower-cased English nouns as input.\nStep 2. Use list comprehension to iterate through each word in the input list.\nStep 3. For each word, concatenate all characters except the last one with the upper-cased version of the last character.\nStep 4. Return the altered list of words."}
{"task_id": "valid/36", "prompt": "def validate_and_add(arr):\n    \"\"\"\n    Develop a Python function that not only computes the addition of all elements within an assigned array, but also validates the array to ensure that it only contains numerical values.\n    The array for this task is denoted as follows:\n    \"\"\"\n", "entry_point": "validate_and_add", "canonical_solution": "\n    if all(isinstance(i, (int, float)) for i in arr):\n        return sum(arr)\n    else:\n        return \"Array contains non-numerical values.\"\n", "test": "def check(candidate):\n    assert candidate([1, 2, 3]) == 6\n    assert candidate([4, 5, 6, 7]) == 22\n    assert candidate([1, 2, 'a', 3]) == \"Array contains non-numerical values.\"\n", "cot": "How to solve:\nStep 1. Check if all elements in the array are of type int or float using isinstance() and all().\nStep 2. If all elements are numerical, return the sum of the array.\nStep 3. If any element is non-numerical, return \"Array contains non-numerical values\"."}
{"task_id": "valid/37", "prompt": "import json\n\n\ndef sort_neighborhoods(json_data):\n    \"\"\"\n    You are tasked with creating a program that processes a JSON file containing information about various neighborhoods.\n    Each neighborhood entry in the JSON file contains a \"name\" field, which represents the name of the neighborhood.\n    Your task is to write a function that takes the JSON data as input and returns a list of neighborhood names sorted in alphabetical order.\n    \"\"\"\n", "entry_point": "sort_neighborhoods", "canonical_solution": "\n    neighborhood_names = [neighborhood[\"name\"] for neighborhood in json_data]\n    sorted_names = sorted(neighborhood_names)\n    return sorted_names\n", "test": "def check(candidate):\n    # Test case with unsorted neighborhood names\n    assert candidate([\n        {\"name\": \"B\"},\n        {\"name\": \"A\"},\n        {\"name\": \"C\"}\n    ]) == [\"A\", \"B\", \"C\"]\n    \n    # Test case with sorted neighborhood names\n    assert candidate([\n        {\"name\": \"A\"},\n        {\"name\": \"B\"},\n        {\"name\": \"C\"}\n    ]) == [\"A\", \"B\", \"C\"]\n    \n    # Test case with neighborhood names containing special characters\n    assert candidate([\n        {\"name\": \"C\"},\n        {\"name\": \"A&B\"},\n        {\"name\": \"D\"}\n    ]) == [\"A&B\", \"C\", \"D\"]\n", "cot": "How to solve:\nStep 1. Extract the \"name\" field from each neighborhood entry in the JSON data.\nStep 2. Store the extracted names in a list.\nStep 3. Sort the list of neighborhood names in alphabetical order.\nStep 4. Return the sorted list of neighborhood names."}
{"task_id": "valid/38", "prompt": "def minAbsSumPair(arr, n):\n    \"\"\"\n    Create a python program to carry out the following tasks:\n    \"\"\"\n", "entry_point": "minAbsSumPair", "canonical_solution": "\n    arr = sorted(arr)\n    l = 0\n    r = n - 1\n    min_sum = 99999999999\n    min_l = l\n    min_r = n\n    while l < r:\n        sum = arr[l] + arr[r]\n        if abs(sum) < abs(min_sum):\n            min_sum = sum\n            min_l = l\n            min_r = r\n        if sum < 0:\n            l += 1\n        else:\n            r -= 1\n    return (arr[min_l], arr[min_r])\n", "test": "def check(candidate):\n    assert candidate([1, 3, -5, 7, 8, 20, -40, 6], 8) == (-5, 6)\n    assert candidate([10, 20, 30, 40, 50, 60, 70, 80, 90], 9) == (10, 20)\n    assert candidate([-10, -5, -3, 0, 5, 7, 9, 12], 8) == (-5, 5)\n", "cot": "How to solve:\nStep 1. Sort the input array 'arr'.\nStep 2. Initialize two pointers 'l' and 'r' at the start and end of the array respectively.\nStep 3. Initialize 'min_sum' to a large value, and 'min_l' and 'min_r' to the initial positions of 'l' and 'r'.\nStep 4. While 'l' is less than 'r', calculate the sum of elements at 'l' and 'r'.\nStep 5. If the absolute value of the sum is less than the absolute value of 'min_sum', update 'min_sum', 'min_l', and 'min_r'.\nStep 6. If the sum is negative, increment 'l'; otherwise, decrement 'r'.\nStep 7. Return the pair of elements at 'min_l' and 'min_r' as the result."}
{"task_id": "valid/39", "prompt": "def evaluate_parentheses(p):\n    \"\"\"\n    Create a function to evaluate a string of parentheses.\n    \"\"\"\n", "entry_point": "evaluate_parentheses", "canonical_solution": "    stack = []\n    for char in p:\n\n        if char == \"(\":\n            stack.append(char)\n\n        elif char == \")\":\n            stack.pop()\n\n    if len(stack) == 0:\n        return True\n    else:\n        return False\n", "test": "def check(candidate):\n    assert candidate(\"((()))\") == True\n    assert candidate(\"()()()\") == True\n    assert candidate(\"(()\") == False", "cot": "How to solve:\nStep 1. Create an empty stack.\nStep 2. Iterate through each character in the input string.\n    - If the character is '(', push it onto the stack.\n    - If the character is ')', pop from the stack.\nStep 3. After iterating through the string, if the stack is empty, return True (all parentheses are balanced).\n    - Otherwise, return False (unbalanced parentheses)."}
{"task_id": "valid/40", "prompt": "def calculate_election_results(votes):\n    \"\"\"\n    Create a program that outputs the results of an election.\n    Each candidate's name must be a string consisting of only uppercase letters, with a maximum length of 10 characters.\n    The number of votes for each candidate must be a positive integer not exceeding 1000.\n    The total number of votes must be at least 100.\n    The program should handle a list of votes, where each vote is represented as a tuple in the format (candidate_name, number_of_votes).\n    The output should be a dictionary containing the candidate names as keys and their corresponding vote counts as values.\n    Additionally, the program should calculate and display the percentage of votes each candidate received, rounded to two decimal places.\n    \"\"\"\n", "entry_point": "calculate_election_results", "canonical_solution": "    results = {}\n    total_votes = 0\n    for vote in votes:\n        total_votes += vote[1]\n    if total_votes < 100:\n        print(\"Error: Total number of votes must be at least 100.\")\n        return None\n    for vote in votes:\n        candidate_name = vote[0]\n        number_of_votes = vote[1]\n        percentage = (number_of_votes / total_votes) * 100\n        percentage = round(percentage, 2)\n        results[candidate_name] = {\"votes\": number_of_votes, \"percentage\": percentage}\n    return results\n", "test": "def check(candidate):\n    assert candidate([(\"A\", 200), (\"B\", 300), (\"C\", 500)]) == {'A': {'votes': 200, 'percentage': 20.0}, 'B': {'votes': 300, 'percentage': 30.0}, 'C': {'votes': 500, 'percentage': 50.0}}\n    assert candidate([(\"X\", 1000), (\"Y\", 500)]) == {'X': {'votes': 1000, 'percentage': 66.67}, 'Y': {'votes': 500, 'percentage': 33.33}}\n    assert candidate([(\"ABCD\", 400), (\"EFGH\", 600)]) == {'ABCD': {'votes': 400, 'percentage': 40.0}, 'EFGH': {'votes': 600, 'percentage': 60.0}}", "cot": "How to solve:\nStep 1. Initialize an empty dictionary called results and a variable total_votes as 0.\nStep 2. Iterate through the votes list and sum up the total number of votes.\nStep 3. If the total_votes is less than 100, print an error message and return None.\nStep 4. Iterate through the votes list again.\n    - For each vote, calculate the percentage of votes received by the candidate and round it to two decimal places.\n    - Add the candidate's name, number of votes, and percentage to the results dictionary.\nStep 5. Return the results dictionary."}
{"task_id": "valid/41", "prompt": "from datetime import datetime\n\n\ndef date_analyzer(date_string):\n    \"\"\"\n    Develop a function capable of parsing and analyzing dates adhering to the DD-MM-YYYY format and the DD-MMM-YYYY (where MMM signifies written months).\n    The function should not only be able to parse these dates but should also validate them for feasibility (e.g., disallow dates like 30-Feb-2000 or 31-Apr-2022).\n    If the date is valid, the function should display it in a standardized format (e.g., January 01, 2018); if not, it should raise an appropriate error.\n    \"\"\"\n", "entry_point": "date_analyzer", "canonical_solution": "\n    try:\n        date = datetime.strptime(date_string, \"%d %b %Y\")\n    except ValueError:\n        try:\n            date = datetime.strptime(date_string, \"%d-%m-%Y\")\n        except ValueError:\n            return \"Error: invalid format.\"\n        else:\n            return datetime.strftime(date, \"%A, %B %d, %Y\")\n    else:\n        return datetime.strftime(date, \"%A, %B %d, %Y\")\n", "test": "def check(candidate):\n    assert candidate(\"01 Jan 2022\") == \"Saturday, January 01, 2022\"\n    assert candidate(\"31-04-2022\") == \"Error: invalid format.\"\n    assert candidate(\"30 Feb 2000\") == \"Error: invalid format.\"\n", "cot": "How to solve:\nStep 1. Define a function date_analyzer that takes a date_string as input.\nStep 2. Try to parse the date_string using the format \"%d %b %Y\" (e.g., 01 Jan 2022).\n    - If successful, return the date in the format \"%A, %B %d, %Y\" (e.g., Monday, January 01, 2022).\n    - If not successful, move to the next step.\nStep 3. Try to parse the date_string using the format \"%d-%m-%Y\" (e.g., 01-01-2022).\n    - If successful, return the date in the format \"%A, %B %d, %Y\" (e.g., Monday, January 01, 2022).\n    - If not successful, return \"Error: invalid format.\"\nStep 4. End of the function."}
{"task_id": "valid/42", "prompt": "def is_rename_allowed(oldname, newname, allowed_type):\n    \"\"\"\n    You are tasked with implementing a file renaming utility that checks if the new file name has a valid file extension before renaming the file.\n    The utility should only allow renaming if the new file name has a valid extension based on a predefined list of allowed file types.\n    \"\"\"\n", "entry_point": "is_rename_allowed", "canonical_solution": "\n    if oldname != \"\" and newname.split(\".\")[-1] in allowed_type:\n        return True\n    else:\n        return False\n", "test": "def check(candidate):\n    assert candidate(\"oldfile.txt\", \"newfile.txt\", [\"txt\", \"pdf\", \"docx\"]) == True\n    assert candidate(\"oldfile.txt\", \"newfile.docx\", [\"txt\", \"pdf\", \"docx\"]) == True\n    assert candidate(\"oldfile.txt\", \"newfile.jpg\", [\"txt\", \"pdf\", \"docx\"]) == False\n", "cot": "How to solve:\nStep 1. Check if the oldname is not empty and the extension of the newname is in the allowed_type list.\nStep 2. If the conditions are met, return True; otherwise, return False."}
{"task_id": "valid/43", "prompt": "def remove_uneven(lst):\n    \"\"\"\n    Write a function to remove uneven elements in the nested mixed tuple.\n    Additionally, the function should also be able to handle tuples within tuples and remove uneven elements from them as well.\n    The function should also be able to handle a mix of integers, floats, and strings.\n    If a string is numeric and even, it should be kept.\n    If it's not numeric or not even, it should be removed.\n    \"\"\"\n", "entry_point": "remove_uneven", "canonical_solution": "\n    new_lst = []\n    for i in lst:\n        if type(i) == tuple:\n            new_lst.append(remove_uneven(i))\n        elif type(i) == str:\n            if i.isdigit() and int(i) % 2 == 0:\n                new_lst.append(i)\n        elif type(i) in (int, float) and i % 2 == 0:\n            new_lst.append(i)\n    return tuple(new_lst)\n", "test": "def check(candidate):\n    assert candidate((1, 2, 3, 4, 5)) == (2, 4)\n    assert candidate((1, (2, 3, 4), 5)) == ((2, 4),)\n    assert candidate((\"2\", 3, \"4\", 5)) == (\"2\", \"4\")\n", "cot": "How to solve:\nStep 1. Create an empty list new_lst.\nStep 2. Iterate through the input list.\n    - If the element is a tuple, recursively call the function remove_uneven on the tuple and append the result to new_lst.\n    - If the element is a string, check if it's numeric and even, then append it to new_lst.\n    - If the element is an integer or float, check if it's even, then append it to new_lst.\nStep 3. Return the tuple of new_lst."}
{"task_id": "valid/44", "prompt": "def hours_to_minutes(hours):\n    \"\"\"\n    Generate a function to convert hours to minutes.\n    \"\"\"\n", "entry_point": "hours_to_minutes", "canonical_solution": "    return hours * 60\n", "test": "def check(candidate):\n    assert candidate(2) == 120\n    assert candidate(3) == 180\n    assert candidate(1) == 60", "cot": "How to solve:\nStep 1. Define a function hours_to_minutes that takes hours as input.\nStep 2. Multiply the input hours by 60 to convert to minutes.\nStep 3. Return the result of the multiplication."}
{"task_id": "valid/45", "prompt": "def count_specific_characters(string, specific_character):\n    \"\"\"\n    How do you count the number of specific characters in a given string, considering both uppercase and lowercase characters as separate entities?\n    \"\"\"\n", "entry_point": "count_specific_characters", "canonical_solution": "    count = 0\n    string = string.lower()\n    for char in string:\n        if char == specific_character.lower():\n            count += 1\n    return count\n", "test": "def check(candidate):\n    assert candidate(\"Hello World\", \"o\") == 2\n    assert candidate(\"Programming is fun\", \"i\") == 3\n    assert candidate(\"Python is awesome\", \"z\") == 0\n\n### Repaired Test Cases(starts with def check(candidate):):\ndef check(candidate):\n    assert candidate(\"Hello World\", \"o\") == 2\n    assert candidate(\"Programming is fun\", \"i\") == 2  # Corrected from 3 to 2\n    assert candidate(\"Python is awesome\", \"z\") == 0", "cot": "How to solve:\nStep 1. Initialize count as 0.\nStep 2. Convert the input string to lowercase.\nStep 3. Iterate through each character in the lowercase string.\n    - If the lowercase character matches the lowercase specific character, increment the count.\nStep 4. Return the count of specific characters."}
{"task_id": "valid/46", "prompt": "def add_accuracy_to_histogram(histogram_data, generation, accs):\n    \"\"\"\n    You are tasked with implementing a logging system for a machine learning model training process.\n    The system should record the accuracy of the model at different generations and store this information in a histogram.\n    However, the current code contains a commented-out line that adds the accuracy data to the histogram.\n    Your goal is to create a function that takes the accuracy data and generation number as input and returns the histogram data with the accuracy values added.\n    \"\"\"\n", "entry_point": "add_accuracy_to_histogram", "canonical_solution": "\n    if generation in histogram_data:\n        histogram_data[generation].extend(accs)\n    else:\n        histogram_data[generation] = accs\n    return histogram_data\n", "test": "def check(candidate):\n    assert candidate({}, 1, [0.8, 0.9]) == {1: [0.8, 0.9]}\n    assert candidate({1: [0.7]}, 1, [0.8, 0.9]) == {1: [0.7, 0.8, 0.9]}\n    assert candidate({1: [0.7]}, 2, [0.8, 0.9]) == {1: [0.7], 2: [0.8, 0.9]}", "cot": "How to solve:\nStep 1. Check if the generation exists in the histogram data.\n    - If yes, extend the accuracy values to the existing generation.\n    - If no, add the accuracy values to the histogram data for the given generation.\nStep 2. Return the updated histogram data."}
{"task_id": "valid/47", "prompt": "import re\n\n\ndef match_five_alphanumeric(string):\n    \"\"\"\n    Check if a string consists of exactly five alphanumeric characters.\n    Arguments:\n    - string: The string to be checked.\n    Returns:\n    - True if the string matches the criteria, False otherwise.\n    \"\"\"\n", "entry_point": "match_five_alphanumeric", "canonical_solution": "    pattern = r\"^[a-zA-Z0-9]{5}$\"\n    return re.match(pattern, string) is not None\n", "test": "def check(candidate):\n    assert candidate(\"abc12\") == True\n    assert candidate(\"12345\") == True\n    assert candidate(\"abc123\") == False", "cot": "How to solve:\nStep 1. Define a function match_five_alphanumeric that takes a string as input.\nStep 2. Define a regular expression pattern that matches exactly five alphanumeric characters: ^[a-zA-Z0-9]{5}$.\nStep 3. Use the re.match function to check if the input string matches the defined pattern.\nStep 4. Return True if the match is not None, indicating that the string matches the criteria. Otherwise, return False."}
{"task_id": "valid/48", "prompt": "from typing import List\n\n\ndef count_unique_languages(classifiers: List[str]) -> int:\n    \"\"\"\n    You are tasked with creating a Python function that processes a list of classifiers and returns the count of unique programming languages specified in the classifiers.\n    Each classifier is a string representing a programming language and its version.\n    The function should ignore any classifiers that do not match the format \"Programming Language :: <language> :: <version>\".\n    \"\"\"\n", "entry_point": "count_unique_languages", "canonical_solution": "\n    unique_languages = set()\n    for classifier in classifiers:\n        if classifier.startswith(\"Programming Language ::\"):\n            parts = classifier.split(\" :: \")\n            if len(parts) == 3:\n                language = parts[1]\n                unique_languages.add(language)\n    return len(unique_languages)\n", "test": "def check(candidate):\n    assert candidate([\"Programming Language :: Python :: 3.8\", \"Programming Language :: Java :: 11\", \"Programming Language :: C++ :: 17\"]) == 3\n    assert candidate([\"Programming Language :: Python :: 3.8\", \"Programming Language :: Python :: 3.7\", \"Programming Language :: Java :: 11\"]) == 2\n    assert candidate([\"Programming Language :: C++ :: 17\", \"Programming Language :: Java :: 11\", \"Programming Language :: JavaScript :: 6\"]) == 3\n", "cot": "How to solve:\nStep 1. Create an empty set to store unique languages.\nStep 2. Iterate through the list of classifiers.\n    - Check if the classifier starts with \"Programming Language ::\".\n    - Split the classifier by \" :: \".\n    - If the split results in 3 parts, extract the language and add it to the set of unique languages.\nStep 3. Return the length of the set of unique languages."}
{"task_id": "valid/49", "prompt": "def arrayInstanceCount(arr):\n    \"\"\"\n    Construct an algorithm that takes a two-dimensional array as an input and returns an array containing the count of instances of each number in the initial array.\n    \"\"\"\n", "entry_point": "arrayInstanceCount", "canonical_solution": "    res = {}\n    for row in arr:\n        for elem in row:\n            res[elem] = res.get(elem, 0) + 1\n    return res\n", "test": "def check(candidate):\n    assert candidate([[1, 2, 3], [4, 5, 6], [1, 2, 3]]) == {1: 2, 2: 2, 3: 2, 4: 1, 5: 1, 6: 1}\n    assert candidate([[1, 1, 1], [2, 2, 2], [3, 3, 3]]) == {1: 3, 2: 3, 3: 3}\n    assert candidate([[1, 2], [3, 4], [5, 6]]) == {1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1}", "cot": "How to solve:\nStep 1. Initialize an empty dictionary res to store the count of instances of each number.\nStep 2. Iterate through the two-dimensional array.\nStep 3. For each element in the array, update the count in the dictionary res using the element as the key and incrementing the count by 1.\nStep 4. Return the dictionary res containing the count of instances of each number in the initial array."}
{"task_id": "valid/50", "prompt": "import re\n\n\ndef match_url_to_view(url):\n    \"\"\"\n    You are tasked with creating a URL routing system for a video competition website using Python's Django framework.\n    The provided code snippet is a part of the URL configuration for the website.\n    The `urlpatterns` list contains two URL patterns, each associated with a specific view function.\n    \"\"\"\n", "entry_point": "match_url_to_view", "canonical_solution": "\n    patterns = [\n        (r\"^(\\w+)/(\\d+)$\", \"get_video_by_competition\"),\n        (r\"^add/\", \"add_video_by_competition\"),\n    ]\n    for pattern, view in patterns:\n        if re.match(pattern, url):\n            return view\n    return \"Not Found\"\n", "test": "def check(candidate):\n    assert candidate(\"football/123\") == \"get_video_by_competition\"\n    assert candidate(\"add/\") == \"add_video_by_competition\"\n    assert candidate(\"random/\") == \"Not Found\"\n", "cot": "How to solve:\nStep 1. Define a function match_url_to_view that takes a URL as input.\nStep 2. Create a list of URL patterns and associated view functions.\nStep 3. Iterate through the patterns list.\n    - Use re.match to check if the URL matches the pattern.\n    - If there is a match, return the associated view function.\nStep 4. If no match is found, return \"Not Found\"."}
{"task_id": "valid/51", "prompt": "def insert_at_position(list, item, position):\n    \"\"\"\n    Create an editor to insert an item at a given position in a given list.\n    \"\"\"\n", "entry_point": "insert_at_position", "canonical_solution": "    new_list = list[:]\n    new_list.insert(position, item)\n    return new_list\n", "test": "def check(candidate):\n    assert candidate([1, 2, 3], 4, 1) == [1, 4, 2, 3]\n    assert candidate(['a', 'b', 'c'], 'd', 0) == ['d', 'a', 'b', 'c']\n    assert candidate([], 'x', 0) == ['x']", "cot": "How to solve:\nStep 1. Create a new list by copying the original list.\nStep 2. Insert the given item at the specified position in the new list.\nStep 3. Return the new list."}
{"task_id": "valid/52", "prompt": "def concatenate_string_with_sentence():\n    \"\"\"\n    Concatenates a string with a sentence.\n    Returns:\n    - The concatenated string.\n    \"\"\"\n", "entry_point": "concatenate_string_with_sentence", "canonical_solution": "    string = \"Hello\"\n    sentence = \"How are you today?\"\n    concatenated_string = string + \" \" + sentence\n    return concatenated_string\n", "test": "def check(candidate):\n    assert candidate() == \"Hello How are you today?\"\n    assert candidate() == \"Hello How are you today?\"\n    assert candidate() == \"Hello How are you today?\"", "cot": "How to solve:\nStep 1. Define a function that concatenates a string with a sentence.\nStep 2. Initialize a string variable with \"Hello\" and a sentence variable with \"How are you today?\".\nStep 3. Concatenate the string and sentence with a space in between.\nStep 4. Return the concatenated string."}
{"task_id": "valid/53", "prompt": "def find_substrings(s):\n    \"\"\"\n    Optimize the following code to improve the running time.\n    \"\"\"\n", "entry_point": "find_substrings", "canonical_solution": "    n = len(s)\n    substrings = []\n    for i in range(n):\n        start = i\n        end = i\n        while end < n:\n            substrings.append(s[start : end + 1])\n            end += 1\n    return substrings\n", "test": "def check(candidate):\n    assert candidate(\"hello\") == ['h', 'he', 'hel', 'hell', 'hello', 'e', 'el', 'ell', 'ello', 'l', 'll', 'llo', 'l', 'lo', 'o']\n    assert candidate(\"abc\") == ['a', 'ab', 'abc', 'b', 'bc', 'c']\n    assert candidate(\"12345\") == ['1', '12', '123', '1234', '12345', '2', '23', '234', '2345', '3', '34', '345', '4', '45', '5']", "cot": "How to solve:\nStep 1. Initialize an empty list for substrings.\nStep 2. Iterate through the string indices.\nStep 3. Within the loop, iterate through the end index from the current start index to the end of the string.\nStep 4. Append the substring from the start index to the end index to the list of substrings.\nStep 5. Return the list of substrings.\n\nOptimization:\n- Instead of iterating through the end index in a nested loop, use slicing to directly extract the substrings from the string. This will significantly improve the running time."}
{"task_id": "valid/54", "prompt": "def calculate_price_sum(list_of_dicts):\n    \"\"\"\n    Calculate the aggregated sum of the price values across multiple lists of dictionaries.\n    These lists may not only contain \"price\" as the key, but also \"price_1\", \"price_2\" up to \"price_n\".\n    However, these price keys may skip some digits (e.g., there may be a key \"price_1\" and \"price_3\", but no \"price_2\").\n\n    \"\"\"\n", "entry_point": "calculate_price_sum", "canonical_solution": "\n    total = 0\n    for dictionary in list_of_dicts:\n        for key, value in dictionary.items():\n            if key.startswith(\"price\"):\n                total += value\n    return total\n", "test": "def check(candidate):\n    assert candidate([{\"price\": 10}, {\"price_1\": 20}, {\"price_2\": 30}]) == 60\n    assert candidate([{\"price_1\": 10}, {\"price_3\": 20}, {\"price_5\": 30}]) == 60\n    assert candidate([{\"price_1\": 10}, {\"price_2\": 20}, {\"price_3\": 30}]) == 60\n", "cot": "How to solve:\nStep 1. Initialize total as 0.\nStep 2. Iterate through each dictionary in list_of_dicts.\nStep 3. Iterate through key-value pairs in the dictionary.\n    - If the key starts with \"price\", add the value to the total.\nStep 4. Return the total."}
{"task_id": "valid/55", "prompt": "def find_intersection_and_remove(list1, list2):\n    \"\"\"Find the intersection between two lists and remove common elements from the second list.\n    Args:\n        list1 (list): The first list.\n        list2 (list): The second list.\n    Returns:\n        list: The intersection between the two lists, with common elements removed from the second list.\n    Examples:\n        >>> list1 = [1, 2, 3, 4, 5]\n        >>> list2 = [3, 4, 5, 6, 7]\n        >>> find_intersection_and_remove(list1, list2)\n        [3, 4, 5]\n    \"\"\"\n", "entry_point": "find_intersection_and_remove", "canonical_solution": "    intersection = list(set(list1) & set(list2))\n    list2 = [value for value in list2 if value not in intersection]\n    return intersection\n", "test": "def check(candidate):\n    assert candidate([1, 2, 3, 4, 5], [3, 4, 5, 6, 7]) == [3, 4, 5]\n    assert candidate([1, 2, 3, 4, 5], [6, 7, 8, 9, 10]) == []\n    assert candidate([1, 2, 3, 4, 5], [1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]", "cot": "How to solve:\nStep 1. Find the intersection of list1 and list2 using set intersection.\nStep 2. Remove common elements from list2 using list comprehension.\nStep 3. Return the intersection list."}
{"task_id": "valid/56", "prompt": "def route_request(request_method):\n    \"\"\"\n    You are tasked with implementing a simple API routing system for a web application.\n    The application has two endpoints: `api_advisor_view` and `api_advisor_view_post`.\n    Your goal is to create a function that can match incoming API requests to the appropriate endpoint handler based on the request method (GET or POST).\n    \"\"\"\n", "entry_point": "route_request", "canonical_solution": "\n    endpoints = [\n        \"api_advisor_view\",\n        \"api_advisor_view_post\",\n    ]\n\n    if request_method == \"GET\":\n        return (\n            \"api_advisor_view\" if \"api_advisor_view\" in endpoints else \"404 Not Found\"\n        )\n    elif request_method == \"POST\":\n        return (\n            \"api_advisor_view_post\"\n            if \"api_advisor_view_post\" in endpoints\n            else \"404 Not Found\"\n        )\n    else:\n        return \"404 Not Found\"\n", "test": "def check(candidate):\n    assert candidate(\"GET\") == \"api_advisor_view\"\n    assert candidate(\"POST\") == \"api_advisor_view_post\"\n    assert candidate(\"PUT\") == \"404 Not Found\"", "cot": "How to solve:\nStep 1. Define a function route_request that takes request_method as input.\nStep 2. Create a list of endpoints containing \"api_advisor_view\" and \"api_advisor_view_post\".\nStep 3. If request_method is \"GET\", return \"api_advisor_view\" if it's in endpoints, else return \"404 Not Found\".\nStep 4. If request_method is \"POST\", return \"api_advisor_view_post\" if it's in endpoints, else return \"404 Not Found\".\nStep 5. If request_method is neither \"GET\" nor \"POST\", return \"404 Not Found\"."}
{"task_id": "valid/57", "prompt": "def gcd_recursive(a, b):\n    \"\"\"\n    Calculate the Greatest Common Divisor (GCD) of two positive integers using recursive algorithm.\n    Args:\n        a (int): The first positive integer.\n        b (int): The second positive integer.\n    Returns:\n        int: The GCD of the given integers.\n    Raises:\n        ValueError: If either `a` or `b` is not a positive integer.\n    \"\"\"\n", "entry_point": "gcd_recursive", "canonical_solution": "    if a == 0:\n        return b\n    if b == 0:\n        return a\n    if a > b:\n        return gcd_recursive(a % b, b)\n    else:\n        return gcd_recursive(a, b % a)\n", "test": "def check(candidate):\n    assert candidate(12, 18) == 6\n    assert candidate(25, 5) == 5\n    assert candidate(81, 27) == 27", "cot": "How to solve:\nStep 1. Define a function to calculate the Greatest Common Divisor (GCD) of two positive integers using a recursive algorithm.\nStep 2. Check if either `a` or `b` is not a positive integer, raise a ValueError.\nStep 3. If a is 0, return b. If b is 0, return a.\nStep 4. If a is greater than b, call the function recursively with parameters (a % b, b).\nStep 5. If b is greater than a, call the function recursively with parameters (a, b % a).\nStep 6. The base case is when one of the numbers becomes 0, return the other number as the GCD."}
{"task_id": "valid/58", "prompt": "def categorize_config_files(file_paths):\n    \"\"\"\n    You are working on a configuration management system for a large infrastructure.\n    The system has a directory structure with various configuration files.\n    Your task is to write a Python function that categorizes the configuration files based on their location within the directory structure.\n    \"\"\"\n", "entry_point": "categorize_config_files", "canonical_solution": "\n    outages_config_files = set()\n    generated_config_files = set()\n    other_config_files = set()\n    for file_path in file_paths:\n        if file_path.startswith(\"infra/config/outages\"):\n            outages_config_files.add(file_path)\n        elif file_path.startswith(\"infra/config/generated\"):\n            generated_config_files.add(file_path)\n        else:\n            other_config_files.add(file_path)\n    return outages_config_files, generated_config_files, other_config_files\n", "test": "def check(candidate):\n    assert candidate([\"infra/config/outages/file1\", \"infra/config/generated/file2\", \"infra/config/other/file3\"]) == ({\"infra/config/outages/file1\"}, {\"infra/config/generated/file2\"}, {\"infra/config/other/file3\"})\n    assert candidate([\"infra/config/outages/file1\", \"infra/config/outages/file2\", \"infra/config/other/file3\"]) == ({\"infra/config/outages/file1\", \"infra/config/outages/file2\"}, set(), {\"infra/config/other/file3\"})\n    assert candidate([\"infra/config/generated/file1\", \"infra/config/generated/file2\", \"infra/config/other/file3\"]) == (set(), {\"infra/config/generated/file1\", \"infra/config/generated/file2\"}, {\"infra/config/other/file3\"})\n", "cot": "How to solve:\nStep 1. Initialize three empty sets for outages, generated, and other config files.\nStep 2. Iterate through each file path.\n    - If the file path starts with \"infra/config/outages\", add it to the outages set.\n    - Else if the file path starts with \"infra/config/generated\", add it to the generated set.\n    - Otherwise, add it to the other set.\nStep 3. Return the three categorized sets of config files."}
{"task_id": "valid/59", "prompt": "def median_of_five(a, b, c, d, e):\n    \"\"\"\n    Develop a program for calculating the median of five numbers\n    \"\"\"\n", "entry_point": "median_of_five", "canonical_solution": "\n    numbers = [a, b, c, d, e]\n    numbers.sort()\n\n    return numbers[2]\n", "test": "def check(candidate):\n    assert candidate(1, 2, 3, 4, 5) == 3\n    assert candidate(5, 4, 3, 2, 1) == 3\n    assert candidate(2, 2, 2, 2, 2) == 2", "cot": "How to solve:\nStep 1. Create a list of the five numbers.\nStep 2. Sort the list of numbers.\nStep 3. Return the middle number from the sorted list, which is the median."}
{"task_id": "valid/60", "prompt": "def check_unique_list(my_list):\n    \"\"\"\n    Write a Python program to check if a given list of strings consists only of unique elements.\n    \"\"\"\n", "entry_point": "check_unique_list", "canonical_solution": "    unique_list = []\n    for i in my_list:\n        if i not in unique_list:\n            unique_list.append(i)\n    if len(unique_list) == len(my_list):\n        return True\n    else:\n        return False\n", "test": "def check(candidate):\n    assert candidate(['apple', 'banana', 'cherry']) == True\n    assert candidate(['apple', 'banana', 'apple']) == False\n    assert candidate(['cat', 'dog', 'elephant']) == True", "cot": "How to solve:\nStep 1. Create an empty list called unique_list.\nStep 2. Iterate through each element in my_list.\n    - If the element is not in unique_list, add it to unique_list.\nStep 3. After the iteration, compare the length of unique_list with the length of my_list.\n    - If they are equal, return True (all elements are unique).\n    - Otherwise, return False (there are duplicate elements)."}
{"task_id": "valid/61", "prompt": "def calculateTimeDifference(timeStart, timeEnd):\n    \"\"\"\n    You are tasked with implementing a function that calculates the time difference between two given timestamps.\n    The timestamps are represented as integers, where each integer denotes the time in seconds.\n    Your task is to write a function `calculateTimeDifference` that takes two integer parameters `timeStart` and `timeEnd`, representing the starting and ending timestamps, and returns the time difference between them in seconds.\n    \"\"\"\n", "entry_point": "calculateTimeDifference", "canonical_solution": "\n    return timeEnd - timeStart\n", "test": "def check(candidate):\n    assert candidate(0, 10) == 10\n    assert candidate(100, 200) == 100\n    assert candidate(500, 1000) == 500", "cot": "How to solve:\nStep 1. Define a function calculateTimeDifference that takes two parameters timeStart and timeEnd.\nStep 2. Calculate the time difference by subtracting timeStart from timeEnd.\nStep 3. Return the time difference in seconds."}
{"task_id": "valid/62", "prompt": "def binary_search_recursive(array, target, start, end):\n    \"\"\"\n    Generate an algorithim to implement a recursive binary search.\n    \"\"\"\n", "entry_point": "binary_search_recursive", "canonical_solution": "    if start > end:\n        return -1\n\n    mid = (start + end) // 2\n    mid_element = array[mid]\n\n    if mid_element == target:\n        return mid\n    elif target < mid_element:\n        return binary_search_recursive(array, target, start, mid - 1)\n    else:\n        return binary_search_recursive(array, target, mid + 1, end)\n", "test": "def check(candidate):\n    assert candidate([1, 2, 3, 4, 5], 4, 0, 4) == 3\n    assert candidate([10, 20, 30, 40, 50], 10, 0, 4) == 0\n    assert candidate([1, 3, 5, 7, 9], 6, 0, 4) == -1", "cot": "How to solve:\nStep 1. Define a function binary_search_recursive that takes an array, target value, start index, and end index as input.\nStep 2. Check if the start index is greater than the end index, return -1.\nStep 3. Calculate the middle index as (start + end) // 2 and retrieve the middle element from the array.\nStep 4. If the middle element is equal to the target, return the index of the middle element.\nStep 5. If the target is less than the middle element, recursively call binary_search_recursive with updated end index as mid - 1.\nStep 6. If the target is greater than the middle element, recursively call binary_search_recursive with updated start index as mid + 1.\nStep 7. Repeat the process until the target is found or the start index becomes greater than the end index."}
{"task_id": "valid/63", "prompt": "def next_color(color):\n    \"\"\"\n    You are tasked with implementing a simple function that simulates a color-changing mechanism.\n    The function takes in a color as input and returns the next color in the sequence.\n    The sequence of colors is as follows: WHITE -> RED -> GREEN -> BLUE -> WHITE.\n    The function should return the next color in the sequence based on the input color.\n    \"\"\"\n", "entry_point": "next_color", "canonical_solution": "\n    color_sequence = [\"WHITE\", \"RED\", \"GREEN\", \"BLUE\", \"WHITE\"]\n    current_index = color_sequence.index(color)\n    next_index = (current_index + 1) % len(color_sequence)\n    return color_sequence[next_index]\n", "test": "def check(candidate):\n    assert candidate(\"WHITE\") == \"RED\"\n    assert candidate(\"RED\") == \"GREEN\"\n    assert candidate(\"BLUE\") == \"WHITE\"", "cot": "How to solve:\nStep 1. Define a function next_color that takes a color as input.\nStep 2. Create a list color_sequence containing the sequence of colors: WHITE, RED, GREEN, BLUE, WHITE.\nStep 3. Find the index of the input color in color_sequence.\nStep 4. Calculate the next index using (current_index + 1) % len(color_sequence).\nStep 5. Return the color at the next index in color_sequence."}
{"task_id": "valid/64", "prompt": "def increment_list_values(list):\n    \"\"\"\n    Using the comments as a guide, refactor the code to make it more concise.\n    \"\"\"\n", "entry_point": "increment_list_values", "canonical_solution": "    return [elem + 1 for elem in list]\n", "test": "def check(candidate):\n    assert candidate([1, 2, 3]) == [2, 3, 4]\n    assert candidate([0, 0, 0]) == [1, 1, 1]\n    assert candidate([-1, -2, -3]) == [0, -1, -2]", "cot": "How to solve:\nStep 1. Refactor the code to use list comprehension.\nStep 2. Return a new list where each element is incremented by 1 using list comprehension."}
{"task_id": "valid/65", "prompt": "def contains_perfect_squares(start, end):\n    \"\"\"\n    Check if a given range of integers contains numbers that are perfect squares.\n    Args:\n        start (int): The starting integer of the range, inclusive.\n        end (int): The ending integer of the range, inclusive.\n    Returns:\n        bool: True if there are perfect squares in the range, False otherwise.\n    \"\"\"\n", "entry_point": "contains_perfect_squares", "canonical_solution": "    for num in range(start, end + 1):\n        if int(num**0.5) ** 2 == num:\n            return True\n    return False\n", "test": "def check(candidate):\n    assert candidate(1, 10) == True\n    assert candidate(5, 8) == False\n    assert candidate(16, 25) == True", "cot": "How to solve:\nStep 1. Iterate through the range of integers from start to end (inclusive).\nStep 2. For each number, check if its square root, when squared, equals the number itself.\nStep 3. If a perfect square is found, return True.\nStep 4. If no perfect square is found in the entire range, return False."}
{"task_id": "valid/66", "prompt": "def find_symbol(words, target):\n    \"\"\"\n    Craft a technique for pinpointing a distinct alphabetic symbol inside a systematically arranged collection of textual strings.\n    \"\"\"\n", "entry_point": "find_symbol", "canonical_solution": "\n    index_of_target = -1\n\n    for i in range(len(words)):\n        if words[i] == target:\n            index_of_target = i\n            break\n\n    return index_of_target\n", "test": "def check(candidate):\n    assert candidate([\"apple\", \"banana\", \"cherry\"], \"banana\") == 1\n    assert candidate([\"cat\", \"dog\", \"elephant\"], \"elephant\") == 2\n    assert candidate([\"red\", \"green\", \"blue\"], \"yellow\") == -1", "cot": "How to solve:\nStep 1. Initialize index_of_target as -1.\nStep 2. Iterate through the words.\n    - If the current word matches the target, update index_of_target with the current index and break the loop.\nStep 3. Return index_of_target, which will be the index of the target symbol in the words list if found, otherwise -1."}
{"task_id": "valid/67", "prompt": "def sentence_to_words(sentence):\n    \"\"\"\n    Create a function to convert a sentence into an array of words.\n    \"\"\"\n", "entry_point": "sentence_to_words", "canonical_solution": "\n    return sentence.split()\n", "test": "def check(candidate):\n    assert candidate(\"Hello world\") == [\"Hello\", \"world\"]\n    assert candidate(\"This is a test\") == [\"This\", \"is\", \"a\", \"test\"]\n    assert candidate(\"Python is fun\") == [\"Python\", \"is\", \"fun\"]", "cot": "How to solve:\nStep 1. Use the split() method on the input sentence to convert it into an array of words.\nStep 2. Return the array of words."}
{"task_id": "valid/68", "prompt": "def print_fruits_keys(dict):\n    \"\"\"\n    Print all the keys in the given dictionary.\n    Args:\n        dict (dict): The dictionary whose keys need to be printed.\n    Returns:\n        None: This function does not return anything.\n    Example:\n        >>> fruits = {'apple': 5, 'banana': 3, 'orange': 2}\n        >>> print_fruits_keys(fruits)\n        The keys in the given dictionary are:\n        apple\n        banana\n        orange\n    \"\"\"\n", "entry_point": "print_fruits_keys", "canonical_solution": "    print(\"The keys in the given dictionary are:\")\n    for key in dict.keys():\n        print(key)\n", "test": "def check(candidate):\n    fruits = {'apple': 5, 'banana': 3, 'orange': 2}\n    \n    assert candidate(fruits) == None\n    assert candidate({'a': 1, 'b': 2, 'c': 3}) == None\n    assert candidate({'x': 10, 'y': 20, 'z': 30}) == None", "cot": "How to solve:\nStep 1. Define a function print_fruits_keys that takes a dictionary as input.\nStep 2. Print \"The keys in the given dictionary are:\".\nStep 3. Iterate through the keys of the dictionary using a for loop.\nStep 4. Print each key."}
{"task_id": "valid/69", "prompt": "def concatenate_string_with_phrase_fstrings():\n    \"\"\"\n    Concatenates a string with a phrase using string interpolation (f-strings).\n    Returns:\n    - The concatenated string.\n    \"\"\"\n", "entry_point": "concatenate_string_with_phrase_fstrings", "canonical_solution": "    string = \"Hello\"\n    phrase = \"to the world\"\n    concatenated_string = f\"{string} {phrase}\"\n    return concatenated_string\n", "test": "def check(candidate):\n    assert candidate() == \"Hello to the world\"\n    assert candidate() == \"Hello to the world\"\n    assert candidate() == \"Hello to the world\"", "cot": "How to solve:\nStep 1. Define a function to concatenate a string with a phrase using f-strings.\nStep 2. Initialize the string variable as \"Hello\" and the phrase variable as \"to the world\".\nStep 3. Use f-string to concatenate the string and phrase.\nStep 4. Return the concatenated string."}
{"task_id": "valid/70", "prompt": "import re\n\n\ndef capitalize_and_remove_special(strings):\n    \"\"\"\n    Generate a function that takes a list of strings and returns a list that includes the capitalized version of all strings, but also removes any strings that contain special characters.\n    Special characters include any characters that are not alphanumeric or whitespace.\n    The function should have a time complexity of O(n), where n is the total number of characters in all the input strings.\n    \"\"\"\n", "entry_point": "capitalize_and_remove_special", "canonical_solution": "    result = []\n    for string in strings:\n        if not re.match(\"^[a-zA-Z0-9\\s]*$\", string):\n            continue\n        result.append(string.upper())\n    return result\n", "test": "### Repaired Test Cases(starts with def check(candidate):):\ndef check(candidate):\n    assert candidate([\"Hello\", \"World\"]) == [\"HELLO\", \"WORLD\"]\n    assert candidate([\"123\", \"abc\"]) == [\"123\", \"ABC\"]\n    assert candidate([\"Special!\", \"Characters\"]) == [\"CHARACTERS\"]\n", "cot": "How to solve:\nStep 1. Create an empty list called result.\nStep 2. Iterate through each string in the input list.\n    - Use regular expression to check if the string contains only alphanumeric characters and whitespace.\n    - If it contains special characters, continue to the next string.\n    - If it doesn't contain special characters, capitalize the string and append it to the result list.\nStep 3. Return the result list."}
{"task_id": "valid/71", "prompt": "def position_of_char(string, char):\n    \"\"\"\n    Suggest the python code for detecting the position of a character in a string.\n    This function will detect the position of a character in a string.\n    \"\"\"\n", "entry_point": "position_of_char", "canonical_solution": "    return string.index(char)\n", "test": "def check(candidate):\n    assert candidate(\"hello\", \"e\") == 1\n    assert candidate(\"world\", \"r\") == 2\n    assert candidate(\"programming\", \"g\") == 3", "cot": "How to solve:\nStep 1. Use the index() method on the string to find the position of the character.\nStep 2. Pass the character 'char' to the index() method.\nStep 3. Return the position of the character in the string."}
{"task_id": "valid/72", "prompt": "def extract_bold_text(html_code):\n    \"\"\"\n    Identify all the HTML tags for the bold text in the given HTML code.\n    You are required to write a program that extracts all the bold text from the HTML code and outputs the result.\n    You are not allowed to use any built-in HTML parsing libraries or functions.\n    The program should handle cases where there are multiple occurrences of bold text in the HTML code and should return all of them.\n    \"\"\"\n", "entry_point": "extract_bold_text", "canonical_solution": "    bold_texts = []\n    start_tag = \"<b>\"\n    end_tag = \"</b>\"\n    start_index = 0\n    while True:\n        start = html_code.find(start_tag, start_index)\n        end = html_code.find(end_tag, start_index)\n        if start == -1 or end == -1:\n            break\n        start_index = end + len(end_tag)\n        bold_text = html_code[start + len(start_tag) : end]\n        bold_texts.append(bold_text)\n    return bold_texts\n", "test": "def check(candidate):\n    assert candidate(\"<b>hello</b>\") == [\"hello\"]\n    assert candidate(\"<b>bold</b> text <b>example</b>\") == [\"bold\", \"example\"]\n    assert candidate(\"No bold text here\") == []", "cot": "How to solve:\nStep 1. Initialize an empty list to store bold texts.\nStep 2. Set start and end tags for bold text as \"<b>\" and \"</b>\".\nStep 3. Initialize start index as 0.\nStep 4. Use a while loop to iterate through the HTML code.\n    - Find the index of start and end tags.\n    - If either start or end tag is not found, break the loop.\n    - Update start index to the end of the current end tag.\n    - Extract the bold text between start and end tags and append it to the list.\nStep 5. Return the list of bold texts."}
{"task_id": "valid/73", "prompt": "def vending_machine(item, money_inserted):\n    \"\"\"\n    You are tasked with creating a Python function that simulates a simple vending machine.\n    The vending machine will have a set list of items with corresponding prices.\n    The user will input money and select an item to purchase.\n    The function should then calculate the change to return to the user and update the stock of the item purchased.\n    \"\"\"\n", "entry_point": "vending_machine", "canonical_solution": "\n    items = {\"cola\": 1.50, \"chips\": 1.00, \"candy\": 0.75}\n    stock = {\"cola\": 5, \"chips\": 3, \"candy\": 7}\n    if item not in items:\n        return \"Item unavailable\"\n\n    if stock[item] == 0:\n        return \"Item unavailable\"\n\n    if money_inserted < items[item]:\n        return \"Insufficient money inserted\"\n\n    change = round(money_inserted - items[item], 2)\n    stock[item] -= 1\n    return f\"Transaction successful. Change: {change}\"\n", "test": "def check(candidate):\n    assert candidate(\"cola\", 2.00) == \"Transaction successful. Change: 0.5\"\n    assert candidate(\"chips\", 1.50) == \"Transaction successful. Change: 0.5\"\n    assert candidate(\"candy\", 0.75) == \"Transaction successful. Change: 0.0\"\n", "cot": "How to solve:\nStep 1. Create a dictionary of items with their prices and another dictionary for stock.\nStep 2. Check if the selected item is available, return \"Item unavailable\" if not.\nStep 3. Check if the stock for the selected item is 0, return \"Item unavailable\" if so.\nStep 4. Check if the money inserted is less than the price of the selected item, return \"Insufficient money inserted\" if so.\nStep 5. Calculate the change and update the stock of the selected item.\nStep 6. Return \"Transaction successful. Change: {change}\" with the calculated change."}
{"task_id": "valid/74", "prompt": "def merge_and_remove_duplicates(list1, list2):\n    \"\"\"\n    Merge two lists and remove duplicates.\n    Args:\n        list1 (list): The first input list.\n        list2 (list): The second input list.\n    Returns:\n        list: A new list with merged contents of list1 and list2, while removing duplicates.\n    \"\"\"\n", "entry_point": "merge_and_remove_duplicates", "canonical_solution": "    merged_list = list1 + list2\n    merged_list = list(set(merged_list))\n    return merged_list\n", "test": "def check(candidate):\n    assert candidate([1, 2, 3], [3, 4, 5]) == [1, 2, 3, 4, 5]\n    assert candidate([1, 2, 3], [3, 4, 5, 5]) == [1, 2, 3, 4, 5]\n    assert candidate([1, 2, 3], [4, 5, 6]) == [1, 2, 3, 4, 5, 6]", "cot": "How to solve:\nStep 1. Merge list1 and list2 into a new list called merged_list.\nStep 2. Convert merged_list to a set to remove duplicates.\nStep 3. Convert the set back to a list.\nStep 4. Return the new list with merged contents and removed duplicates."}
{"task_id": "valid/75", "prompt": "def count_occurances(list, target):\n    \"\"\"\n    Create a function to count the number of times an element appears in a list.\n    \"\"\"\n", "entry_point": "count_occurances", "canonical_solution": "    count = 0\n    for element in list:\n        if element == target:\n            count += 1\n    return count\n", "test": "def check(candidate):\n    assert candidate([1, 2, 3, 4, 2, 2], 2) == 3\n    assert candidate([5, 5, 5, 5, 5], 5) == 5\n    assert candidate([1, 2, 3, 4, 5], 6) == 0", "cot": "How to solve:\nStep 1. Initialize a count variable to 0.\nStep 2. Iterate through the elements in the list.\n    - If the element is equal to the target, increment the count.\nStep 3. Return the count of occurrences of the target element in the list."}
{"task_id": "valid/76", "prompt": "import base64\n\n\ndef encode_to_base64(string):\n    \"\"\"\n    Create code to encode a given string into a base64 string.\n    \"\"\"\n", "entry_point": "encode_to_base64", "canonical_solution": "    encoded_string = base64.b64encode(string.encode())\n    return encoded_string\n", "test": "def check(candidate):\n    assert candidate(\"Hello, World!\") == b'SGVsbG8sIFdvcmxkIQ=='\n    assert candidate(\"Python is fun\") == b'UHl0aG9uIGlzIGZ1bg=='\n    assert candidate(\"12345\") == b'MTIzNDU='", "cot": "How to solve:\nStep 1. Import the base64 module.\nStep 2. Define a function encode_to_base64 that takes a string as input.\nStep 3. Use base64.b64encode to encode the input string into a base64 string.\nStep 4. Return the encoded string."}
{"task_id": "valid/77", "prompt": "def non_zero_indices(vector):\n    \"\"\"\n    You are given a Python code snippet that uses the `matplotlib` library to plot a vector.\n    The `plt.stem()` function is used to create a stem plot of the vector `x`.\n    Your task is to write a Python function that takes a list of numbers as input and returns the indices of the non-zero entries in the vector.\n    \"\"\"\n", "entry_point": "non_zero_indices", "canonical_solution": "\n    non_zero_indices = [index for index, value in enumerate(vector) if value != 0]\n    return non_zero_indices\n", "test": "def check(candidate):\n    assert candidate([1, 0, 3, 0, 5]) == [0, 2, 4]\n    assert candidate([0, 0, 0, 0, 0]) == []\n    assert candidate([1, 2, 3, 4, 5]) == [0, 1, 2, 3, 4]\n", "cot": "How to solve:\nStep 1. Define a function non_zero_indices that takes a list of numbers as input.\nStep 2. Use list comprehension to iterate through the vector and create a list of indices where the value is non-zero.\nStep 3. Return the list of non-zero indices."}
{"task_id": "valid/78", "prompt": "def assign_and_validate():\n    \"\"\"\n    Design a function that assigns a specific value to a variable and validates it.\n    \"\"\"\n", "entry_point": "assign_and_validate", "canonical_solution": "\n    my_binary = format(5, \"016b\")\n\n    if int(my_binary, 2) != 5:\n        raise ValueError(\n            f\"{my_binary} is not a valid 16-bit binary representation of 5.\"\n        )\n\n    return my_binary\n", "test": "def check(candidate):\n    assert candidate() == '0000000000000101'\n    assert candidate() == '0000000000000101'\n    assert candidate() == '0000000000000101'\n", "cot": "How to solve:\nStep 1. Assign the binary representation of 5 to the variable my_binary using the format function with \"016b\" format specifier.\nStep 2. Validate the binary representation by converting it back to an integer using int(my_binary, 2) and comparing it to 5.\n    - If the conversion result is not equal to 5, raise a ValueError with a message indicating that the binary representation is not valid.\nStep 3. Return the valid binary representation my_binary."}
{"task_id": "valid/79", "prompt": "import random\n\n\ndef random_rearrange(word):\n    \"\"\"\n    Rearrange the letters of a given word randomly.\n    Parameters:\n    word (str): The word to be rearranged.\n    Returns:\n    str: The randomly rearranged word.\n    \"\"\"\n", "entry_point": "random_rearrange", "canonical_solution": "    word_list = list(word)\n    random.shuffle(word_list)\n    rearranged_word = \"\".join(word_list)\n    return rearranged_word\n", "test": "def check(candidate):\n    assert candidate(\"hello\") != \"hello\"\n    assert sorted(candidate(\"hello\")) == sorted(\"hello\")\n    assert len(candidate(\"hello\")) == len(\"hello\")", "cot": "How to solve:\nStep 1. Convert the input word into a list of characters.\nStep 2. Use the random.shuffle() function to shuffle the list of characters.\nStep 3. Join the shuffled list of characters back into a string.\nStep 4. Return the randomly rearranged word."}
{"task_id": "valid/80", "prompt": "def classify_element(element):\n    \"\"\"\n    Construct a function to classify an element based on its type.\n    \"\"\"\n", "entry_point": "classify_element", "canonical_solution": "    if isinstance(element, int):\n        return \"integer\"\n    elif isinstance(element, float):\n        return \"float\"\n    elif isinstance(element, str):\n        return \"string\"\n    elif isinstance(element, list):\n        return \"list\"\n    elif isinstance(element, dict):\n        return \"dictionary\"\n    else:\n        return \"unknown\"\n", "test": "def check(candidate):\n    assert candidate(5) == \"integer\"\n    assert candidate(3.14) == \"float\"\n    assert candidate(\"Hello\") == \"string\"", "cot": "How to solve:\nStep 1. Define a function classify_element that takes an element as input.\nStep 2. Check the type of the input element using isinstance.\nStep 3. If the element is an integer, return \"integer\".\nStep 4. If the element is a float, return \"float\".\nStep 5. If the element is a string, return \"string\".\nStep 6. If the element is a list, return \"list\".\nStep 7. If the element is a dictionary, return \"dictionary\".\nStep 8. If the element is of any other type, return \"unknown\".\nStep 9. The function will classify the input element based on its type and return the corresponding classification."}
{"task_id": "valid/81", "prompt": "def merge_duplicates(arr):\n    \"\"\"\n    Write a code to detect and merge consecutive duplicate elements in a given sorted array\n    \"\"\"\n", "entry_point": "merge_duplicates", "canonical_solution": "\n    new_arr = [arr[0]]\n    for element in arr:\n        if element != new_arr[-1]:\n            new_arr.append(element)\n    return new_arr\n", "test": "def check(candidate):\n    assert candidate([1, 2, 2, 3, 4, 4, 4, 5]) == [1, 2, 3, 4, 5]\n    assert candidate([1, 1, 1, 2, 3, 3, 4, 4, 4]) == [1, 2, 3, 4]\n    assert candidate([1, 1, 1, 1, 1]) == [1]", "cot": "How to solve:\nStep 1. Create a new array and initialize it with the first element of the input array.\nStep 2. Iterate through the input array.\n    - If the current element is different from the last element in the new array, append it to the new array.\nStep 3. Return the new array containing merged consecutive duplicate elements."}
{"task_id": "valid/82", "prompt": "import re\n\n\ndef tokenizeText(text):\n    \"\"\"\n    Create a text tokenizer using regular expression in Python.\n    \"\"\"\n", "entry_point": "tokenizeText", "canonical_solution": "    tokens = re.findall(r\"\\w+\", text)\n    return tokens\n", "test": "def check(candidate):\n    assert candidate(\"Hello, World!\") == [\"Hello\", \"World\"]\n    assert candidate(\"123 456 789\") == [\"123\", \"456\", \"789\"]\n    assert candidate(\"Python is fun!\") == [\"Python\", \"is\", \"fun\"]", "cot": "How to solve:\nStep 1. Import the 're' module for regular expressions.\nStep 2. Define a function tokenizeText that takes a text input.\nStep 3. Use re.findall to tokenize the text based on word characters (\\w+).\nStep 4. Return the tokens."}
{"task_id": "valid/83", "prompt": "def find_divisible_numbers(numbers):\n    \"\"\"\n    Given a list of integers, find all the numbers that are divisible by both 3 and 7.\n    Calculate the average of these numbers and display it.\n    Find the maximum and minimum values among these numbers and display them as well.\n    Additionally, display the number of occurrences of each unique number divisible by both 3 and 7 in the list.\n\n    \"\"\"\n", "entry_point": "find_divisible_numbers", "canonical_solution": "    count = {}\n    divisible_nums = []\n    for num in numbers:\n        if num % 3 == 0 and num % 7 == 0:\n            divisible_nums.append(num)\n            if num not in count:\n                count[num] = 1\n            else:\n                count[num] += 1\n    divisible_nums = sorted(divisible_nums)\n    average = sum(divisible_nums) / len(divisible_nums)\n    minimum = min(divisible_nums)\n    maximum = max(divisible_nums)\n    print(\"Average:\", average)\n    print(\"Minimum:\", minimum)\n    print(\"Maximum:\", maximum)\n    for num, occurrences in count.items():\n        print(\"Number\", num, \"occurs\", occurrences, \"time(s)\")\n", "test": "def check(candidate):\n    assert candidate([21, 42, 63, 84, 105]) == None\n    assert candidate([7, 14, 21, 28, 35, 42, 49, 56, 63, 70]) == None\n    assert candidate([3, 6, 9, 12, 15, 18, 21, 24, 27, 30]) == None", "cot": "How to solve:\nStep 1. Create an empty dictionary count and an empty list divisible_nums.\nStep 2. Iterate through the input numbers.\n    - If the number is divisible by both 3 and 7, add it to divisible_nums and update its count in the dictionary.\nStep 3. Sort the divisible_nums list.\nStep 4. Calculate the average, minimum, and maximum of divisible_nums.\nStep 5. Print the average, minimum, and maximum values.\nStep 6. Iterate through the count dictionary and print the number and its occurrences."}
{"task_id": "valid/84", "prompt": "def find_highest_frequency(sentence):\n    \"\"\"\n    Formulate a program to search and return the word with the highest frequency in a sentence.\n    \"\"\"\n", "entry_point": "find_highest_frequency", "canonical_solution": "    words = sentence.split()\n    frequency = {}\n    for word in words:\n        if word not in frequency:\n            frequency[word] = 1\n        else:\n            frequency[word] += 1\n    return max(frequency, key=frequency.get)\n", "test": "def check(candidate):\n    assert candidate(\"hello world hello\") == \"hello\"\n    assert candidate(\"apple orange banana apple banana\") == \"apple\"\n    assert candidate(\"a a a b b c\") == \"a\"", "cot": "How to solve:\nStep 1. Split the sentence into words.\nStep 2. Create a dictionary to store word frequencies.\nStep 3. Iterate through the words and update their frequencies in the dictionary.\nStep 4. Return the word with the highest frequency using the max function with the key parameter set to the frequency dictionary's get method."}
{"task_id": "valid/85", "prompt": "import math\n\n\ndef calculate_euler(decimal_places):\n    \"\"\"\n    This function calculates the value of Euler's number (e) to a given decimal place.\n\n    Args:\n        decimal_places (int): The number of decimal places to which e should be calculated.\n\n    Returns:\n        float: The value of Euler's number (e) to the specified number of decimal places.\n    \"\"\"\n", "entry_point": "calculate_euler", "canonical_solution": "    n = decimal_places + 2\n\n    euler_number = math.exp(1)\n\n    rounded_euler = round(euler_number, n)\n\n    formatted_euler = \"{:.{}f}\".format(rounded_euler, decimal_places)\n\n    return float(formatted_euler)\n", "test": "def check(candidate):\n    assert candidate(2) == 2.72\n    assert candidate(3) == 2.718\n    assert candidate(4) == 2.7183", "cot": "How to solve:\nStep 1. Add 2 to the given decimal_places and store it in n.\nStep 2. Calculate Euler's number using math.exp(1).\nStep 3. Round the Euler's number to n decimal places.\nStep 4. Format the rounded Euler's number to the specified decimal_places using \"{:.{}f}\".format().\nStep 5. Return the formatted Euler's number as a float."}
{"task_id": "valid/86", "prompt": "def getAverageAndSum(numbers):\n    \"\"\"\n    Create a function which takes a list of numbers and returns the average of the numbers in the list and the sum of the numbers in the list.\n    \"\"\"\n", "entry_point": "getAverageAndSum", "canonical_solution": "    total = 0\n    for num in numbers:\n        total += num\n    average = total / len(numbers)\n    return average, total\n", "test": "def check(candidate):\n    assert candidate([1, 2, 3, 4, 5]) == (3.0, 15)\n    assert candidate([10, 20, 30, 40, 50]) == (30.0, 150)\n    assert candidate([0, 0, 0, 0, 0]) == (0.0, 0)", "cot": "How to solve:\nStep 1. Initialize total as 0.\nStep 2. Iterate through numbers and add each number to total.\nStep 3. Calculate average by dividing total by the length of numbers.\nStep 4. Return average and total."}
{"task_id": "valid/87", "prompt": "def find_min_max_values(time_series):\n    \"\"\"\n    Find the minimum and maximum values in a given time series.\n    Args:\n        time_series (list): A list of numerical values representing the time series.\n    Returns:\n        tuple: A tuple containing the minimum and maximum values in the time series.\n    Raises:\n        ValueError: If the time series is empty or contains non-numerical values.\n    \"\"\"\n", "entry_point": "find_min_max_values", "canonical_solution": "    if len(time_series) == 0:\n        raise ValueError(\"The time series is empty.\")\n    try:\n        min_value = min(time_series)\n        max_value = max(time_series)\n    except TypeError:\n        raise ValueError(\"The time series contains non-numerical values.\")\n    return min_value, max_value\n", "test": "def check(candidate):\n    assert candidate([1, 2, 3, 4, 5]) == (1, 5)\n    assert candidate([-10, 0, 10, 20, 30]) == (-10, 30)\n    assert candidate([5]) == (5, 5)", "cot": "How to solve:\nStep 1. Check if the time series is empty, if so, raise a ValueError.\nStep 2. Use try-except block to find the minimum and maximum values in the time series.\n    - If non-numerical values are found, raise a ValueError.\nStep 3. Return a tuple containing the minimum and maximum values."}
{"task_id": "valid/88", "prompt": "def relatedArticles_count(encyclopedia):\n    \"\"\"\n    Given an \"encyclopedia\" as your input, design an algorithm that determines the number of related articles each entry in the encyclopedia has.\n    The encyclopedia will be in this format:\n    \"\"\"\n", "entry_point": "relatedArticles_count", "canonical_solution": "\n    counts = {}\n    for key, values in encyclopedia.items():\n        counts[key] = len(values)\n    return counts\n", "test": "def check(candidate):\n    encyclopedia = {\n        \"Python\": [\"Data Types\", \"Functions\", \"Modules\"],\n        \"Java\": [\"OOP\", \"Collections\", \"Exceptions\"],\n        \"C++\": [\"Pointers\", \"Templates\", \"STL\"]\n    }\n    assert candidate(encyclopedia) == {\n        \"Python\": 3,\n        \"Java\": 3,\n        \"C++\": 3\n    }\n\n    encyclopedia = {\n        \"Algorithms\": [\"Sorting\", \"Searching\"],\n        \"Data Structures\": [\"Arrays\", \"Linked Lists\", \"Trees\", \"Graphs\"],\n        \"Machine Learning\": [\"Supervised Learning\", \"Unsupervised Learning\", \"Reinforcement Learning\"]\n    }\n    assert candidate(encyclopedia) == {\n        \"Algorithms\": 2,\n        \"Data Structures\": 4,\n        \"Machine Learning\": 3\n    }\n\n    encyclopedia = {\n        \"History\": [\"Ancient\", \"Medieval\", \"Modern\"],\n        \"Geography\": [\"Physical\", \"Human\"],\n        \"Science\": [\"Physics\", \"Chemistry\", \"Biology\", \"Astronomy\"]\n    }\n    assert candidate(encyclopedia) == {\n        \"History\": 3,\n        \"Geography\": 2,\n        \"Science\": 4\n    }\n", "cot": "How to solve:\nStep 1. Create an empty dictionary \"counts\" to store the counts of related articles for each entry.\nStep 2. Iterate through the items of the \"encyclopedia\".\nStep 3. For each entry, calculate the length of the associated values (related articles) and store it in the \"counts\" dictionary with the entry as the key.\nStep 4. Return the \"counts\" dictionary containing the number of related articles for each entry in the encyclopedia."}
{"task_id": "valid/89", "prompt": "def find_largest_index(lst):\n    \"\"\"\n    Given a list of integers, write a Python program to find the index of the largest number.\n    \"\"\"\n", "entry_point": "find_largest_index", "canonical_solution": "\n    largest = max(lst)\n    index_of_largest = lst.index(largest)\n    return index_of_largest\n", "test": "def check(candidate):\n    assert candidate([1, 5, 3, 9, 2]) == 3\n    assert candidate([10, 20, 30, 40, 50]) == 4\n    assert candidate([5, 5, 5, 5, 5]) == 0", "cot": "How to solve:\nStep 1. Find the largest number in the list using the max() function.\nStep 2. Get the index of the largest number in the list using the index() function.\nStep 3. Return the index_of_largest."}
{"task_id": "valid/90", "prompt": "def have_common_element(list1, list2):\n    \"\"\"\n    Check if two lists have at least one common element.\n\n    Args:\n        list1 (list): The first list.\n        list2 (list): The second list.\n\n    Returns:\n        bool: True if the lists have at least one common element, False otherwise.\n    \"\"\"\n", "entry_point": "have_common_element", "canonical_solution": "    set1 = set(list1)\n    set2 = set(list2)\n\n    return len(set1.intersection(set2)) > 0\n", "test": "def check(candidate):\n    assert candidate([1, 2, 3], [3, 4, 5]) == True\n    assert candidate([7, 8, 9], [4, 5, 6]) == False\n    assert candidate([1, 2, 3], [4, 5, 6]) == False", "cot": "How to solve:\nStep 1. Convert list1 and list2 to sets set1 and set2.\nStep 2. Find the intersection of set1 and set2.\nStep 3. If the length of the intersection is greater than 0, return True.\nStep 4. Otherwise, return False."}
{"task_id": "valid/91", "prompt": "from xml.etree.ElementTree import Element, tostring\n\n\ndef dict_to_xml(dictionary):\n    \"\"\"\n    Convert a Python dictionary object into an XML string representation.\n    Args:\n        dictionary (dict): The input dictionary object.\n    Returns:\n        str: The XML string representation of the dictionary.\n    Example:\n        >>> dictionary = {'name': 'John', 'age': 30, 'city': 'New York'}\n        >>> xml_string = dict_to_xml(dictionary)\n        >>> print(xml_string)\n        <data>\n            <name>John</name>\n            <age>30</age>\n            <city>New York</city>\n        </data>\n    \"\"\"\n", "entry_point": "dict_to_xml", "canonical_solution": "    root = Element(\"data\")\n    for key, value in dictionary.items():\n        tag = Element(key)\n        tag.text = str(value)\n        root.append(tag)\n    return tostring(root, \"utf-8\").decode()\n", "test": "def check(candidate):\n    assert candidate({'name': 'John', 'age': 30, 'city': 'New York'}) == '<data><name>John</name><age>30</age><city>New York</city></data>'\n    assert candidate({'a': 1, 'b': 2, 'c': 3}) == '<data><a>1</a><b>2</b><c>3</c></data>'\n    assert candidate({'key1': 'value1', 'key2': 'value2'}) == '<data><key1>value1</key1><key2>value2</key2></data>'", "cot": "How to solve:\nStep 1. Create an XML element with the tag \"data\".\nStep 2. Iterate through the dictionary items.\n    - For each key-value pair, create an XML element with the key as the tag and the value as the text.\n    - Append the created element to the root element.\nStep 3. Convert the root element to an XML string using the tostring method and return the decoded string."}
{"task_id": "valid/92", "prompt": "def searchInMatrix(matrix, target):\n    \"\"\"\n    I am faced with a challenge that requires me to devise an efficient algorithm.\n    The algorithm's purpose is to locate a specific value within a two-dimensional matrix of dimensions `m x n`.\n    The matrix is characterized by the following attributes:\n    \"\"\"\n", "entry_point": "searchInMatrix", "canonical_solution": "\n    rows = len(matrix)\n    cols = len(matrix[0])\n    low = 0\n    high = rows * cols - 1\n    while low <= high:\n        mid = (low + high) // 2\n        mid_val = matrix[mid // cols][mid % cols]\n        if mid_val == target:\n            return True\n        elif mid_val < target:\n            low = mid + 1\n        else:\n            high = mid - 1\n    return False\n", "test": "def check(candidate):\n    assert candidate([[1, 3, 5], [7, 9, 11], [13, 15, 17]], 9) == True\n    assert candidate([[1, 3, 5], [7, 9, 11], [13, 15, 17]], 8) == False\n    assert candidate([[1, 3, 5], [7, 9, 11], [13, 15, 17]], 13) == True\n", "cot": "How to solve:\nStep 1. Initialize variables for rows and columns of the matrix.\nStep 2. Set low to 0 and high to the total number of elements in the matrix - 1.\nStep 3. Use binary search to find the target value in the matrix.\n    - Calculate mid index.\n    - Compare mid_val with the target.\n    - If mid_val equals the target, return True.\n    - If mid_val is less than the target, update low to mid + 1.\n    - If mid_val is greater than the target, update high to mid - 1.\nStep 4. If the target is not found, return False."}
{"task_id": "valid/93", "prompt": "def sum_and_average_odd_elements(lst):\n    \"\"\"\n    Use a for loop to add up all odd elements in a list and then find the average of these odd elements.\n    Additionally, you are not allowed to use any built-in functions for calculating the sum or average of elements in the list, and you are not allowed to use the modulus operator (%) to check if a number is odd.\n    The size of the list will be at least 1000 elements.\n    \"\"\"\n", "entry_point": "sum_and_average_odd_elements", "canonical_solution": "    odd_sum = 0\n    odd_count = 0\n    for num in lst:\n        odd_sum += num * (num & 1)\n        odd_count += num & 1\n    average = odd_sum / odd_count if odd_count != 0 else 0\n    return average\n", "test": "def check(candidate):\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 5.0\n    assert candidate([11, 12, 13, 14, 15, 16, 17, 18, 19, 20]) == 15.0\n    assert candidate([21, 22, 23, 24, 25, 26, 27, 28, 29, 30]) == 25.0", "cot": "How to solve:\nStep 1. Initialize variables odd_sum and odd_count as 0.\nStep 2. Iterate through the list.\n    - For each element, add the element to odd_sum if it's odd (using bitwise AND with 1).\n    - Increment odd_count if the element is odd (using bitwise AND with 1).\nStep 3. Calculate the average as odd_sum divided by odd_count if odd_count is not 0, else 0.\nStep 4. Return the average."}
{"task_id": "valid/94", "prompt": "def nth_largest_element(lst, n):\n    \"\"\"\n    Find the nth largest element from a given list.\n    Parameters:\n    lst (list): The list of elements.\n    n (int): The position of the element to find (1-indexed).\n    Returns:\n    int or None: The nth largest element, or None if n is out of range.\n    Examples:\n    >>> lst = [9, 4, 7, 2, 1, 5]\n    >>> nth_largest_element(lst, 3)\n    5\n    >>> lst = [2, 1, 1, 4, 3, 5]\n    >>> nth_largest_element(lst, 5)\n    1\n    \"\"\"\n", "entry_point": "nth_largest_element", "canonical_solution": "    if not 1 <= n <= len(lst):\n        return None\n    sorted_lst = sorted(lst, reverse=True)\n    return sorted_lst[n - 1]\n", "test": "def check(candidate):\n    assert candidate([9, 4, 7, 2, 1, 5], 3) == 5\n    assert candidate([2, 1, 1, 4, 3, 5], 5) == 1\n    assert candidate([1, 2, 3, 4, 5], 1) == 5", "cot": "How to solve:\nStep 1. Check if n is within the range of the list. If not, return None.\nStep 2. Sort the list in descending order.\nStep 3. Return the element at the (n-1)th index of the sorted list."}
{"task_id": "valid/95", "prompt": "from functools import partial\n\n\ndef sum_list_elements(lst):\n    \"\"\"\n    Calculates the sum of all elements in a list.\n    Args:\n        lst (list): The input list of elements.\n    Returns:\n        int or float: The sum of all elements in the list.\n    \"\"\"\n", "entry_point": "sum_list_elements", "canonical_solution": "    return sum(lst)\n", "test": "def check(candidate):\n    assert candidate([1, 2, 3]) == 6\n    assert candidate([5, 5, 5, 5]) == 20\n    assert candidate([0, 0, 0, 0, 0]) == 0", "cot": "How to solve:\nStep 1. Use the built-in sum function to calculate the sum of all elements in the input list.\nStep 2. Return the sum value."}
{"task_id": "valid/96", "prompt": "def find_exclusive_elements(set_a, set_b):\n    \"\"\"\n    Find the set of elements that are only in one of the sets (exclusive elements).\n    Args:\n        set_a (set): Set A\n        set_b (set): Set B\n\n    Returns:\n        set: Exclusive elements between set A and set B\n    \"\"\"\n", "entry_point": "find_exclusive_elements", "canonical_solution": "    exclusive_elements = (set_a - set_b) | (set_b - set_a)\n    return exclusive_elements\n", "test": "def check(candidate):\n    assert candidate({1, 2, 3}, {2, 3, 4}) == {1, 4}\n    assert candidate({'apple', 'banana', 'cherry'}, {'banana', 'cherry', 'date'}) == {'apple', 'date'}\n    assert candidate({1, 2, 3, 4}, {1, 2, 3, 4}) == set()", "cot": "How to solve:\nStep 1. Define a function to find exclusive elements between two sets.\nStep 2. Calculate the exclusive elements by taking the set difference of set_a and set_b, and set difference of set_b and set_a using the '-' operator.\nStep 3. Combine the results using the '|' operator to get the union of exclusive elements.\nStep 4. Return the exclusive elements set."}
{"task_id": "valid/97", "prompt": "def create_discord_bot_description(mapping):\n    \"\"\"\n    You are tasked with creating a Discord bot that can manage and play music in a server.\n    The bot should have the ability to provide information about its features and a web app for managing personal playlists and server settings.\n    Additionally, the bot should be able to categorize commands and provide help information for each command.\n    \"\"\"\n", "entry_point": "create_discord_bot_description", "canonical_solution": "\n    description = (\n        \"chime is a versatile, yet intuitive music bot for discord. It aims to be as user-friendly as possible while still boasting many features. \\n\\n\"\n        \"**More info and invite link [here](https://chime.realmayus.xyz)** \\n\\n\"\n        \"Chime has a **web app** where you can manage and set up personal playlists and manage settings of your servers! https://chime.realmayus.xyz \\n\\n\"\n        \"**Use** `!help [command]` **for more info on a command.**\\n\\n\"\n    )\n    for cog, commands in mapping.items():\n        if cog is not None:\n            description += f\"**{cog}**\\n\"\n            for command in commands:\n                description += f\"- {command}\\n\"\n\n    return description\n", "test": "def check(candidate):\n    assert candidate({'Music': ['play', 'pause', 'skip']}) == \"chime is a versatile, yet intuitive music bot for discord. It aims to be as user-friendly as possible while still boasting many features. \\n\\n**More info and invite link [here](https://chime.realmayus.xyz)** \\n\\nChime has a **web app** where you can manage and set up personal playlists and manage settings of your servers! https://chime.realmayus.xyz \\n\\n**Use** `!help [command]` **for more info on a command.**\\n\\n**Music**\\n- play\\n- pause\\n- skip\\n\"\n    assert candidate({'Settings': ['set', 'configure'], 'Playlist': ['create', 'delete']}) == \"chime is a versatile, yet intuitive music bot for discord. It aims to be as user-friendly as possible while still boasting many features. \\n\\n**More info and invite link [here](https://chime.realmayus.xyz)** \\n\\nChime has a **web app** where you can manage and set up personal playlists and manage settings of your servers! https://chime.realmayus.xyz \\n\\n**Use** `!help [command]` **for more info on a command.**\\n\\n**Settings**\\n- set\\n- configure\\n**Playlist**\\n- create\\n- delete\\n\"\n    assert candidate({'General': ['help', 'info']}) == \"chime is a versatile, yet intuitive music bot for discord. It aims to be as user-friendly as possible while still boasting many features. \\n\\n**More info and invite link [here](https://chime.realmayus.xyz)** \\n\\nChime has a **web app** where you can manage and set up personal playlists and manage settings of your servers! https://chime.realmayus.xyz \\n\\n**Use** `!help [command]` **for more info on a command.**\\n\\n**General**\\n- help\\n- info\\n\"\n", "cot": "How to solve:\nStep 1. Create a description string with the initial information about the Discord bot.\nStep 2. Append the web app link and usage instructions to the description.\nStep 3. Iterate through the mapping items and add categorized commands with help information to the description.\nStep 4. Return the final description."}
{"task_id": "valid/98", "prompt": "def dec_to_ternary(n):\n    \"\"\"\n    Create a Python function that converts decimal numbers to ternary (base 3) representation for a given range, and handles negative input values by returning their absolute ternary representations.\n    \"\"\"\n", "entry_point": "dec_to_ternary", "canonical_solution": "\n    if n < 0:\n        n = abs(n)\n    if n == 0:\n        return \"0\"\n    elif n == 1:\n        return \"1\"\n    elif n == 2:\n        return \"2\"\n    else:\n        return dec_to_ternary(n // 3) + dec_to_ternary(n % 3)\n", "test": "def check(candidate):\n    assert candidate(10) == \"101\"\n    assert candidate(15) == \"120\"\n    assert candidate(-7) == \"21\"\n", "cot": "How to solve:\nStep 1. If the input number is negative, convert it to its absolute value.\nStep 2. If the input number is 0, return \"0\".\nStep 3. If the input number is 1, return \"1\".\nStep 4. If the input number is 2, return \"2\".\nStep 5. For any other input number, recursively call the function with the quotient of the input number divided by 3 and concatenate it with the result of the input number modulo 3."}
{"task_id": "valid/99", "prompt": "def get_file_extensions(*file_names):\n    \"\"\"\n    Generate a tuple with the file extensions of given filenames.\n    Parameters:\n    file_names (str): Variable length argument, representing the filenames.\n    Returns:\n    tuple: Tuple containing the file extensions of the given filenames.\n    Example:\n    >>> get_file_extensions('file1.txt', 'file2.py', 'file3.jpg', 'file4.docx')\n    ('txt', 'py', 'jpg', 'docx')\n    \"\"\"\n", "entry_point": "get_file_extensions", "canonical_solution": "    extensions = ()\n\n    for name in file_names:\n        name_parts = name.split(\".\")\n\n        extension = name_parts[-1]\n\n        extensions += (extension,)\n\n    return extensions\n", "test": "def check(candidate):\n    assert candidate('file1.txt', 'file2.py', 'file3.jpg', 'file4.docx') == ('txt', 'py', 'jpg', 'docx')\n    assert candidate('file5.csv', 'file6.pdf') == ('csv', 'pdf')\n    assert candidate('file7', 'file8') == ('file7', 'file8')", "cot": "How to solve:\nStep 1. Initialize an empty tuple called 'extensions'.\nStep 2. Iterate through each 'name' in the input 'file_names'.\nStep 3. Split the 'name' using '.' to get the parts.\nStep 4. Extract the extension by taking the last part of the split name.\nStep 5. Add the extension to the 'extensions' tuple.\nStep 6. Return the 'extensions' tuple containing all the file extensions."}
{"task_id": "valid/100", "prompt": "def ageClassifier(age):\n    \"\"\"\n    You are given a number `g` which represents the age of a person.\n    Your task is to write a function `ageClassifier` that categorizes the age into different groups based on the following criteria:\n    \"\"\"\n", "entry_point": "ageClassifier", "canonical_solution": "\n    if age < 13:\n        return \"child\"\n    elif 13 <= age <= 19:\n        return \"teenager\"\n    elif 20 <= age <= 64:\n        return \"adult\"\n    else:\n        return \"senior citizen\"\n", "test": "def check(candidate):\n    assert candidate(5) == \"child\"\n    assert candidate(16) == \"teenager\"\n    assert candidate(30) == \"adult\"", "cot": "How to solve:\nStep 1. Define a function `ageClassifier` that takes an `age` as input.\nStep 2. Use if-elif-else statements to categorize the age into different groups based on the given criteria.\n    - If age < 13, return \"child\".\n    - If 13 <= age <= 19, return \"teenager\".\n    - If 20 <= age <= 64, return \"adult\".\n    - Otherwise, return \"senior citizen\"."}
{"task_id": "valid/101", "prompt": "def calculate_grade_and_gpa(numerical_grade):\n    \"\"\"\n    By implementing a ternary operator, determine the letter grade of a student based on the inputted numerical grade.\n    Additionally, calculate the grade point equivalent (GPA on a scale of 4.0) for the given numerical grade.\n\n    \"\"\"\n", "entry_point": "calculate_grade_and_gpa", "canonical_solution": "\n    if numerical_grade >= 90:\n        letter_grade = \"A\"\n        gpa = 4.0\n    elif 80 <= numerical_grade < 90:\n        letter_grade = \"B\"\n        gpa = 3.0 + (numerical_grade - 80) / 10\n    elif 70 <= numerical_grade < 80:\n        letter_grade = \"C\"\n        gpa = 2.0 + (numerical_grade - 70) / 10\n    elif 60 <= numerical_grade < 70:\n        letter_grade = \"D\"\n        gpa = 1.0 + (numerical_grade - 60) / 10\n    else:\n        letter_grade = \"F\"\n        gpa = 0.0\n    return letter_grade, round(gpa, 2)\n", "test": "def check(candidate):\n    assert candidate(95) == (\"A\", 4.0)\n    assert candidate(85) == (\"B\", 3.5)\n    assert candidate(65) == (\"D\", 1.5)\n", "cot": "How to solve:\nStep 1. Define a function to calculate the grade and GPA based on the numerical grade input.\nStep 2. Use if-elif-else statements to determine the letter grade and GPA based on the inputted numerical grade.\nStep 3. For each grade range, assign the corresponding letter grade and calculate the GPA using the given formulas.\nStep 4. Return the letter grade and the rounded GPA value."}
{"task_id": "valid/102", "prompt": "def total_price(listing):\n    \"\"\"\n    Automatically generate most of the code for a function that takes in an online grocery listing and outputs the total price of all the items in the list.\n    \"\"\"\n", "entry_point": "total_price", "canonical_solution": "    total_price = 0\n    for entry in listing:\n        item_price = entry[\"price\"]\n        total_price += item_price\n    return total_price\n", "test": "def check(candidate):\n    assert candidate([{\"item\": \"apple\", \"price\": 2}, {\"item\": \"banana\", \"price\": 1}]) == 3\n    assert candidate([{\"item\": \"milk\", \"price\": 3}, {\"item\": \"bread\", \"price\": 2}, {\"item\": \"eggs\", \"price\": 1}]) == 6\n    assert candidate([{\"item\": \"chocolate\", \"price\": 5}, {\"item\": \"chips\", \"price\": 4}, {\"item\": \"soda\", \"price\": 2}]) == 11", "cot": "How to solve:\nStep 1. Initialize total_price as 0.\nStep 2. Iterate through the listing.\n    - Obtain the price of each item.\n    - Add the item price to the total_price.\nStep 3. Return the total_price."}
{"task_id": "valid/103", "prompt": "def count_vowels_in_palindromes(palindrome_tuples):\n    \"\"\"\n    Devise a Python function that receives as input parameters a tuple made up of palindrome strings.\n    This function should generate a dictionary, where the palindrome string keys are correlated with their corresponding values, represented by the accumulated count of vowels ('a', 'e', 'i', 'o', 'u') embedded within these keys.\n    This task requires comprehension of palindrome structures, dictionary formulation, and vowel recognition.\n    \"\"\"\n", "entry_point": "count_vowels_in_palindromes", "canonical_solution": "\n    vowels = {\"a\", \"e\", \"i\", \"o\", \"u\"}\n    result = {}\n    for word in palindrome_tuples:\n        if word == word[::-1]:\n            vowel_count = sum(1 for char in word if char in vowels)\n            result[word] = vowel_count\n\n    return result\n", "test": "def check(candidate):\n    assert candidate((\"racecar\", \"level\", \"deed\")) == {\"racecar\": 3, \"level\": 2, \"deed\": 2}\n    assert candidate((\"madam\", \"noon\", \"radar\")) == {\"madam\": 2, \"noon\": 2, \"radar\": 2}\n    assert candidate((\"stats\", \"wow\", \"pop\")) == {\"stats\": 1, \"wow\": 1, \"pop\": 1}", "cot": "How to solve:\nStep 1. Define a function that takes a tuple of palindrome strings as input.\nStep 2. Initialize a set of vowels and an empty dictionary for the result.\nStep 3. Iterate through the palindrome strings in the input tuple.\n    - Check if the word is a palindrome.\n    - If it is a palindrome, count the vowels in the word and store the count in the result dictionary with the word as the key.\nStep 4. Return the result dictionary."}
{"task_id": "valid/104", "prompt": "def stringmethod(s):\n    \"\"\"\n    You are tasked with implementing a custom string method that performs a specific operation on a given string.\n    The method should take a string as input and return a modified version of the string based on the following rules:\n    \"\"\"\n", "entry_point": "stringmethod", "canonical_solution": "\n    if s.islower():\n        return s.upper()\n    elif s.isupper():\n        return s.lower()\n    else:\n        result = \"\"\n        for i, char in enumerate(s):\n            if i % 2 == 0:\n                result += char.upper()\n            else:\n                result += char.lower()\n        return result\n", "test": "def check(candidate):\n    assert candidate(\"hello\") == \"HELLO\"\n    assert candidate(\"WORLD\") == \"world\"\n    assert candidate(\"Python\") == \"PyThOn\"\n", "cot": "How to solve:\nStep 1. Check if the input string is all lowercase, return the uppercase version.\nStep 2. Check if the input string is all uppercase, return the lowercase version.\nStep 3. If not all lowercase or all uppercase, create an empty string 'result'.\nStep 4. Iterate through the characters of the input string using enumerate.\nStep 5. If the index is even, convert the character to uppercase and add to 'result'.\nStep 6. If the index is odd, convert the character to lowercase and add to 'result'.\nStep 7. Return the modified 'result' string."}
{"task_id": "valid/105", "prompt": "def has_zero_sum(arr):\n    \"\"\"\n    Given an array of integers, write a program that checks if any two numbers in the array sum to 0.\n    If a pair of numbers that sums to 0 exists, the program should return True; otherwise, it should return False.\n    \"\"\"\n", "entry_point": "has_zero_sum", "canonical_solution": "    seen_numbers = set()\n    for num in arr:\n        if -num in seen_numbers:\n            return True\n        seen_numbers.add(num)\n    return False\n", "test": "def check(candidate):\n    assert candidate([1, 2, 3, -3]) == True\n    assert candidate([4, 5, 6, 7]) == False\n    assert candidate([0, 0, 0, 0]) == True", "cot": "How to solve:\nStep 1. Create an empty set called seen_numbers to store the numbers seen so far.\nStep 2. Iterate through the input array.\n    - For each number, check if its negative value is in the seen_numbers set.\n    - If it is, return True as a pair of numbers that sum to 0 exists.\n    - If not, add the number to the seen_numbers set.\nStep 3. If the loop completes without finding a pair, return False as no pair of numbers sums to 0."}
{"task_id": "valid/106", "prompt": "def extract_latest_versions(dependencies):\n    \"\"\"\n    You are tasked with implementing a Python function that processes a list of dependencies and extracts the latest version for each dependency.\n    Each dependency is represented as a tuple containing the package name and the version number in the format ('package_name', 'version_number').\n    The version number follows the pattern '000X_auto_YYYYMMDD_HHMM', where X is a numerical identifier and YYYYMMDD_HHMM represents the date and time of the version.\n    \"\"\"\n", "entry_point": "extract_latest_versions", "canonical_solution": "\n    latest_versions = {}\n    for package, version in dependencies:\n        if package in latest_versions:\n            if int(version.split(\"_\")[0]) > int(latest_versions[package].split(\"_\")[0]):\n                latest_versions[package] = version\n        else:\n            latest_versions[package] = version\n    return latest_versions\n", "test": "def check(candidate):\n    assert candidate([('package1', '0001_auto_20220101_1200'), ('package2', '0002_auto_20220102_1300'), ('package1', '0003_auto_20220103_1400')]) == {'package1': '0003_auto_20220103_1400', 'package2': '0002_auto_20220102_1300'}\n    assert candidate([('package1', '0001_auto_20220101_1200'), ('package2', '0002_auto_20220102_1300'), ('package3', '0003_auto_20220103_1400')]) == {'package1': '0001_auto_20220101_1200', 'package2': '0002_auto_20220102_1300', 'package3': '0003_auto_20220103_1400'}\n    assert candidate([('package1', '0001_auto_20220101_1200'), ('package1', '0002_auto_20220102_1300'), ('package1', '0003_auto_20220103_1400')]) == {'package1': '0003_auto_20220103_1400'}\n", "cot": "How to solve:\nStep 1. Create an empty dictionary to store the latest versions of each package.\nStep 2. Iterate through the list of dependencies.\nStep 3. For each dependency, check if the package is already in the latest_versions dictionary.\n    - If it is, compare the numerical identifier of the version with the existing one and update if necessary.\n    - If it's not, add the package and version to the latest_versions dictionary.\nStep 4. Return the latest_versions dictionary containing the latest version for each package."}
{"task_id": "valid/107", "prompt": "def categorize_causes_of_death(causes):\n    \"\"\"\n    You are tasked with creating a program to analyze a list of unusual and bizarre causes of death.\n    Each cause of death is represented as a string in the format \"action result\", where the action is what the person was doing and the result is the unfortunate outcome.\n    Your program should categorize the causes of death into different groups based on the action performed.\n\n    \"\"\"\n", "entry_point": "categorize_causes_of_death", "canonical_solution": "\n    categorized_causes = {}\n    for cause in causes:\n        action, result = cause.split(\" \", 1)\n        action = action.rstrip(\".,\")\n        if action in categorized_causes:\n            categorized_causes[action].append(result)\n        else:\n            categorized_causes[action] = [result]\n    return categorized_causes\n", "test": "def check(candidate):\n    assert candidate([\"Swimming drowned\", \"Eating poisoned\", \"Sleeping suffocated\"]) == {'Swimming': ['drowned'], 'Eating': ['poisoned'], 'Sleeping': ['suffocated']}\n    assert candidate([\"Running fell\", \"Reading electrocuted\", \"Cooking burned\"]) == {'Running': ['fell'], 'Reading': ['electrocuted'], 'Cooking': ['burned']}\n    assert candidate([\"Dancing slipped\", \"Driving crashed\", \"Playing electrocuted\"]) == {'Dancing': ['slipped'], 'Driving': ['crashed'], 'Playing': ['electrocuted']}", "cot": "How to solve:\nStep 1. Create an empty dictionary to store categorized causes of death.\nStep 2. Iterate through each cause in the input list.\n    - Split the cause into action and result.\n    - Remove any trailing punctuation from the action.\n    - If the action is already in the categorized_causes dictionary, append the result to its list.\n    - If the action is not in the dictionary, create a new key-value pair with the action and a list containing the result.\nStep 3. Return the categorized_causes dictionary."}
{"task_id": "valid/108", "prompt": "def generate_code_name(name):\n    \"\"\"\n    You are tasked with creating a Python function that generates a unique code name for a user based on their input name.\n    The code name should be created by replacing any spaces in the input name with hyphens and converting the entire name to lowercase.\n    Your task is to implement the `generate_code_name` function that takes a string `name` as input and returns the code name as a string.\n    \"\"\"\n", "entry_point": "generate_code_name", "canonical_solution": "\n    return name.lower().replace(\" \", \"-\")\n", "test": "def check(candidate):\n    assert candidate(\"John Doe\") == \"john-doe\"\n    assert candidate(\"Alice Smith\") == \"alice-smith\"\n    assert candidate(\"Bob Johnson Jr.\") == \"bob-johnson-jr.\"\n", "cot": "How to solve:\nStep 1. Convert the input name to lowercase using the `lower()` method.\nStep 2. Replace any spaces in the lowercase name with hyphens using the `replace()` method.\nStep 3. Return the modified name as the code name."}
{"task_id": "valid/109", "prompt": "def detect_non_ascii(text):\n    \"\"\"\n    Provide a solution to detect any non-ASCII characters in a given text string.\n    \"\"\"\n", "entry_point": "detect_non_ascii", "canonical_solution": "    non_ascii_chars = [char for char in text if ord(char) > 128]\n    return non_ascii_chars\n", "test": "def check(candidate):\n    assert candidate(\"Hello, World!\") == []\n    assert candidate(\"Caf\u00e9\") == ['\u00e9']\n    assert candidate(\"12345\") == []", "cot": "How to solve:\nStep 1. Iterate through each character in the text.\nStep 2. Use the ord() function to get the Unicode code point of the character.\nStep 3. Check if the Unicode code point is greater than 128.\nStep 4. If the Unicode code point is greater than 128, add the character to the list of non-ASCII characters.\nStep 5. Return the list of non-ASCII characters."}
{"task_id": "valid/110", "prompt": "def remove_punctuations(string):\n    \"\"\"\n    Create a program to remove punctuation marks from a given string.\n    \"\"\"\n", "entry_point": "remove_punctuations", "canonical_solution": "    punc_list = [\",\", \".\", \":\", \";\", \"-\", \"!\", \"?\"]\n    for punc in punc_list:\n        string = string.replace(punc, \"\")\n    return string\n", "test": "def check(candidate):\n    assert candidate(\"Hello, World!\") == \"Hello World\"\n    assert candidate(\"How are you?\") == \"How are you\"\n    assert candidate(\"No punctuation here\") == \"No punctuation here\"", "cot": "How to solve:\nStep 1. Define a function that takes a string as input.\nStep 2. Create a list of punctuation marks to be removed.\nStep 3. Iterate through the punctuation list.\n    - For each punctuation mark, use the replace method to remove it from the string.\nStep 4. Return the modified string without punctuation marks."}
{"task_id": "valid/111", "prompt": "def raise_power(num_list, exp):\n    \"\"\"\n    Debug and modify the following code to include exception handling and print the correct output.\n    Also, create a function that will take a list and exponent value as inputs and return a list with each element raised to the given exponent.\n    The code is:\n    \"\"\"\n", "entry_point": "raise_power", "canonical_solution": "\n    output = []\n    for n in num_list:\n        try:\n            output.append(n**exp)\n        except TypeError:\n            print(f\"'{n}' is not a number.\")\n    return output\n", "test": "def check(candidate):\n    assert candidate([2, 3, 4], 2) == [4, 9, 16]\n    assert candidate([5, 6, 7], 3) == [125, 216, 343]\n    assert candidate([1, 2, 3], 0) == [1, 1, 1]", "cot": "How to solve:\nStep 1. Define a function raise_power that takes num_list and exp as inputs.\nStep 2. Initialize an empty list called output.\nStep 3. Iterate through num_list.\nStep 4. Inside the loop, use a try-except block to handle TypeError when raising n to the power of exp.\nStep 5. If a TypeError occurs, print a message indicating that the element is not a number.\nStep 6. Return the output list containing the elements raised to the given exponent."}
{"task_id": "valid/112", "prompt": "def print_min_values(grid):\n    \"\"\"\n    You are given a list of lists, where each inner list represents a row of a 2D grid.\n    Your task is to write a function that returns the minimum value from each row and prints them in the order they appear in the grid.\n    \"\"\"\n", "entry_point": "print_min_values", "canonical_solution": "\n    for row in grid:\n        print(min(row))\n", "test": "def check(candidate):\n    assert candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == None\n    assert candidate([[10, 5, 8], [3, 12, 6], [9, 7, 11]]) == None\n    assert candidate([[5, 3, 9], [2, 7, 4], [8, 6, 1]]) == None\n", "cot": "How to solve:\nStep 1. Iterate through each row in the grid.\nStep 2. Find the minimum value in each row using the min() function.\nStep 3. Print the minimum value of each row."}
{"task_id": "valid/113", "prompt": "def print_thank_you(n, current_num=0):\n    \"\"\"\n    Write a recursive function to output \"Thank you\" for the first 'n' even numbers, where 'n' is a user-provided input.\n    The function should also handle input validation to ensure only positive integer values are accepted.\n    \"\"\"\n", "entry_point": "print_thank_you", "canonical_solution": "\n    if not isinstance(n, int) or n <= 0:\n        print(\"Please enter a positive integer.\")\n    elif n == 0:\n        return\n    else:\n        if current_num % 2 == 0:\n            print(\"Thank you\")\n            print_thank_you(n - 1, current_num + 1)\n        else:\n            print_thank_you(n, current_num + 1)\n", "test": "def check(candidate):\n    assert candidate(3) == None\n    assert candidate(5) == None\n    assert candidate(0) == None\n", "cot": "How to solve:\nStep 1. Check if the input 'n' is a positive integer. If not, print a message and stop.\nStep 2. If 'n' is 0, return.\nStep 3. If the current number is even, print \"Thank you\" and call the function recursively with n-1 and the next even number.\nStep 4. If the current number is odd, call the function recursively with n and the next number."}
{"task_id": "valid/114", "prompt": "def count_consecutive_occurrences(lst, element):\n    \"\"\"\n    Counts the number of times a particular element occurs consecutively in a list.\n    Args:\n        lst (list): The input list.\n        element: The element to count.\n    Returns:\n        int: The number of consecutive occurrences of the element in the list.\n    \"\"\"\n", "entry_point": "count_consecutive_occurrences", "canonical_solution": "    count = 0\n    result = 0\n    for item in lst:\n        if item == element:\n            count += 1\n        else:\n            count = 0\n        if count > result:\n            result = count\n    return result\n", "test": "def check(candidate):\n    assert candidate([1, 2, 2, 3, 3, 3, 4, 4, 4, 4], 3) == 3\n    assert candidate([5, 5, 5, 5, 5], 5) == 5\n    assert candidate([1, 1, 2, 2, 2, 2, 3, 3], 2) == 4", "cot": "How to solve:\nStep 1. Initialize count and result as 0.\nStep 2. Iterate through the input list.\n    - If the current item is equal to the specified element, increment the count.\n    - If the current item is not equal to the specified element, reset the count to 0.\n    - If the count is greater than the result, update the result with the count.\nStep 3. Return the result, which represents the number of consecutive occurrences of the specified element in the list."}
{"task_id": "valid/115", "prompt": "from functools import partial\n\n\ndef check_repdigit(num, base=10):\n    \"\"\"\n    Check if a given number is a repdigit number.\n    Parameters:\n        num (int): The number to be checked.\n        base (int, optional): The base in which to interpret the number (default is 10).\n    Returns:\n        bool: True if the number is a repdigit, False otherwise.\n    Notes:\n        A repdigit number is a positive number in a given base, where all the digits in the number are the same.\n        For example, in base 10, 1111, 222, and 99 are repdigit numbers, while 1234 and 101 are not.\n    Examples:\n        >>> check_repdigit(1111)\n        True\n        >>> check_repdigit(1234)\n        False\n        >>> check_repdigit(101, base=2)\n        True\n    \"\"\"\n", "entry_point": "check_repdigit", "canonical_solution": "    digits = set()\n    while num > 0:\n        digit = num % base\n        digits.add(digit)\n        num //= base\n    return len(digits) == 1\n", "test": "def check(candidate):\n    assert candidate(1111) == True\n    assert candidate(222) == True\n    assert candidate(1234) == False", "cot": "How to solve:\nStep 1. Create a function check_repdigit that takes a number and an optional base as input.\nStep 2. Initialize an empty set called digits.\nStep 3. While the number is greater than 0, find the remainder when divided by the base and add it to the set digits. Then update the number by floor dividing it by the base.\nStep 4. Return True if the length of the set digits is 1, indicating that all the digits in the number are the same, otherwise return False."}
{"task_id": "valid/116", "prompt": "def remove_vowels_recursive(s):\n    \"\"\"\n    Write a function that takes as input a string and returns a new string with all the vowels removed.\n    The function should have a time complexity of O(n), where n is the length of the input string, and should use constant space complexity.\n    Additionally, the function should handle both uppercase and lowercase vowels, and any occurrence of a vowel should be removed regardless of its position in the word.\n    Implement the function recursively.\n    \"\"\"\n", "entry_point": "remove_vowels_recursive", "canonical_solution": "    if len(s) == 0:\n        return \"\"\n    elif s[0].lower() in \"aeiou\":\n        return remove_vowels_recursive(s[1:])\n    else:\n        return s[0] + remove_vowels_recursive(s[1:])\n", "test": "def check(candidate):\n    assert candidate(\"Hello\") == \"Hll\"\n    assert candidate(\"Python\") == \"Pythn\"\n    assert candidate(\"algorithm\") == \"lgrthm\"", "cot": "How to solve:\nStep 1. Define a recursive function that takes a string as input.\nStep 2. Base case: If the string is empty, return an empty string.\nStep 3. Check if the first character of the string is a vowel (both uppercase and lowercase).\n    - If it is a vowel, recursively call the function with the substring starting from the next character.\n    - If it is not a vowel, concatenate the first character with the result of the recursive call on the substring starting from the next character.\nStep 4. Return the result obtained from the recursive calls."}
{"task_id": "valid/117", "prompt": "def generate_cli_help(options):\n    \"\"\"\n    You are tasked with creating a command-line interface (CLI) for a new application.\n    The CLI should accept various options and arguments to customize the behavior of the application.\n    Your goal is to implement a function that generates a help message for the CLI based on a list of option tuples.\n    Each tuple contains the option name and its description.\n    \"\"\"\n", "entry_point": "generate_cli_help", "canonical_solution": "\n    help_message = \"Usage: app_name [OPTIONS]\\n\\nOptions:\\n\"\n    for option in options:\n        help_message += f\"  {option[0]:<12}{option[1]}\\n\"\n    return help_message\n", "test": "def check(candidate):\n    assert candidate([(\"h\", \"Display help message\"), (\"v\", \"Enable verbose mode\")]) == \"Usage: app_name [OPTIONS]\\n\\nOptions:\\n  h           Display help message\\n  v           Enable verbose mode\\n\" \n    assert candidate([]) == \"Usage: app_name [OPTIONS]\\n\\nOptions:\\n\"\n    assert candidate([(\"o\", \"Specify output file\"), (\"f\", \"Force overwrite\")]) == \"Usage: app_name [OPTIONS]\\n\\nOptions:\\n  o           Specify output file\\n  f           Force overwrite\\n\"", "cot": "How to solve:\nStep 1. Initialize help_message with the usage format.\nStep 2. Iterate through the options list.\n    - For each option, add its name and description to the help_message.\nStep 3. Return the help_message."}
{"task_id": "valid/118", "prompt": "def get_first_character(input_string):\n    \"\"\"\n    This function takes a string as input and returns the first character of the string.\n    Parameters:\n    input_string (str): The input string.\n    Returns:\n    str: The first character of the input string.\n    \"\"\"\n", "entry_point": "get_first_character", "canonical_solution": "    return input_string[0]\n", "test": "def check(candidate):\n    assert candidate(\"hello\") == \"h\"\n    assert candidate(\"apple\") == \"a\"\n    assert candidate(\"python\") == \"p\"", "cot": "How to solve:\nStep 1. Define a function get_first_character that takes input_string as input.\nStep 2. Return the first character of the input_string using input_string[0]."}
{"task_id": "valid/119", "prompt": "def count_val(Val):\n    \"\"\"\n    Write a function to generate a table of counts of a given value in an input array.\n    \"\"\"\n", "entry_point": "count_val", "canonical_solution": "    result = {}\n    for i in Val:\n        if i in result:\n            result[i] += 1\n        else:\n            result[i] = 1\n    return result\n", "test": "def check(candidate):\n    assert candidate([1, 2, 2, 3, 3, 3, 4, 4, 4, 4]) == {1: 1, 2: 2, 3: 3, 4: 4}\n    assert candidate([5, 5, 5, 5, 5]) == {5: 5}\n    assert candidate([1, 2, 3, 4]) == {1: 1, 2: 1, 3: 1, 4: 1}", "cot": "How to solve:\nStep 1. Initialize an empty dictionary called result.\nStep 2. Iterate through the input array Val.\n    - If the current value i is already a key in the result dictionary, increment its count by 1.\n    - If the current value i is not a key in the result dictionary, add it as a key with a count of 1.\nStep 3. Return the result dictionary containing the counts of each value in the input array."}
{"task_id": "valid/120", "prompt": "def invert_bitset(sample_bitset):\n    \"\"\"\n    BINARY: Inversion of a bitset\n    \"\"\"\n", "entry_point": "invert_bitset", "canonical_solution": "    for i in range(len(sample_bitset)):\n        sample_bitset[i] = not sample_bitset[i]\n    return sample_bitset\n", "test": "def check(candidate):\n    assert candidate([0, 1, 1, 0]) == [1, 0, 0, 1]\n    assert candidate([1, 0, 1]) == [0, 1, 0]\n    assert candidate([1, 1, 1, 1]) == [0, 0, 0, 0]", "cot": "How to solve:\nStep 1. Iterate through each bit in the sample_bitset.\nStep 2. Invert each bit by using the 'not' operator.\nStep 3. Update the bit in the sample_bitset with the inverted value.\nStep 4. Return the modified sample_bitset after inverting all the bits."}
{"task_id": "valid/121", "prompt": "def is_vowel_string(s):\n    \"\"\"\n    Create a method that can check whether a term is formed entirely of vowels.\n    \"\"\"\n", "entry_point": "is_vowel_string", "canonical_solution": "\n    vowels = [\"a\", \"e\", \"i\", \"o\", \"u\", \"A\", \"E\", \"I\", \"O\", \"U\"]\n\n    s_list = list(s)\n\n    for char in s_list:\n        if char not in vowels:\n            return False\n\n    return True\n", "test": "def check(candidate):\n    assert candidate(\"aeiou\") == True\n    assert candidate(\"hello\") == False\n    assert candidate(\"AEIOU\") == True", "cot": "How to solve:\nStep 1. Define a function is_vowel_string that takes a string s as input.\nStep 2. Create a list of vowels containing both lowercase and uppercase vowels.\nStep 3. Convert the input string s into a list of characters.\nStep 4. Iterate through each character in the list.\n    - If the character is not in the list of vowels, return False.\nStep 5. If all characters are found in the list of vowels, return True."}
{"task_id": "valid/122", "prompt": "def count_subsequence(sequence, subsequence):\n    \"\"\"\n    Formulate and construct computer programming linguistics to ascertain and aggregate the frequency of a pinpointed substructure inside a more extensive succession of symbols.\n    This task requires not only identifying the subsequence but also tallying up its instances.\n    The long sequence_of_characters is \"Please find the number of occurrences of this string\", and the designated specific_subsequence in consideration is \"string\".\n    \"\"\"\n", "entry_point": "count_subsequence", "canonical_solution": "\n    return sequence.count(subsequence)\n", "test": "def check(candidate):\n    assert candidate(\"ababababab\", \"ab\") == 5\n    assert candidate(\"hellohellohello\", \"hello\") == 3\n    assert candidate(\"programmingprogramming\", \"gram\") == 2\n", "cot": "How to solve:\nStep 1. Define a function count_subsequence that takes two parameters: sequence and subsequence.\nStep 2. Use the count method to find the number of occurrences of the subsequence within the sequence.\nStep 3. Return the count of occurrences."}
{"task_id": "valid/123", "prompt": "def dividir(h, t):\n    \"\"\"\n    You are tasked with implementing a Python function to perform integer division without using the division operator (`/` or `//`).\n    The function should take two integer inputs, `h` and `t`, representing the dividend and divisor, respectively.\n    The function should return the result of dividing `h` by `t` without using the division operator.\n    \"\"\"\n", "entry_point": "dividir", "canonical_solution": "\n    if t == 0:\n        raise ValueError(\"Division by zero is not allowed\")\n\n    result = 0\n\n    negative = (h < 0) ^ (t < 0)\n\n    h = abs(h)\n    t = abs(t)\n\n    while h >= t:\n        h -= t\n        result += 1\n\n    if negative:\n        result = -result\n\n    return result\n", "test": "def check(candidate):\n    assert candidate(10, 2) == 5\n    assert candidate(20, 4) == 5\n    assert candidate(15, 3) == 5\n", "cot": "How to solve:\nStep 1. Check if the divisor `t` is 0, if so, raise a ValueError.\nStep 2. Initialize the result as 0 and a boolean variable `negative` based on the signs of `h` and `t`.\nStep 3. Take the absolute values of `h` and `t`.\nStep 4. Use a while loop to subtract `t` from `h` until `h` is less than `t`, incrementing the result each time.\nStep 5. If the `negative` flag is True, make the result negative.\nStep 6. Return the result."}
{"task_id": "valid/124", "prompt": "def sum_odd(input_list):\n    \"\"\"\n    Generate the code for a function which takes a list of integers as an argument and returns the sum of odd elements in the list.\n    \"\"\"\n", "entry_point": "sum_odd", "canonical_solution": "    total = 0\n    for num in input_list:\n        if num % 2 != 0:\n            total += num\n    return total\n", "test": "def check(candidate):\n    assert candidate([1, 2, 3, 4, 5]) == 9\n    assert candidate([10, 20, 30, 40, 50]) == 0\n    assert candidate([11, 22, 33, 44, 55]) == 99", "cot": "How to solve:\nStep 1. Initialize total as 0.\nStep 2. Iterate through input_list.\n    - If the number is odd (num % 2 != 0), add it to the total.\nStep 3. Return the total sum of odd elements."}
{"task_id": "valid/125", "prompt": "def count_consonants(string=\"\"):\n    \"\"\"\n    Count the number of consonants in a given string.\n\n    Parameters:\n    - string: A string (default is an empty string)\n\n    Returns:\n    - int: The number of consonants in the string\n\n    Consonants are any letters of the alphabet that are not vowels. In this function, we consider only English\n    alphabets.\n    \"\"\"\n", "entry_point": "count_consonants", "canonical_solution": "    vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n\n    string = string.lower()\n\n    count = 0\n\n    for char in string:\n        if char.isalpha() and char not in vowels:\n            count += 1\n\n    return count\n", "test": "def check(candidate):\n    assert candidate(\"Hello World\") == 7\n    assert candidate(\"Python Programming\") == 13\n    assert candidate(\"AEIOUaeiou\") == 0", "cot": "How to solve:\nStep 1. Define a function that counts the number of consonants in a given string.\nStep 2. Create a list of vowels.\nStep 3. Convert the input string to lowercase.\nStep 4. Initialize a count variable to 0.\nStep 5. Iterate through each character in the string.\nStep 6. Check if the character is an alphabet and not a vowel.\nStep 7. If the condition is met, increment the count.\nStep 8. Return the final count of consonants in the string."}
{"task_id": "valid/126", "prompt": "def simulate_electron_behavior(grid_energies, ados, dope, dos_grid_size):\n    \"\"\"\n    You are given a snippet of code that is part of a program for simulating the behavior of electrons in a material.\n    The code snippet contains a section that calculates the number of electrons based on certain energy values and another section that adjusts the number of electrons based on doping levels.\n    Your task is to implement a function that simulates this electron behavior based on the given code snippet.\n    \"\"\"\n", "entry_point": "simulate_electron_behavior", "canonical_solution": "\n    n_electrons = 0.0\n    for i in range(dos_grid_size - 1):\n        if grid_energies[i] * grid_energies[i + 1] <= 0.0:\n            n_electrons = ados[i] - grid_energies[i] / (\n                grid_energies[i + 1] - grid_energies[i]\n            ) * (ados[i + 1] - ados[i])\n            break\n    if dope != 0.0:\n        n_electrons += dope\n        for i in range(dos_grid_size - 1):\n            if (ados[i] - n_electrons) * (ados[i + 1] - n_electrons) < 0.0:\n                if i == (dos_grid_size - 1) or ados[i] == ados[i + 1]:\n                    raise ValueError(\"Too much doping\")\n    return n_electrons\n", "test": "def check(candidate):\n    assert candidate([1, 2, 3, 4, 5], [10, 20, 30, 40, 50], 0, 5) == 0.0\n    assert candidate([-1, -2, -3, -4, -5], [-10, -20, -30, -40, -50], 0, 5) == 0.0\n    assert candidate([1, 2, 3, 4, 5], [10, 20, 30, 40, 50], 10, 5) == 10.0", "cot": "How to solve:\nStep 1. Initialize the number of electrons, n_electrons, as 0.0.\nStep 2. Iterate through the dos_grid_size - 1.\n    - If the product of grid_energies[i] and grid_energies[i + 1] is less than or equal to 0.0, calculate n_electrons based on ados and grid_energies.\n    - Break the loop after the calculation.\nStep 3. If dope is not equal to 0.0, add dope to n_electrons.\nStep 4. Iterate through dos_grid_size - 1.\n    - If the product of (ados[i] - n_electrons) and (ados[i + 1] - n_electrons) is less than 0.0, and the conditions are met, raise a ValueError.\nStep 5. Return n_electrons."}
{"task_id": "valid/127", "prompt": "def remove_duplicates_from_tuple(tuple_to_process):\n    \"\"\"\n    Removes duplicate elements from a tuple.\n    Args:\n    - tuple_to_process: The tuple to remove duplicates from.\n    Returns:\n    - The tuple with duplicate elements removed.\n    Example Usage:\n    >>> remove_duplicates_from_tuple((1, 2, 3, 2, 1))\n    (1, 2, 3)\n    \"\"\"\n", "entry_point": "remove_duplicates_from_tuple", "canonical_solution": "    return tuple(set(tuple_to_process))\n", "test": "def check(candidate):\n    assert candidate((1, 2, 3, 2, 1)) == (1, 2, 3)\n    assert candidate((4, 4, 4, 4)) == (4,)\n    assert candidate((1, 2, 3, 4)) == (1, 2, 3, 4)", "cot": "How to solve:\nStep 1. Convert the input tuple to a set to remove duplicates.\nStep 2. Convert the set back to a tuple.\nStep 3. Return the tuple with duplicate elements removed."}
{"task_id": "valid/128", "prompt": "def maximize_consecutive_difference(arr):\n    \"\"\"\n    Rearranges the given array of integers to maximize the absolute difference between consecutive elements.\n    Parameters:\n    arr (list): The array of integers to be rearranged.\n    Returns:\n    list: The rearranged array.\n    \"\"\"\n", "entry_point": "maximize_consecutive_difference", "canonical_solution": "    arr.sort()\n    rearranged_arr = []\n    left = 0\n    right = len(arr) - 1\n    while left < right:\n        rearranged_arr.append(arr[right])\n        right -= 1\n        rearranged_arr.append(arr[left])\n        left += 1\n    if left == right:\n        rearranged_arr.append(arr[left])\n    return rearranged_arr\n", "test": "def check(candidate):\n    assert candidate([1, 2, 3, 4, 5]) == [5, 1, 4, 2, 3]\n    assert candidate([5, 4, 3, 2, 1]) == [5, 1, 4, 2, 3]\n    assert candidate([10, 20, 30, 40, 50]) == [50, 10, 40, 20, 30]", "cot": "How to solve:\nStep 1. Sort the input array.\nStep 2. Initialize two pointers, left at the start of the array (0) and right at the end of the array (len(arr) - 1).\nStep 3. Iterate through the array using the two pointers:\n    - Append the element at the right pointer to the rearranged array.\n    - Decrement the right pointer.\n    - Append the element at the left pointer to the rearranged array.\n    - Increment the left pointer.\nStep 4. If left pointer equals right pointer, append the remaining element to the rearranged array.\nStep 5. Return the rearranged array."}
{"task_id": "valid/129", "prompt": "def create_color_dictionary(color_list):\n    \"\"\"\n    Write a function that takes a list of tuples as input, where each tuple consists of a color name and its value.\n    The function should create a dictionary where the color names are the keys and the corresponding values are the values in the dictionary.\n    The function should then return this dictionary.\n    \"\"\"\n", "entry_point": "create_color_dictionary", "canonical_solution": "    color_dict = {}\n    color_names = set()\n    color_values = set()\n\n    for color_name, color_value in color_list:\n        if color_name in color_names:\n            raise ValueError(f\"Duplicate color name: {color_name}\")\n        if color_value in color_values:\n            raise ValueError(f\"Duplicate color value: {color_value}\")\n\n        color_dict[color_name] = color_value\n        color_names.add(color_name)\n        color_values.add(color_value)\n\n    return color_dict\n", "test": "def check(candidate):\n    assert candidate([('red', 1), ('blue', 2), ('green', 3)]) == {'red': 1, 'blue': 2, 'green': 3}\n    assert candidate([('black', 5), ('white', 6)]) == {'black': 5, 'white': 6}\n    assert candidate([('yellow', 4)]) == {'yellow': 4}", "cot": "How to solve:\nStep 1. Create an empty dictionary color_dict and two empty sets color_names and color_values.\nStep 2. Iterate through color_list using a for loop.\n    - For each tuple (color_name, color_value), check if color_name is already in color_names set, if yes, raise a ValueError for duplicate color name.\n    - Check if color_value is already in color_values set, if yes, raise a ValueError for duplicate color value.\n    - Add color_name as key and color_value as value to color_dict.\n    - Add color_name to color_names set and color_value to color_values set.\nStep 3. Return color_dict."}
{"task_id": "valid/130", "prompt": "def check_balanced_parentheses(string):\n    \"\"\"\n    Generate a program to check for balanced parentheses in a given string.\n    \"\"\"\n", "entry_point": "check_balanced_parentheses", "canonical_solution": "    stack = []\n    for char in string:\n        if char == \"(\":\n            stack.append(\"(\")\n        elif char == \")\":\n            if len(stack) == 0:\n                return False\n            else:\n                stack.pop()\n    return stack == []\n", "test": "def check(candidate):\n    assert candidate(\"((()))\") == True\n    assert candidate(\"()()()\") == True\n    assert candidate(\"(()\") == False", "cot": "How to solve:\nStep 1. Initialize an empty stack.\nStep 2. Iterate through each character in the string.\n    - If the character is '(', push it onto the stack.\n    - If the character is ')', check if the stack is empty. If it is, return False. Otherwise, pop from the stack.\nStep 3. After iterating through the string, check if the stack is empty. If it is, return True; otherwise, return False."}
{"task_id": "valid/131", "prompt": "def extract_first_three_unique_elements(lst):\n    \"\"\"\n    Write a Python code to extract the first 3 elements of the following list, but do not use the built-in slicing functionality.\n    Instead, you should manually iterate through the list and extract the elements one by one.\n    Your code should also handle cases where the list may contain duplicate elements and should return a list with unique elements only.\n    \"\"\"\n", "entry_point": "extract_first_three_unique_elements", "canonical_solution": "    extracted = []\n    unique_elements = set()\n\n    for element in lst:\n        if element not in unique_elements:\n            extracted.append(element)\n            unique_elements.add(element)\n\n        if len(extracted) == 3:\n            break\n\n    return extracted\n", "test": "def check(candidate):\n    assert candidate([1, 2, 3, 4, 5, 6]) == [1, 2, 3]\n    assert candidate([1, 1, 2, 2, 3, 3, 4, 4, 5, 5]) == [1, 2, 3]\n    assert candidate([5, 4, 3, 2, 1]) == [5, 4, 3]", "cot": "How to solve:\nStep 1. Initialize an empty list 'extracted' and an empty set 'unique_elements'.\nStep 2. Iterate through the input list.\n    - If the element is not in 'unique_elements', add it to 'extracted' and 'unique_elements'.\n    - If the length of 'extracted' reaches 3, break the loop.\nStep 3. Return the 'extracted' list containing the first 3 unique elements."}
{"task_id": "valid/132", "prompt": "def sorted_fruit_list(fruit_list):\n    \"\"\"\n    Create a programming function that is capable of taking in an array of strings containing various names of fruits and generates a singular string output with the names of these fruits organized and neatly listed according to the rules of lexicographical sequence.\n    \"\"\"\n", "entry_point": "sorted_fruit_list", "canonical_solution": "\n    fruit_list.sort()\n\n    output_string = \", \".join(fruit_list)\n\n    return output_string\n", "test": "def check(candidate):\n    assert candidate([\"apple\", \"banana\", \"cherry\"]) == \"apple, banana, cherry\"\n    assert candidate([\"grape\", \"kiwi\", \"mango\"]) == \"grape, kiwi, mango\"\n    assert candidate([\"orange\", \"pear\", \"strawberry\"]) == \"orange, pear, strawberry\"", "cot": "How to solve:\nStep 1. Sort the input fruit_list in lexicographical order.\nStep 2. Join the sorted fruit_list elements with \", \" to create a single string.\nStep 3. Return the output string."}
{"task_id": "valid/133", "prompt": "def generate_sublists(lst):\n    \"\"\"\n    Generate all possible sublists of a given list.\n    Args:\n        lst (list): The input list.\n    Returns:\n        list: A list containing all possible sublists of the input list.\n    \"\"\"\n", "entry_point": "generate_sublists", "canonical_solution": "    n = len(lst)\n    sublists = []\n    for i in range(n):\n        for j in range(i + 1, n + 1):\n            sublists.append(lst[i:j])\n    return sublists\n", "test": "def check(candidate):\n    assert candidate([1, 2, 3]) == [[1], [1, 2], [1, 2, 3], [2], [2, 3], [3]]\n    assert candidate(['a', 'b', 'c']) == [['a'], ['a', 'b'], ['a', 'b', 'c'], ['b'], ['b', 'c'], ['c']]\n    assert candidate([]) == []", "cot": "How to solve:\nStep 1. Initialize an empty list to store sublists.\nStep 2. Iterate through the input list using two nested loops.\n    - The outer loop iterates over the start index of the sublist.\n    - The inner loop iterates over the end index of the sublist.\n    - Append the sublist from start index to end index to the sublists list.\nStep 3. Return the list of all possible sublists."}
{"task_id": "valid/134", "prompt": "import re\n\n\ndef match_digit_dot_digit(string):\n    \"\"\"\n    This function checks if a given string contains at least one digit followed by a dot and another digit.\n    Parameters:\n    string (str): The string to be checked.\n    Returns:\n    bool: True if the string matches the pattern, False otherwise.\n    \"\"\"\n", "entry_point": "match_digit_dot_digit", "canonical_solution": "    pattern = r\"\\d\\.\\d\"\n    return bool(re.search(pattern, string))\n", "test": "def check(candidate):\n    assert candidate(\"abc\") == False\n    assert candidate(\"123.4\") == True\n    assert candidate(\"5.678\") == True", "cot": "How to solve:\nStep 1. Define a function match_digit_dot_digit that takes a string as input.\nStep 2. Define a regular expression pattern \"\\d\\.\\d\" to match a digit followed by a dot and another digit.\nStep 3. Use re.search to check if the pattern is present in the input string.\nStep 4. Return True if the pattern is found, otherwise return False."}
{"task_id": "valid/135", "prompt": "def generate_migration_operation(app_name, model_name, field_name):\n    \"\"\"\n    You are tasked with creating a migration operation for a Django application.\n    The application has a model named `CommitteeMember` in an app called `history`.\n    The migration operation involves altering a field in the `CommitteeMember` model.\n    \"\"\"\n", "entry_point": "generate_migration_operation", "canonical_solution": "\n    migration_operation = (\n        f\"migrations.AlterField(\"\n        f\"model_name='{model_name}', \"\n        f\"name='{field_name}', \"\n        f\"field=models.CharField(max_length=100), \"\n        f\"preserve_default=True\"\n        f\")\"\n    )\n    return migration_operation\n", "test": "def check(candidate):\n    assert candidate('history', 'CommitteeMember', 'name') == \"migrations.AlterField(model_name='CommitteeMember', name='name', field=models.CharField(max_length=100), preserve_default=True)\"\n    assert candidate('app1', 'Model1', 'field1') == \"migrations.AlterField(model_name='Model1', name='field1', field=models.CharField(max_length=100), preserve_default=True)\"\n    assert candidate('app2', 'Model2', 'field2') == \"migrations.AlterField(model_name='Model2', name='field2', field=models.CharField(max_length=100), preserve_default=True)\"\n", "cot": "How to solve:\nStep 1. Define a function that takes app_name, model_name, and field_name as parameters.\nStep 2. Create a migration operation string using f-strings.\n    - Use migrations.AlterField to alter a field in the model.\n    - Set the model_name, field_name, and field type (CharField with max_length=100).\n    - Set preserve_default=True to preserve the default value.\nStep 3. Return the generated migration operation string."}
{"task_id": "valid/136", "prompt": "def find_common_elements_sum(list1, list2):\n    \"\"\"\n    This function takes two lists as input, list1 and list2, and returns the sum of the common elements between the two lists.\n    Parameters:\n    list1 (list): The first input list.\n    list2 (list): The second input list.\n    Returns:\n    int or float: The sum of the common elements between list1 and list2.\n    \"\"\"\n", "entry_point": "find_common_elements_sum", "canonical_solution": "    common_elements = set(list1) & set(list2)\n    return sum(common_elements)\n", "test": "def check(candidate):\n    assert candidate([1, 2, 3], [2, 3, 4]) == 5\n    assert candidate([5, 6, 7], [7, 8, 9]) == 7\n    assert candidate([10, 20, 30], [20, 30, 40]) == 50", "cot": "How to solve:\nStep 1. Find the common elements between list1 and list2 using set intersection.\nStep 2. Calculate the sum of the common elements.\nStep 3. Return the sum."}
{"task_id": "valid/137", "prompt": "import math\n\n\ndef calculate_forecast_period(df):\n    \"\"\"\n    You are working on a financial forecasting application and need to implement a function to calculate the forecast period based on the length of a given dataset.\n    The forecast period is determined by taking 1% of the dataset length and rounding it up to the nearest integer.\n    You are given a dataset `df` and the Python `math` module for mathematical operations.\n    \"\"\"\n", "entry_point": "calculate_forecast_period", "canonical_solution": "\n    forecast_out = int(math.ceil(0.01 * len(df)))\n    return forecast_out\n", "test": "def check(candidate):\n    assert candidate([1, 2, 3, 4, 5]) == 1\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]) == 1", "cot": "How to solve:\nStep 1. Calculate 1% of the dataset length by multiplying the length of the dataset by 0.01.\nStep 2. Round up the result from step 1 to the nearest integer using the math.ceil() function.\nStep 3. Return the rounded-up value as the forecast period."}
{"task_id": "valid/138", "prompt": "def sort_by_attribute(array, attr):\n    \"\"\"\n    Design an algorithm to sort a list of JSON objects by the value of an attribute.\n    \"\"\"\n", "entry_point": "sort_by_attribute", "canonical_solution": "    for q in range(len(array) - 1):\n        for i in range(len(array) - 1 - q):\n            if array[i][attr] > array[i + 1][attr]:\n                array[i], array[i + 1] = array[i + 1], array[i]\n    return array\n", "test": "def check(candidate):\n    assert candidate([{'name': 'Alice', 'age': 25}, {'name': 'Bob', 'age': 20}], 'age') == [{'name': 'Bob', 'age': 20}, {'name': 'Alice', 'age': 25}]\n    assert candidate([{'name': 'John', 'score': 85}, {'name': 'Emma', 'score': 92}], 'score') == [{'name': 'John', 'score': 85}, {'name': 'Emma', 'score': 92}]\n    assert candidate([{'city': 'New York', 'population': 8000000}, {'city': 'Los Angeles', 'population': 4000000}], 'population') == [{'city': 'Los Angeles', 'population': 4000000}, {'city': 'New York', 'population': 8000000}]", "cot": "How to solve:\nStep 1. Iterate through the list of JSON objects using two nested loops.\nStep 2. Compare the value of the specified attribute for adjacent objects.\nStep 3. If the value of the attribute for the current object is greater than the value of the attribute for the next object, swap the objects.\nStep 4. Continue this process until the list is sorted based on the specified attribute.\nStep 5. Return the sorted list of JSON objects."}
{"task_id": "valid/139", "prompt": "from typing import List\n\n\ndef paginate_items(\n    items: List[str], items_per_page: int, page_number: int\n) -> List[str]:\n    \"\"\"\n    You are tasked with implementing a program to paginate a list of items.\n    Given a list of items and the number of items per page, the program should return a paginated list of items.\n    \"\"\"\n", "entry_point": "paginate_items", "canonical_solution": "\n    start_index = (page_number - 1) * items_per_page\n    end_index = start_index + items_per_page\n    return items[start_index:end_index]\n", "test": "def check(candidate):\n    assert candidate([\"apple\", \"banana\", \"cherry\", \"date\", \"elderberry\"], 2, 1) == [\"apple\", \"banana\"]\n    assert candidate([\"apple\", \"banana\", \"cherry\", \"date\", \"elderberry\"], 2, 2) == [\"cherry\", \"date\"]\n    assert candidate([\"apple\", \"banana\", \"cherry\", \"date\", \"elderberry\"], 3, 2) == [\"date\", \"elderberry\"]\n", "cot": "How to solve:\nStep 1. Calculate the start index of the page by subtracting 1 from the page number and multiplying by the items per page.\nStep 2. Calculate the end index by adding the start index to the items per page.\nStep 3. Return the sublist of items from the start index to the end index."}
{"task_id": "valid/140", "prompt": "def long_integer_doubler(n_str):\n    \"\"\"\n    Write a function that takes as input a very long integer n (up to 1 billion digits) stored in a string and returns the string representation of the number doubled.\n    The primary challenge is to implement it without using any built-in BigInteger libraries or converting the full input string to an integer.\n    You should take into account the possibility of carrying in the multiplication process.\n    \"\"\"\n", "entry_point": "long_integer_doubler", "canonical_solution": "\n    carry = 0\n    result = []\n    for digit in reversed(n_str):\n        temp = int(digit) * 2 + carry\n        if temp >= 10:\n            carry = 1\n            temp -= 10\n        else:\n            carry = 0\n        result.append(str(temp))\n    if carry:\n        result.append(str(carry))\n    return \"\".join(reversed(result))\n", "test": "def check(candidate):\n    assert candidate(\"123456789\") == \"246913578\"\n    assert candidate(\"999999999\") == \"1999999998\"\n    assert candidate(\"9876543210\") == \"19753086420\"\n", "cot": "How to solve:\nStep 1. Initialize carry as 0 and an empty list for the result.\nStep 2. Iterate through the input string in reverse order.\nStep 3. For each digit, double it, add the carry, and update the carry if necessary.\nStep 4. Append the result to the list.\nStep 5. If there's a carry after the loop, append it to the result list.\nStep 6. Join the reversed result list and return the doubled number as a string."}
{"task_id": "valid/141", "prompt": "def get_preset_coordinates(preset_name):\n    \"\"\"\n    You are working on a robotics project that involves controlling a robotic arm using ROS (Robot Operating System).\n    The code snippet provided initializes a node for controlling the reflex of the robotic arm.\n    The `presets` dictionary contains preset positions for the robotic arm, where the keys represent the preset names and the values are tuples of three floating-point numbers representing the x, y, and z coordinates.\n    The `main` function initializes the ROS node for reflex control.\n    \"\"\"\n", "entry_point": "get_preset_coordinates", "canonical_solution": "\n    presets = {\"o\": (0.0, 0.0, 0.0), \"c\": (3.5, 3.5, 3.5), \"c2\": (3.5, 3.5, 0.0)}\n    if preset_name in presets:\n        return presets[preset_name]\n    else:\n        return \"Preset not available\"\n", "test": "def check(candidate):\n    assert candidate(\"o\") == (0.0, 0.0, 0.0)\n    assert candidate(\"c\") == (3.5, 3.5, 3.5)\n    assert candidate(\"c2\") == (3.5, 3.5, 0.0)", "cot": "How to solve:\nStep 1. Define a dictionary `presets` containing preset positions for the robotic arm.\nStep 2. Check if the given `preset_name` exists in the `presets` dictionary.\n    - If it exists, return the corresponding preset coordinates.\n    - If it doesn't exist, return \"Preset not available\"."}
{"task_id": "valid/142", "prompt": "def find_common_elements_product(list1, list2):\n    \"\"\"\n    This function takes two lists as input, list1 and list2, and returns the product of the common elements between the two lists.\n    Parameters:\n    list1 (list): The first input list.\n    list2 (list): The second input list.\n    Returns:\n    int or float: The product of the common elements between list1 and list2.\n    \"\"\"\n", "entry_point": "find_common_elements_product", "canonical_solution": "    common_elements = set(list1) & set(list2)\n    product = 1\n    for element in common_elements:\n        product *= element\n    return product\n", "test": "def check(candidate):\n    assert candidate([2, 3, 4], [3, 4, 5]) == 12\n    assert candidate([1, 2, 3], [4, 5, 6]) == 1\n    assert candidate([2, 3, 4], [4, 5, 6]) == 4", "cot": "How to solve:\nStep 1. Find the common elements between list1 and list2 using set intersection.\nStep 2. Initialize product as 1.\nStep 3. Iterate through the common elements.\n    - Multiply each element with the product.\nStep 4. Return the product of common elements."}
{"task_id": "valid/143", "prompt": "def quiz_system_behavior(allow_multiple_answer, zoom_level):\n    \"\"\"\n    You are working on a web application that allows users to participate in quizzes.\n    The application has certain configurations that determine the behavior of the quiz system.\n    Two of these configurations are defined in the code snippet provided:\n    \"\"\"\n", "entry_point": "quiz_system_behavior", "canonical_solution": "\n    if allow_multiple_answer:\n        behavior_message = \"Players can provide multiple answers to the same question\"\n    else:\n        behavior_message = \"Players can only provide a single answer to each question\"\n    return f\"If multiple answers are allowed and the maximum zoom level is {zoom_level}, the quiz system behavior is: {behavior_message} and the maximum zoom level allowed is {min(zoom_level, 2)}.\"\n", "test": "def check(candidate):\n    assert candidate(True, 3) == \"If multiple answers are allowed and the maximum zoom level is 3, the quiz system behavior is: Players can provide multiple answers to the same question and the maximum zoom level allowed is 2.\"\n    assert candidate(False, 1) == \"If multiple answers are allowed and the maximum zoom level is 1, the quiz system behavior is: Players can only provide a single answer to each question and the maximum zoom level allowed is 1.\"\n    assert candidate(True, 5) == \"If multiple answers are allowed and the maximum zoom level is 5, the quiz system behavior is: Players can provide multiple answers to the same question and the maximum zoom level allowed is 2.\"", "cot": "How to solve:\nStep 1. Check if multiple answers are allowed.\nStep 2. Set behavior_message based on the result of the check.\nStep 3. Return a formatted string that includes the behavior_message and the maximum zoom level allowed."}
{"task_id": "valid/144", "prompt": "import math\n\n\ndef floor_float(num):\n    \"\"\"\n    This function takes a float number as input and returns the largest integer less than or equal to the input number.\n    Parameters:\n    num (float): The input number.\n    Returns:\n    int: The largest integer less than or equal to the input number.\n    \"\"\"\n", "entry_point": "floor_float", "canonical_solution": "    return math.floor(num)\n", "test": "def check(candidate):\n    assert candidate(3.14) == 3\n    assert candidate(5.67) == 5\n    assert candidate(10.0) == 10", "cot": "How to solve:\nStep 1. Import the math module.\nStep 2. Define a function floor_float that takes a float number as input.\nStep 3. Use the math.floor() function to return the largest integer less than or equal to the input number.\nStep 4. Return the result."}
{"task_id": "valid/145", "prompt": "def remove_vowels(sentence):\n    \"\"\"\n    Given a sentence, remove all vowels and return the modified sentence.\n    The sentence may contain punctuation marks and special characters.\n    \"\"\"\n", "entry_point": "remove_vowels", "canonical_solution": "    vowels = \"aeiouAEIOU\"\n    result = \"\"\n    for char in sentence:\n        if char not in vowels:\n            result += char\n    return result\n", "test": "def check(candidate):\n    assert candidate(\"Hello, World!\") == \"Hll, Wrld!\"\n    assert candidate(\"Python is awesome!\") == \"Pythn s wsm!\"\n    assert candidate(\"I love programming.\") == \" lv prgrmmng.\"", "cot": "How to solve:\nStep 1. Create a string of vowels: \"aeiouAEIOU\".\nStep 2. Initialize an empty string result.\nStep 3. Iterate through each character in the input sentence.\n    - If the character is not in the vowels string, add it to the result string.\nStep 4. Return the modified result string without vowels."}
{"task_id": "valid/146", "prompt": "def merge_objects(a, b):\n    \"\"\"\n    Create a function that takes two parameters and merge them into a single object.\n    However, you are not allowed to use the built-in functions or methods in the programming language to achieve this task.\n    Additionally, the merged object should have all keys from both input objects, and in case of duplicate keys, the value from the second object should overwrite the value from the first object.\n    Lastly, the merged object should be sorted in ascending order based on the keys.\n    The keys in the merged object should only include alphabetic characters (A-Z, a-z).\n    Any keys that contain non-alphabetic characters should be excluded from the merged object.\n    The function should also handle nested objects within the input objects and merge them accordingly.\n    a = {'a': 1, 'b': 2, 'nested': {'x': 5, 'y': 6}} b = {'c': 3, 'd': 4, 'nested': {'y': 7, 'z': 8}}\n    \"\"\"\n", "entry_point": "merge_objects", "canonical_solution": "    merged = {}\n    for key in a:\n        if key.isalpha():\n            merged[key] = a[key]\n    for key in b:\n        if key.isalpha():\n            merged[key] = b[key]\n    for key in a:\n        if isinstance(a[key], dict) and isinstance(b.get(key), dict):\n            merged[key] = merge_objects(a[key], b[key])\n    for key in b:\n        if key not in a and isinstance(b[key], dict):\n            merged[key] = merge_objects({}, b[key])\n    sorted_merged = {}\n    for key in sorted(merged):\n        sorted_merged[key] = merged[key]\n    return sorted_merged\n", "test": "def check(candidate):\n    # Test case where both input objects have unique keys\n    assert candidate({'a': 1, 'b': 2}, {'c': 3, 'd': 4}) == {'a': 1, 'b': 2, 'c': 3, 'd': 4}\n    \n    # Test case with nested objects and duplicate keys\n    assert candidate({'a': 1, 'b': 2, 'nested': {'x': 5, 'y': 6}}, {'c': 3, 'd': 4, 'nested': {'y': 7, 'z': 8}}) == {'a': 1, 'b': 2, 'c': 3, 'd': 4, 'nested': {'x': 5, 'y': 7, 'z': 8}}\n    \n    # Test case with non-alphabetic keys that should be excluded\n    assert candidate({'1': 1, '2': 2}, {'c': 3, 'd': 4}) == {'c': 3, 'd': 4}\n", "cot": "How to solve:\nStep 1. Create an empty dictionary 'merged'.\nStep 2. Iterate through keys of object 'a' and add key-value pairs to 'merged' if the key is alphabetic.\nStep 3. Iterate through keys of object 'b' and add key-value pairs to 'merged' if the key is alphabetic, overwriting values from 'a' if the key already exists.\nStep 4. Iterate through keys of object 'a' and if the value is a dictionary and the corresponding key exists in 'b' as a dictionary, recursively call the function 'merge_objects' and add the result to 'merged'.\nStep 5. Iterate through keys of object 'b' and if the key does not exist in 'a' and the value is a dictionary, recursively call the function 'merge_objects' with an empty dictionary and the value from 'b', then add the result to 'merged'.\nStep 6. Create an empty dictionary 'sorted_merged'.\nStep 7. Iterate through keys of 'merged' sorted in ascending order and add key-value pairs to 'sorted_merged'.\nStep 8. Return 'sorted_merged'."}
{"task_id": "valid/147", "prompt": "def find_max_in_dict(d):\n    \"\"\"\n    Find the maximum value from a nested Python dictionary.\n    Include in your solution a way to handle possible exceptions that might occur during execution.\n    \"\"\"\n", "entry_point": "find_max_in_dict", "canonical_solution": "\n    max_val = float(\"-inf\")\n    try:\n        for key in d:\n            if isinstance(d[key], dict):\n                temp_max = find_max_in_dict(d[key])\n                if temp_max > max_val:\n                    max_val = temp_max\n            else:\n                if d[key] > max_val:\n                    max_val = d[key]\n    except Exception as e:\n        print(f\"An error occurred: {str(e)}\")\n\n    return max_val\n", "test": "def check(candidate):\n    assert candidate({'a': 1, 'b': 2, 'c': 3}) == 3\n    assert candidate({'a': {'x': 5, 'y': 8}, 'b': 2, 'c': 3}) == 8\n    assert candidate({'a': {'x': 5, 'y': 8}, 'b': {'p': 10, 'q': 12}, 'c': 3}) == 12\n", "cot": "How to solve:\nStep 1. Initialize max_val as negative infinity.\nStep 2. Use a try-except block to handle possible exceptions.\nStep 3. Iterate through the keys of the dictionary.\n    - If the value is a dictionary, recursively call the function to find the maximum value.\n    - If the value is greater than max_val, update max_val.\nStep 4. If an exception occurs, print the error message.\nStep 5. Return max_val."}
{"task_id": "valid/148", "prompt": "grades_dict = {\n    \"student1\": [1, 2, 3],\n    \"student2\": [4, 5, 6],\n    \"student3\": [7, 8, 9],\n}\nvalues_key = \"student3\"\n\n\ndef calculate_avg_from_dict(dict, key):\n    \"\"\"\n    Modify the following Python code to calculate the average of values in the given dictionary, for specific key.\n    \"\"\"\n", "entry_point": "calculate_avg_from_dict", "canonical_solution": "    total_sum = 0\n    values = dict[key]\n    for value in values:\n        total_sum += value\n    return total_sum / len(values)\n", "test": "def check(candidate):\n    assert candidate(grades_dict, \"student1\") == 2\n    assert candidate(grades_dict, \"student2\") == 5\n    assert candidate(grades_dict, \"student3\") == 8", "cot": "How to solve:\nStep 1. Initialize total_sum as 0.\nStep 2. Get the list of values for the given key from the dictionary.\nStep 3. Iterate through the values and add each value to total_sum.\nStep 4. Return the average by dividing total_sum by the length of the values list."}
{"task_id": "valid/149", "prompt": "def replace_e(string):\n    \"\"\"\n    Create a function in Python that takes in a string as an argument and replaces all occurrences of 'e' with an asterisk ('*').\n    If the string is empty or None, the function should return None.\n    \"\"\"\n", "entry_point": "replace_e", "canonical_solution": "    if string is None or string == \"\":\n        return None\n\n    if \"E\" in string:\n        raise ValueError(\"Uppercase 'E' is not allowed.\")\n\n    return string.replace(\"e\", \"*\")\n", "test": "def check(candidate):\n    assert candidate(\"hello\") == \"h*llo\"\n    assert candidate(\"elephant\") == \"*l*phant\"\n    assert candidate(\"\") == None", "cot": "How to solve:\nStep 1. Check if the input string is None or empty, then return None.\nStep 2. Check if the input string contains uppercase 'E', then raise a ValueError.\nStep 3. Replace all occurrences of 'e' with an asterisk '*' in the input string.\nStep 4. Return the modified string."}
{"task_id": "valid/150", "prompt": "import heapq\n\n\ndef find_n_smallest(lst, n):\n    \"\"\"\n    Find the N smallest items in a list using heapq module.\n    Args:\n        lst (list): The input list.\n        n (int): The number of smallest items to find.\n    Returns:\n        list: A list containing the N smallest items in ascending order.\n    \"\"\"\n", "entry_point": "find_n_smallest", "canonical_solution": "    return heapq.nsmallest(n, lst)\n", "test": "def check(candidate):\n    assert candidate([4, 2, 7, 1, 5], 3) == [1, 2, 4]\n    assert candidate([10, 20, 30, 40, 50], 2) == [10, 20]\n    assert candidate([1, 1, 1, 1, 1], 5) == [1, 1, 1, 1, 1]", "cot": "How to solve:\nStep 1. Import the heapq module.\nStep 2. Define a function find_n_smallest that takes a list lst and an integer n as input.\nStep 3. Use heapq.nsmallest(n, lst) to return a list containing the N smallest items in ascending order."}
{"task_id": "valid/151", "prompt": "from math import gcd, sqrt\n\n\ndef is_q(x):\n    \"\"\"\n    &lt;p&gt;Take into account all the triangles that satisfy the following conditions:\n    \"\"\"\n", "entry_point": "is_q", "canonical_solution": "\n    sq = sqrt(x)\n    return sq == int(sq)\n", "test": "def check(candidate):\n    assert candidate(4) == True\n    assert candidate(5) == False\n    assert candidate(9) == True\n", "cot": "How to solve:\nStep 1. Import necessary functions gcd and sqrt from math module.\nStep 2. Define a function is_q that takes an input x.\nStep 3. Calculate the square root of x and store it in sq.\nStep 4. Check if sq is equal to its integer value.\nStep 5. Return True if sq is equal to its integer value, indicating x is a perfect square.\nStep 6. Return False if sq is not equal to its integer value, indicating x is not a perfect square."}
{"task_id": "valid/152", "prompt": "import datetime\n\n\ndef add_10_days(date):\n    \"\"\"\n    Adds 10 days to the given date.\n    Parameters:\n    date (datetime.datetime): The date to which 10 days need to be added.\n    Returns:\n    datetime.datetime: The updated date with 10 days added.\n    \"\"\"\n", "entry_point": "add_10_days", "canonical_solution": "    updated_date = date + datetime.timedelta(days=10)\n\n    return updated_date\n", "test": "def check(candidate):\n    assert candidate(datetime.datetime(2022, 1, 1)) == datetime.datetime(2022, 1, 11)\n    assert candidate(datetime.datetime(2023, 12, 20)) == datetime.datetime(2023, 12, 30)\n    assert candidate(datetime.datetime(2024, 2, 28)) == datetime.datetime(2024, 3, 9)", "cot": "How to solve:\nStep 1. Import the datetime module.\nStep 2. Define a function add_10_days that takes a date as input.\nStep 3. Use datetime.timedelta to add 10 days to the input date.\nStep 4. Return the updated date."}
