{"task_id": 3283984, "prompt": "def f_3283984():\n    \"\"\"decode a hex string '4a4b4c' to UTF-8.\n    \"\"\"\n", "entry_point": "f_3283984", "canonical_solution": "    return bytes.fromhex(\"4a4b4c\").decode(\"utf-8\")\n", "test": "def check(candidate):\n\n    assert candidate() == \"JKL\"\n"}
{"task_id": 3844801, "prompt": "def f_3844801(myList):\n    \"\"\"check if all elements in list `myList` are identical\n    \"\"\"\n", "entry_point": "f_3844801", "canonical_solution": "    return all(x == myList[0] for x in myList)\n", "test": "def check(candidate):\n\n    assert candidate([1,2,3]) == False\n"}
{"task_id": 4302166, "prompt": "def f_4302166():\n    \"\"\"format number of spaces between strings `Python`, `:` and `Very Good` to be `20`\n    \"\"\"\n", "entry_point": "f_4302166", "canonical_solution": "    return \"%*s : %*s\" % (20, \"Python\", 20, \"Very Good\")\n", "test": "def check(candidate):\n\n    assert candidate() == '              Python :            Very Good'\n"}
{"task_id": 7555335, "prompt": "def f_7555335(d):\n    \"\"\"convert a string `d` from CP-1251 to UTF-8\n    \"\"\"\n", "entry_point": "f_7555335", "canonical_solution": "    return d.decode(\"cp1251\").encode(\"utf8\")\n", "test": "def check(candidate):\n\n    assert candidate('hello world!'.encode('cp1251')) == b'hello world!'\n"}
{"task_id": 2544710, "prompt": "def f_2544710(kwargs):\n    \"\"\"get rid of None values in dictionary `kwargs`\n    \"\"\"\n", "entry_point": "f_2544710", "canonical_solution": "    return dict((k, v) for k, v in kwargs.items() if v is not None)\n", "test": "def check(candidate):\n\n    assert candidate({i: None for i in range(10)}) == {}\n"}
{"task_id": 14971373, "prompt": "import subprocess\nfrom unittest.mock import Mock\n\n\ndef f_14971373():\n    \"\"\"capture final output of a chain of system commands `ps -ef | grep something | wc -l`\n    \"\"\"\n", "entry_point": "f_14971373", "canonical_solution": "    return subprocess.check_output(\"ps -ef | grep something | wc -l\", shell=True)\n", "test": "def check(candidate):\n\n    output = b'  PID TTY          TIME CMD\\n  226 pts/1    00:00:00 bash\\n  285 pts/1    00:00:00 python3\\n  352 pts/1    00:00:00 ps\\n'\n    subprocess.check_output = Mock(return_value = output)\n    assert candidate() == output\n"}
{"task_id": 6726636, "prompt": "def f_6726636():\n    \"\"\"concatenate a list of strings `['a', 'b', 'c']`\n    \"\"\"\n", "entry_point": "f_6726636", "canonical_solution": "    return \"\"\"\"\"\".join([\"a\", \"b\", \"c\"])\n", "test": "def check(candidate):\n\n    assert candidate() == \"abc\"\n"}
{"task_id": 18079563, "prompt": "import pandas as pd\n\n\ndef f_18079563(s1, s2):\n    \"\"\"find intersection data between series `s1` and series `s2`\n    \"\"\"\n", "entry_point": "f_18079563", "canonical_solution": "    return pd.Series(list(set(s1).intersection(set(s2))))\n", "test": "def check(candidate):\n\n    x1, x2 = pd.Series([1,2]), pd.Series([1,3])\n    assert candidate(x1, x2).equals(pd.Series([1]))\n"}
{"task_id": 26153795, "prompt": "import datetime\n\n\ndef f_26153795(when):\n    \"\"\"Format a datetime string `when` to extract date only\n    \"\"\"\n", "entry_point": "f_26153795", "canonical_solution": "    return datetime.datetime.strptime(when, \"%Y-%m-%d\").date()\n", "test": "def check(candidate):\n\n    assert candidate('2013-05-07') == datetime.date(2013, 5, 7)\n"}
{"task_id": 172439, "prompt": "def f_172439():\n    \"\"\"Split a multi-line string ` a \\n b \\r\\n c ` by new line character `\\n`\n    \"\"\"\n", "entry_point": "f_172439", "canonical_solution": "    return \" a \\n b \\r\\n c \".split(\"\\n\")\n", "test": "def check(candidate):\n\n    assert candidate() == [' a ', ' b \\r', ' c ']\n"}
{"task_id": 13954222, "prompt": "def f_13954222(b):\n    \"\"\"concatenate elements of list `b` by a colon \":\"\n    \"\"\"\n", "entry_point": "f_13954222", "canonical_solution": "    return \"\"\":\"\"\".join(str(x) for x in b)\n", "test": "def check(candidate):\n\n    assert candidate(['x','y','zzz']) == 'x:y:zzz'\n"}
{"task_id": 13567345, "prompt": "import numpy as np\n\n\ndef f_13567345(a):\n    \"\"\"Calculate sum over all rows of 2D numpy array `a`\n    \"\"\"\n", "entry_point": "f_13567345", "canonical_solution": "    return a.sum(axis=1)\n", "test": "def check(candidate):\n\n    a1 = np.array([[i for i in range(3)] for j in range(5)])\n    assert np.array_equal(candidate(a1), np.array([3, 3, 3, 3, 3]))\n"}
{"task_id": 29784889, "prompt": "import warnings\n\n\ndef f_29784889():\n    \"\"\"enable warnings using action 'always'\n    \"\"\"\n", "entry_point": "f_29784889", "canonical_solution": "    warnings.simplefilter(\"always\")\n\n    return\n", "test": "def check(candidate):\n\n    candidate() \n    assert any([(wf[0] == 'always') for wf in warnings.filters])\n"}
{"task_id": 13550423, "prompt": "def f_13550423(l):\n    \"\"\"concatenate items of list `l` with a space ' '\n    \"\"\"\n", "entry_point": "f_13550423", "canonical_solution": "    return \" \".join(map(str, l))\n", "test": "def check(candidate):\n\n    assert candidate(['x','y','zzz']) == 'x y zzz'\n"}
{"task_id": 698223, "prompt": "import time\n\n\ndef f_698223():\n    \"\"\"parse a time string '30/03/09 16:31:32.123' containing milliseconds in it\n    \"\"\"\n", "entry_point": "f_698223", "canonical_solution": "    return time.strptime(\"30/03/09 16:31:32.123\", \"%d/%m/%y %H:%M:%S.%f\")\n", "test": "def check(candidate):\n\n    answer = time.strptime('30/03/09 16:31:32.123', '%d/%m/%y %H:%M:%S.%f')\n    assert candidate() == answer\n    false_1 = time.strptime('30/03/09 17:31:32.123', '%d/%m/%y %H:%M:%S.%f')\n    assert candidate() != false_1\n    false_2 = time.strptime('20/03/09 17:31:32.123', '%d/%m/%y %H:%M:%S.%f')\n    assert candidate() != false_2\n"}
{"task_id": 6633523, "prompt": "def f_6633523():\n    \"\"\"convert a string `123,456.908` with dot and comma into a floating number\n    \"\"\"\n", "entry_point": "f_6633523", "canonical_solution": "    return float(\"123,456.908\".replace(\",\", \"\"))\n", "test": "def check(candidate):\n\n    assert (candidate() - 123456.908) < 1e-6\n    assert (candidate() - 123456.9) > 1e-6\n    assert (candidate() - 1234.908) > 1e-6\n    assert type(candidate()) == float\n    assert int(candidate()) == 123456\n"}
{"task_id": 3108285, "prompt": "import sys\n\n\ndef f_3108285():\n    \"\"\"set python path '/path/to/whatever' in python script\n    \"\"\"\n", "entry_point": "f_3108285", "canonical_solution": "    sys.path.append(\"/path/to/whatever\")\n\n    return\n", "test": "def check(candidate):\n\n    original_paths = [sp for sp in sys.path]\n    candidate()\n    assert '/path/to/whatever' in sys.path\n"}
{"task_id": 2195340, "prompt": "import re\n\n\ndef f_2195340():\n    \"\"\"split string 'Words, words, words.' using a regex '(\\\\W+)'\n    \"\"\"\n", "entry_point": "f_2195340", "canonical_solution": "    return re.split(\"(\\\\W+)\", \"Words, words, words.\")\n", "test": "def check(candidate):\n\n    assert candidate() == ['Words', ', ', 'words', ', ', 'words', '.', '']\n    assert candidate() == ['Words', ', '] + ['words', ', ', 'words', '.', '']\n"}
{"task_id": 17977584, "prompt": "def f_17977584():\n    \"\"\"open a file `Output.txt` in append mode\n    \"\"\"\n", "entry_point": "f_17977584", "canonical_solution": "    return open(\"Output.txt\", \"a\")\n", "test": "def check(candidate):\n\n    f = candidate()\n    assert str(f.__class__) == \"<class '_io.TextIOWrapper'>\"\n    assert f.name == 'Output.txt'\n    assert f.mode == 'a'\n"}
{"task_id": 22676, "prompt": "import requests\n\n\ndef f_22676(url):\n    \"\"\"download a file `url` over HTTP and save to \"10MB\"\n    \"\"\"\n", "entry_point": "f_22676", "canonical_solution": "\n    response = requests.get(url, stream=True)\n    with open(\"10MB\", \"wb\") as handle:\n        for data in response.iter_content():\n            handle.write(data)\n\n    return\n", "test": "def check(candidate):\n\n    candidate(\"https://github.com/\")\n    with open(\"10MB\", 'rb') as fr: \n        all_data = [data for data in fr]\n    assert all_data[: 2] == [b'\\n', b'\\n']\n"}
{"task_id": 15405636, "prompt": "import argparse\n\n\ndef f_15405636(parser):\n    \"\"\"argparse add argument with flag '--version' and version action of '%(prog)s 2.0' to parser `parser`\n    \"\"\"\n", "entry_point": "f_15405636", "canonical_solution": "    return parser.add_argument(\"--version\", action=\"version\", version=\"%(prog)s 2.0\")\n", "test": "def check(candidate):\n\n    parser = argparse.ArgumentParser()\n    output = candidate(parser)\n    assert output.option_strings == ['--version']\n    assert output.dest == 'version'\n    assert output.nargs == 0\n"}
{"task_id": 17665809, "prompt": "def f_17665809(d):\n    \"\"\"remove key 'c' from dictionary `d`\n    \"\"\"\n", "entry_point": "f_17665809", "canonical_solution": "    return {i: d[i] for i in d if i != \"c\"}\n", "test": "def check(candidate):\n\n    assert candidate({'a': 1 , 'b': 2, 'c': 3}) == {'a': 1 , 'b': 2}\n"}
{"task_id": 41861705, "prompt": "import pandas as pd\n\n\ndef f_41861705(split_df, csv_df):\n    \"\"\"Create new DataFrame object by merging columns \"key\" of  dataframes `split_df` and `csv_df` and rename the columns from dataframes `split_df` and `csv_df` with suffix `_left` and `_right` respectively\n    \"\"\"\n", "entry_point": "f_41861705", "canonical_solution": "    return pd.merge(split_df, csv_df, on=[\"key\"], suffixes=(\"_left\", \"_right\"))\n", "test": "def check(candidate):\n\n    split_df = pd.DataFrame({'key': ['foo', 'bar'], 'value': [1, 2]})\n    csv_df = pd.DataFrame({'key': ['foo', 'baz'], 'value': [3, 4]})\n    result = pd.DataFrame({'key': ['foo'], 'value_left': [1],'value_right': [3]})\n    assert all(candidate(csv_df, split_df) == result)\n"}
{"task_id": 10697757, "prompt": "def f_10697757(s):\n    \"\"\"Split a string `s` by space with `4` splits\n    \"\"\"\n", "entry_point": "f_10697757", "canonical_solution": "    return s.split(\" \", 4)\n", "test": "def check(candidate):\n\n    assert candidate('1 0 A10B 100 Description: This is a description with spaces') ==         ['1', '0', 'A10B', '100', 'Description: This is a description with spaces']\n"}
{"task_id": 16344756, "prompt": "from flask import Flask\nfrom unittest.mock import Mock\n\n\ndef f_16344756(app):\n    \"\"\"enable debug mode on Flask application `app`\n    \"\"\"\n", "entry_point": "f_16344756", "canonical_solution": "    return app.run(debug=True)\n", "test": "def check(candidate):\n\n    Flask = Mock()\n    app = Flask('mai')\n    try:\n        candidate(app)\n    except:\n        return False\n"}
{"task_id": 40133826, "prompt": "import pickle\n\n\ndef f_40133826(mylist):\n    \"\"\"python save list `mylist` to file object 'save.txt'\n    \"\"\"\n", "entry_point": "f_40133826", "canonical_solution": "    pickle.dump(mylist, open(\"save.txt\", \"wb\"))\n\n    return\n", "test": "def check(candidate):\n\n    candidate([i for i in range(10)])\n    data = pickle.load(open('save.txt', 'rb'))\n    assert data == [i for i in range(10)]\n"}
{"task_id": 4490961, "prompt": "import scipy\nimport numpy as np\n\n\ndef f_4490961(P, T):\n    \"\"\"Multiply a matrix `P` with a 3d tensor `T` in scipy\n    \"\"\"\n", "entry_point": "f_4490961", "canonical_solution": "    return scipy.tensordot(P, T, axes=[1, 1]).swapaxes(0, 1)\n", "test": "def check(candidate):\n\n    P = np.array([[6, 2, 7], [1, 1, 8], [8, 7, 1], [9, 6, 4], [2, 1, 1]])\n    T = np.array([[[9, 7, 2, 3], [9, 6, 8, 2], [6, 6, 2, 8]],\n                  [[4, 5, 5, 3], [1, 8, 3, 5], [2, 8, 1, 6]]])\n    result = np.array([[[114,  96,  42,  78], [ 66,  61,  26,  69], [141, 104,  74,  46], [159, 123,  74,  71],  [ 33,  26,  14,  16]], \n                      [[ 40, 102,  43,  70], [ 21,  77,  16,  56], [ 41, 104,  62,  65], [ 50, 125,  67,  81], [ 11,  26,  14,  17]]])\n    assert np.array_equal(candidate(P, T), result)\n"}
{"task_id": 2173087, "prompt": "import numpy\nimport numpy as np\n\n\ndef f_2173087():\n    \"\"\"Create 3d array of zeroes of size `(3,3,3)`\n    \"\"\"\n", "entry_point": "f_2173087", "canonical_solution": "    return numpy.zeros((3, 3, 3))\n", "test": "def check(candidate):\n\n    result = np.array([[[0., 0., 0.], [0., 0., 0.], [0., 0., 0.]],\n                          [[0., 0., 0.], [0., 0., 0.], [0., 0., 0.]],\n                          [[0., 0., 0.], [0., 0., 0.], [0., 0., 0.]]])\n    assert np.array_equal(candidate(), result)\n"}
{"task_id": 6266727, "prompt": "def f_6266727(content):\n    \"\"\"cut off the last word of a sentence `content`\n    \"\"\"\n", "entry_point": "f_6266727", "canonical_solution": "    return \"\"\" \"\"\".join(content.split(\" \")[:-1])\n", "test": "def check(candidate):\n\n    assert candidate('test') == ''\n"}
{"task_id": 30385151, "prompt": "import numpy as np\n\n\ndef f_30385151(x):\n    \"\"\"convert scalar `x` to array\n    \"\"\"\n", "entry_point": "f_30385151", "canonical_solution": "    x = np.asarray(x).reshape(1, -1)[(0), :]\n\n    return x\n", "test": "def check(candidate):\n\n    assert all(candidate(1.) == np.asarray(1.))\n"}
{"task_id": 15856127, "prompt": "def f_15856127(L):\n    \"\"\"sum all elements of nested list `L`\n    \"\"\"\n", "entry_point": "f_15856127", "canonical_solution": "    return sum(sum(i) if isinstance(i, list) else i for i in L)\n", "test": "def check(candidate):\n\n    assert candidate([1,2,3,4]) == 10\n"}
{"task_id": 1592158, "prompt": "import struct\n\n\ndef f_1592158():\n    \"\"\"convert hex string '470FC614' to a float number\n    \"\"\"\n", "entry_point": "f_1592158", "canonical_solution": "    return struct.unpack(\"!f\", bytes.fromhex(\"470FC614\"))[0]\n", "test": "def check(candidate):\n\n    assert (candidate() - 36806.078125) < 1e-6\n"}
{"task_id": 5010536, "prompt": "def f_5010536(my_dict):\n    \"\"\"Multiple each value by `2` for all keys in a dictionary `my_dict`\n    \"\"\"\n", "entry_point": "f_5010536", "canonical_solution": "    my_dict.update((x, y * 2) for x, y in list(my_dict.items()))\n\n    return my_dict\n", "test": "def check(candidate):\n\n    assert candidate({'a': [1], 'b': 4.9}) == {'a': [1, 1], 'b': 9.8}\n"}
{"task_id": 13745648, "prompt": "import subprocess\nfrom unittest.mock import Mock\n\n\ndef f_13745648():\n    \"\"\"running bash script 'sleep.sh'\n    \"\"\"\n", "entry_point": "f_13745648", "canonical_solution": "    return subprocess.call(\"sleep.sh\", shell=True)\n", "test": "def check(candidate):\n\n    subprocess.call = Mock()\n    try:\n        candidate()\n    except:\n        assert False\n"}
{"task_id": 44778, "prompt": "def f_44778(myList):\n    \"\"\"make a comma-separated string from a list `myList`\n    \"\"\"\n", "entry_point": "f_44778", "canonical_solution": "    myList = \",\".join(map(str, myList))\n\n    return myList\n", "test": "def check(candidate):\n\n    assert candidate([1,2,3]) == '1,2,3'\n"}
{"task_id": 7286365, "prompt": "def f_7286365():\n    \"\"\"reverse the list that contains 0 to 9\n    \"\"\"\n", "entry_point": "f_7286365", "canonical_solution": "    return list(reversed(list(range(10))))\n", "test": "def check(candidate):\n\n    assert candidate() == [9,8,7,6,5,4,3,2,1,0]\n"}
{"task_id": 18454570, "prompt": "def f_18454570():\n    \"\"\"remove substring 'bag,' from a string 'lamp, bag, mirror'\n    \"\"\"\n", "entry_point": "f_18454570", "canonical_solution": "    return \"lamp, bag, mirror\".replace(\"bag,\", \"\")\n", "test": "def check(candidate):\n\n    assert candidate() == 'lamp,  mirror'\n    assert type(candidate()) == str\n    assert len(candidate()) == 13\n    assert candidate().startswith('lamp')\n"}
{"task_id": 4357787, "prompt": "def f_4357787(s):\n    \"\"\"Reverse the order of words, delimited by `.`, in string `s`\n    \"\"\"\n", "entry_point": "f_4357787", "canonical_solution": "    return \"\"\".\"\"\".join(s.split(\".\")[::-1])\n", "test": "def check(candidate):\n\n    assert candidate('apple.orange.red.green.yellow') == 'yellow.green.red.orange.apple'\n"}
{"task_id": 21787496, "prompt": "import time\n\n\ndef f_21787496():\n    \"\"\"parse milliseconds epoch time '1236472051807' to format '%Y-%m-%d %H:%M:%S'\n    \"\"\"\n", "entry_point": "f_21787496", "canonical_solution": "    return time.strftime(\"%Y-%m-%d %H:%M:%S\", time.gmtime(1236472051807 / 1000.0))\n", "test": "def check(candidate):\n\n    assert candidate() == '2009-03-08 00:27:31'\n"}
{"task_id": 20573459, "prompt": "import datetime\n\n\ndef f_20573459():\n    \"\"\"get the date 7 days before the current date\n    \"\"\"\n", "entry_point": "f_20573459", "canonical_solution": "    return (datetime.datetime.now() - datetime.timedelta(days=7)).date()\n", "test": "def check(candidate):\n\n    assert datetime.datetime.now().date() - candidate() < datetime.timedelta(days = 7, seconds = 1)\n"}
{"task_id": 15352457, "prompt": "def f_15352457(array):\n    \"\"\"sum columns of a list `array`\n    \"\"\"\n", "entry_point": "f_15352457", "canonical_solution": "    return [sum(row[i] for row in array) for i in range(len(array[0]))]\n", "test": "def check(candidate):\n\n    assert candidate([[1,2,3], [4,5,6]]) == [5, 7, 9]\n"}
{"task_id": 23164058, "prompt": "import base64\n\n\ndef f_23164058():\n    \"\"\"encode binary string 'your string' to base64 code\n    \"\"\"\n", "entry_point": "f_23164058", "canonical_solution": "    return base64.b64encode(bytes(\"your string\", \"utf-8\"))\n", "test": "def check(candidate):\n\n    assert candidate() == b'eW91ciBzdHJpbmc='\n"}
{"task_id": 11533274, "prompt": "def f_11533274(dicts):\n    \"\"\"Merge a nested dictionary `dicts` into a flat dictionary by concatenating nested values with the same key `k`\n    \"\"\"\n", "entry_point": "f_11533274", "canonical_solution": "    return {k: [d[k] for d in dicts] for k in dicts[0]}\n", "test": "def check(candidate):\n\n    assert candidate([{'cat': 1, 'dog': 3}, {'cat' : 2, 'dog': ['happy']}]) ==         {'cat': [1, 2], 'dog': [3, ['happy']]}\n"}
{"task_id": 14026704, "prompt": "import multidict\n\n\nclass Request:\n    def __init__(self, args):\n        self.args = args\n\n\ndef f_14026704(request):\n    \"\"\"get the url parameter 'myParam' in a Flask view\n    \"\"\"\n", "entry_point": "f_14026704", "canonical_solution": "    return request.args[\"myParam\"]\n", "test": "def check(candidate):\n\n    args = multidict.MultiDict([('myParam' , 'popeye')])\n    request = Request(args)\n    assert candidate(request) == 'popeye'\n"}
{"task_id": 11236006, "prompt": "from collections import Counter\n\n\ndef f_11236006(mylist):\n    \"\"\"identify duplicate values in list `mylist`\n    \"\"\"\n", "entry_point": "f_11236006", "canonical_solution": "    return [k for k, v in list(Counter(mylist).items()) if v > 1]\n", "test": "def check(candidate):\n\n    assert candidate([1,3,2,2,1,4]) == [1, 2]\n"}
{"task_id": 20211942, "prompt": "import sqlite3\n\n\ndef f_20211942(db):\n    \"\"\"Insert a 'None' value into a SQLite3 table.\n    \"\"\"\n", "entry_point": "f_20211942", "canonical_solution": "    return db.execute(\"INSERT INTO present VALUES('test2', ?, 10)\", (None,))\n", "test": "def check(candidate):\n\n    sqliteConnection = sqlite3.connect('dev.db')\n    db = sqliteConnection.cursor()\n    print(\"Database created and Successfully Connected to SQLite\")\n    db.execute(\"CREATE TABLE present (name VARCHAR(5), age INTEGER, height INTEGER)\")\n    try:\n        candidate(db)\n    except:\n        assert False\n"}
{"task_id": 406121, "prompt": "from collections import Counter\n\n\ndef f_406121(list_of_menuitems):\n    \"\"\"flatten list `list_of_menuitems`\n    \"\"\"\n", "entry_point": "f_406121", "canonical_solution": "    return [image for menuitem in list_of_menuitems for image in menuitem]\n", "test": "def check(candidate):\n\n    assert candidate([[1,2],[3,4,5]]) == [1,2,3,4,5]\n"}
{"task_id": 4741537, "prompt": "def f_4741537(a, b):\n    \"\"\"append elements of a set `b` to a list `a`\n    \"\"\"\n", "entry_point": "f_4741537", "canonical_solution": "    a.extend(b)\n\n    return a\n", "test": "def check(candidate):\n\n    assert candidate([1, 2, 2, 3], {4, 5, 2}) == [1, 2, 2, 3, 2, 4, 5]\n"}
{"task_id": 15851568, "prompt": "def f_15851568(x):\n    \"\"\"get the last part of a string before the character '-'\n    \"\"\"\n", "entry_point": "f_15851568", "canonical_solution": "    return x.rsplit(\"-\", 1)[0]\n", "test": "def check(candidate):\n\n    assert candidate('2022-03-01') == '2022-03'\n"}
{"task_id": 17438096, "prompt": "import ftplib\nfrom unittest.mock import Mock\n\n\ndef f_17438096(filename, ftp):\n    \"\"\"upload file using FTP\n    \"\"\"\n", "entry_point": "f_17438096", "canonical_solution": "    ftp.storlines(\"STOR \" + filename, open(filename, \"r\"))\n\n    return\n", "test": "def check(candidate):\n\n    ftplib.FTP = Mock()\n    ftp = ftplib.FTP(\"10.10.10.10\")\n    ftp.storlines = Mock()\n    file_name = 'readme.txt'\n    with open (file_name, 'a') as f:\n        f.write('apple')\n    candidate(file_name, ftp)\n"}
{"task_id": 28742436, "prompt": "import numpy as np\n\n\ndef f_28742436():\n    \"\"\"create array containing the maximum value of respective elements of array `[2, 3, 4]` and array `[1, 5, 2]`\n    \"\"\"\n", "entry_point": "f_28742436", "canonical_solution": "    return np.maximum([2, 3, 4], [1, 5, 2])\n", "test": "def check(candidate):\n\n    assert all(candidate() == np.array([2, 5, 4]))\n"}
{"task_id": 34280147, "prompt": "def f_34280147(l):\n    \"\"\"given a list `l`, move the first 3 elements to the end of the list\n    \"\"\"\n", "entry_point": "f_34280147", "canonical_solution": "    return l[3:] + l[:3]\n", "test": "def check(candidate):\n\n    assert candidate(\"my-string\") == \"stringmy-\"\n"}
{"task_id": 4172131, "prompt": "import random\n\n\ndef f_4172131():\n    \"\"\"create a random list of integers\n    \"\"\"\n", "entry_point": "f_4172131", "canonical_solution": "    return [int(1000 * random.random()) for i in range(10000)]\n", "test": "def check(candidate):\n\n    result = candidate()\n    assert isinstance(result, list)\n    assert all([isinstance(item, int) for item in result])\n"}
{"task_id": 6677332, "prompt": "import datetime\n\n\ndef f_6677332():\n    \"\"\"Using %f with strftime() in Python to get microseconds\n    \"\"\"\n", "entry_point": "f_6677332", "canonical_solution": "    return datetime.datetime.now().strftime(\"%H:%M:%S.%f\")\n", "test": "def check(candidate):\n\n    time_now = datetime.datetime.now().strftime('%H:%M:%S.%f')\n    assert candidate().split('.')[0] == time_now.split('.')[0]\n"}
{"task_id": 15325182, "prompt": "import pandas as pd\n\n\ndef f_15325182(df):\n    \"\"\"filter rows in pandas starting with alphabet 'f' using regular expression.\n    \"\"\"\n", "entry_point": "f_15325182", "canonical_solution": "    return df.b.str.contains(\"^f\")\n", "test": "def check(candidate):\n\n    df = pd.DataFrame([[1, 'fat'], [2, 'hip'], [3, 'foo']], columns = ['a', 'b'])\n    expected = [True, False, True]\n    actual = candidate(df)\n    for i in range (0, len(expected)):\n        assert expected[i] == actual[i]\n"}
{"task_id": 583557, "prompt": "def f_583557(tab):\n    \"\"\"print a 2 dimensional list `tab` as a table with delimiters\n    \"\"\"\n", "entry_point": "f_583557", "canonical_solution": "    return \"\\n\".join(\"\\t\".join(str(col) for col in row) for row in tab)\n", "test": "def check(candidate):\n\n    assert candidate([[1,2,3],[4,5,6]]) == \"1\\t2\\t3\\n4\\t5\\t6\"\n"}
{"task_id": 38535931, "prompt": "import pandas as pd\n\n\ndef f_38535931(df, tuples):\n    \"\"\"pandas: delete rows in dataframe `df` based on multiple columns values\n    \"\"\"\n", "entry_point": "f_38535931", "canonical_solution": "    return df.set_index(list(\"BC\")).drop(tuples, errors=\"ignore\").reset_index()\n", "test": "def check(candidate):\n\n    df = pd.DataFrame([[3, 4], [4, 5], [-1, -2]], columns = ['B', 'C'])\n    tuples = [(3, 4), (-1, -2)]\n    expected = pd.DataFrame([[4, 5]], columns = ['B', 'C'])\n    actual = candidate(df, tuples)\n    assert pd.DataFrame.equals(actual, expected)\n"}
{"task_id": 13945749, "prompt": "def f_13945749(goals, penalties):\n    \"\"\"format string \"({} goals, ${})\" with variables `goals` and `penalties`\n    \"\"\"\n", "entry_point": "f_13945749", "canonical_solution": "    return \"\"\"({} goals, ${})\"\"\".format(goals, penalties)\n", "test": "def check(candidate):\n\n    assert candidate(0, 0) == \"(0 goals, $0)\"\n"}
{"task_id": 18524642, "prompt": "def f_18524642(L):\n    \"\"\"convert a list of lists `L` to list of integers\n    \"\"\"\n", "entry_point": "f_18524642", "canonical_solution": "    L = [int(\"\".join([str(y) for y in x])) for x in L]\n\n    return L\n", "test": "def check(candidate):\n\n    assert candidate([[1,2], [2,3,4], [1,0,0]]) == [12,234,100]\n"}
{"task_id": 7138686, "prompt": "def f_7138686(lines, myfile):\n    \"\"\"write the elements of list `lines` concatenated by special character '\\n' to file `myfile`\n    \"\"\"\n", "entry_point": "f_7138686", "canonical_solution": "    myfile.write(\"\\n\".join(lines))\n\n    return\n", "test": "def check(candidate):\n\n    with open('tmp.txt', 'w') as myfile:\n        candidate([\"first\", \"second\", \"third\"], myfile)\n    with open('tmp.txt', 'r') as fr: \n        lines = fr.readlines()\n    assert lines == [\"first\\n\", \"second\\n\", \"third\"]\n"}
{"task_id": 17238587, "prompt": "import re\n\n\ndef f_17238587(text):\n    \"\"\"Remove duplicate words from a string `text` using regex\n    \"\"\"\n", "entry_point": "f_17238587", "canonical_solution": "    text = re.sub(\"\\\\b(\\\\w+)( \\\\1\\\\b)+\", \"\\\\1\", text)\n\n    return text\n", "test": "def check(candidate):\n\n    assert candidate(\"text\") == \"text\"\n"}
{"task_id": 26053849, "prompt": "import pandas as pd\n\n\ndef f_26053849(df):\n    \"\"\"count non zero values in each column in pandas data frame `df`\n    \"\"\"\n", "entry_point": "f_26053849", "canonical_solution": "    return df.astype(bool).sum(axis=1)\n", "test": "def check(candidate):\n\n    df1 = pd.DataFrame([[0,0,0], [0,1,0], [1,1,1]])\n    assert candidate(df1).to_list() == [0, 1, 3]\n"}
{"task_id": 15534223, "prompt": "import re\n\n\ndef f_15534223():\n    \"\"\"search for string that matches regular expression pattern '(?<!Distillr)\\\\\\\\AcroTray\\\\.exe' in string 'C:\\\\SomeDir\\\\AcroTray.exe'\n    \"\"\"\n", "entry_point": "f_15534223", "canonical_solution": "    return re.search(\"(?<!Distillr)\\\\\\\\AcroTray\\\\.exe\", \"C:\\\\SomeDir\\\\AcroTray.exe\")\n", "test": "def check(candidate):\n\n    result = candidate()\n    assert result.span() == (10, 23)\n    assert result.string == \"C:\\SomeDir\\AcroTray.exe\"\n"}
{"task_id": 5453026, "prompt": "def f_5453026():\n    \"\"\"split string 'QH QD JC KD JS' into a list on white spaces\n    \"\"\"\n", "entry_point": "f_5453026", "canonical_solution": "    return \"\"\"QH QD JC KD JS\"\"\".split()\n", "test": "def check(candidate):\n\n    assert candidate() == [\"QH\", \"QD\", \"JC\", \"KD\", \"JS\"]\n"}
{"task_id": 18168684, "prompt": "import re\n\n\ndef f_18168684(line):\n    \"\"\"search for occurrences of regex pattern '>.*<' in xml string `line`\n    \"\"\"\n", "entry_point": "f_18168684", "canonical_solution": "    return re.search(\">.*<\", line).group(0)\n", "test": "def check(candidate):\n\n    assert candidate(\"hahhdsf>0.0<;sgnd\") == \">0.0<\"\n"}
{"task_id": 4914277, "prompt": "def f_4914277(filename):\n    \"\"\"erase all the contents of a file `filename`\n    \"\"\"\n", "entry_point": "f_4914277", "canonical_solution": "    return open(filename, \"w\").close()\n", "test": "def check(candidate):\n\n    filename = 'tmp.txt'\n    with open(filename, 'w') as fw: fw.write(\"hello world!\")\n    with open(filename, 'r') as fr: \n        lines = fr.readlines()\n        assert len(lines) == 1 and lines[0] == \"hello world!\"\n    candidate(filename)\n    with open(filename, 'r') as fr: \n        lines = fr.readlines()\n        assert len(lines) == 0\n"}
{"task_id": 19068269, "prompt": "import datetime\n\n\ndef f_19068269(string_date):\n    \"\"\"convert a string `string_date` into datetime using the format '%Y-%m-%d %H:%M:%S.%f'\n    \"\"\"\n", "entry_point": "f_19068269", "canonical_solution": "    return datetime.datetime.strptime(string_date, \"%Y-%m-%d %H:%M:%S.%f\")\n", "test": "def check(candidate):\n\n    assert candidate('2022-10-22 11:59:59.20') == datetime.datetime(2022, 10, 22, 11, 59, 59, 200000)\n"}
{"task_id": 20683167, "prompt": "def f_20683167(thelist):\n    \"\"\"find the index of a list with the first element equal to '332' within the list of lists `thelist`\n    \"\"\"\n", "entry_point": "f_20683167", "canonical_solution": "    return [index for index, item in enumerate(thelist) if item[0] == \"332\"]\n", "test": "def check(candidate):\n\n    assert candidate([[0,1,2], ['a','bb','ccc'], ['332',33,2], [33,22,332]]) == [2]\n"}
{"task_id": 30693804, "prompt": "import re\n\n\ndef f_30693804(text):\n    \"\"\"remove all non-alphanumeric characters except space from a string `text` and lower it\n    \"\"\"\n", "entry_point": "f_30693804", "canonical_solution": "    return re.sub(\"(?!\\\\s)[\\\\W_]\", \"\", text).lower().strip()\n", "test": "def check(candidate):\n\n    assert candidate('ABjfK329r0&&*#5t') == 'abjfk329r05t'\n"}
{"task_id": 17138464, "prompt": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef f_17138464(x, y):\n    \"\"\"subscript text 'H20' with '2' as subscripted in matplotlib labels for arrays 'x' and 'y'.\n    \"\"\"\n", "entry_point": "f_17138464", "canonical_solution": "    return plt.plot(x, y, label=\"$H_2O$\")\n", "test": "def check(candidate):\n\n    pic = candidate(np.array([1,2,3]),np.array([4,5,6]))[0]\n    assert pic.get_label() == '$H_2O$'\n    x, y = pic.get_data()\n    assert all(x == np.array([1,2,3]))\n    assert all(y == np.array([4,5,6]))\n"}
{"task_id": 9138112, "prompt": "def f_9138112(mylist):\n    \"\"\"loop over a list `mylist` if sublists length equals 3\n    \"\"\"\n", "entry_point": "f_9138112", "canonical_solution": "    return [x for x in mylist if len(x) == 3]\n", "test": "def check(candidate):\n\n    assert candidate([[1,2,3], 'abc', [345,53], 'avsvasf']) == [[1,2,3], 'abc']\n"}
{"task_id": 1807026, "prompt": "class Object:\n    def __init__(self):\n        self.name = \"object\"\n\n\ndef f_1807026():\n    \"\"\"initialize a list `lst` of 100 objects Object()\n    \"\"\"\n", "entry_point": "f_1807026", "canonical_solution": "    lst = [Object() for _ in range(100)]\n\n    return lst\n", "test": "def check(candidate):\n\n    lst = candidate()\n    assert all([x.name == \"object\" for x in lst])\n"}
{"task_id": 13793321, "prompt": "import pandas as pd\n\n\ndef f_13793321(df1, df2):\n    \"\"\"joining data from dataframe `df1` with data from dataframe `df2` based on matching values of column 'Date_Time' in both dataframes\n    \"\"\"\n", "entry_point": "f_13793321", "canonical_solution": "    return df1.merge(df2, on=\"Date_Time\")\n", "test": "def check(candidate):\n\n    df1 = pd.DataFrame([[1, 2, 3]], columns=[\"Date\", \"Time\", \"Date_Time\"])\n    df2 = pd.DataFrame([[1, 3],[4, 9]], columns=[\"Name\", \"Date_Time\"])\n    assert candidate(df1, df2).to_dict() == {'Date': {0: 1}, 'Time': {0: 2}, 'Date_Time': {0: 3}, 'Name': {0: 1}}\n"}
{"task_id": 3367288, "prompt": "def f_3367288(str1):\n    \"\"\"use `%s` operator to print variable values `str1` inside a string\n    \"\"\"\n", "entry_point": "f_3367288", "canonical_solution": "    return \"first string is: %s, second one is: %s\" % (str1, \"geo.tif\")\n", "test": "def check(candidate):\n\n    assert candidate(\"s001\") == \"first string is: s001, second one is: geo.tif\"\n"}
{"task_id": 3475251, "prompt": "def f_3475251():\n    \"\"\"Split a string '2.MATCHES $$TEXT$$ STRING' by a delimiter '$$TEXT$$'\n    \"\"\"\n", "entry_point": "f_3475251", "canonical_solution": "    return [x.strip() for x in \"2.MATCHES $$TEXT$$ STRING\".split(\"$$TEXT$$\")]\n", "test": "def check(candidate):\n\n    assert candidate() == ['2.MATCHES', 'STRING']\n"}
{"task_id": 273192, "prompt": "import os\n\n\ndef f_273192(path):\n    \"\"\"check if a directory `path` exists and create it if necessary\n    \"\"\"\n", "entry_point": "f_273192", "canonical_solution": "    try:\n        os.makedirs(path)\n    except OSError as exception:\n        if exception.errno != errno.EEXIST:\n            raise\n\n    return\n", "test": "def check(candidate):\n\n    candidate(\"hello\")\n    assert os.path.exists(\"hello\")\n"}
{"task_id": 18785032, "prompt": "import re\n\n\ndef f_18785032(text):\n    \"\"\"Replace a separate word 'H3' by 'H1' in a string 'text'\n    \"\"\"\n", "entry_point": "f_18785032", "canonical_solution": "    return re.sub(\"\\\\bH3\\\\b\", \"H1\", text)\n", "test": "def check(candidate):\n\n    assert candidate(\"hello world and H3\") == \"hello world and H1\"\n"}
{"task_id": 1450897, "prompt": "def f_1450897():\n    \"\"\"get digits only from a string `aas30dsa20` using lambda function\n    \"\"\"\n", "entry_point": "f_1450897", "canonical_solution": "    return \"\"\"\"\"\".join([x for x in \"aas30dsa20\" if x.isdigit()])\n", "test": "def check(candidate):\n\n    assert candidate() == \"3020\"\n"}
{"task_id": 14435268, "prompt": "from bs4 import BeautifulSoup\n\n\ndef f_14435268(soup):\n    \"\"\"access a tag called \"name\" in beautifulsoup `soup`\n    \"\"\"\n", "entry_point": "f_14435268", "canonical_solution": "    return soup.find(\"name\").string\n", "test": "def check(candidate):\n\n    content = \"<contact><name>LastName</name><lastName>FirstName</lastName><phone>+90 333 12345</phone></contact>\"\n    soup = BeautifulSoup(content)\n    assert candidate(soup) == \"LastName\"\n"}
{"task_id": 20180210, "prompt": "import numpy as np\n\n\ndef f_20180210(A, B):\n    \"\"\"concat two matrices `A` and `B` in numpy\n    \"\"\"\n", "entry_point": "f_20180210", "canonical_solution": "    return np.vstack((A, B))\n", "test": "def check(candidate):\n\n    A = np.array([1,2])\n    B = np.array([3,4])\n    assert np.allclose(candidate(A, B), np.array([[1,2],[3,4]]))\n"}
{"task_id": 2011048, "prompt": "import os\n\n\ndef f_2011048(filepath):\n    \"\"\"Get the characters count in a file `filepath`\n    \"\"\"\n", "entry_point": "f_2011048", "canonical_solution": "    return os.stat(filepath).st_size\n", "test": "def check(candidate):\n\n    with open(\"tmp.txt\", 'w') as fw: fw.write(\"hello world!\")\n    assert candidate(\"tmp.txt\") == 12\n"}
{"task_id": 2600191, "prompt": "def f_2600191(l):\n    \"\"\"count the occurrences of item \"b\" in list `l`\n    \"\"\"\n", "entry_point": "f_2600191", "canonical_solution": "    return l.count(\"b\")\n", "test": "def check(candidate):\n\n    assert candidate(\"123456abbbsf\") == 3\n"}
{"task_id": 12842997, "prompt": "import shutil\nfrom unittest.mock import Mock\n\n\ndef f_12842997(srcfile, dstdir):\n    \"\"\"copy file `srcfile` to directory `dstdir`\n    \"\"\"\n", "entry_point": "f_12842997", "canonical_solution": "    shutil.copy(srcfile, dstdir)\n\n    return\n", "test": "def check(candidate):\n\n    shutil.copy = Mock()\n    try:\n        candidate('opera.txt', '/')\n    except:\n        return False \n"}
{"task_id": 1555968, "prompt": "def f_1555968(x):\n    \"\"\"find the key associated with the largest value in dictionary `x` whilst key is non-zero value\n    \"\"\"\n", "entry_point": "f_1555968", "canonical_solution": "    return max(k for k, v in x.items() if v != 0)\n", "test": "def check(candidate):\n\n    assert candidate({'a': 1, 'b': 2, 'c': 2000}) == 'c'\n"}
{"task_id": 17021863, "prompt": "def f_17021863(file):\n    \"\"\"Put the curser at beginning of the file\n    \"\"\"\n", "entry_point": "f_17021863", "canonical_solution": "    file.seek(0)\n\n    return\n", "test": "def check(candidate):\n\n    with open ('a.txt', 'w') as f:\n        f.write('kangaroo\\nkoala\\noxford\\n')\n    f = open('a.txt', 'r')\n    f.read()\n    candidate(f)\n    assert f.readline() == 'kangaroo\\n'\n"}
{"task_id": 38152389, "prompt": "import numpy as np\nimport pandas as pd\n\n\ndef f_38152389(df):\n    \"\"\"combine values from column 'b' and column 'a' of dataframe `df`  into column 'c' of datafram `df`\n    \"\"\"\n", "entry_point": "f_38152389", "canonical_solution": "    df[\"c\"] = np.where(df[\"a\"].isnull, df[\"b\"], df[\"a\"])\n\n    return df\n", "test": "def check(candidate):\n\n    df = pd.DataFrame({'a': [1,2,3], 'b': [0,0,0]})\n    assert np.allclose(candidate(df), pd.DataFrame({'a': [1,2,3], 'b': [0,0,0], 'c': [0,0,0]}))\n"}
{"task_id": 4175686, "prompt": "def f_4175686(d):\n    \"\"\"remove key 'ele' from dictionary `d`\n    \"\"\"\n", "entry_point": "f_4175686", "canonical_solution": "    del d[\"ele\"]\n\n    return d\n", "test": "def check(candidate):\n\n    assert candidate({\"ale\":1, \"ele\": 2}) == {\"ale\": 1}\n"}
{"task_id": 11574195, "prompt": "def f_11574195():\n    \"\"\"merge list `['it']` and list `['was']` and list `['annoying']` into one list\n    \"\"\"\n", "entry_point": "f_11574195", "canonical_solution": "    return [\"it\"] + [\"was\"] + [\"annoying\"]\n", "test": "def check(candidate):\n\n    assert candidate() == ['it', 'was', 'annoying']\n"}
{"task_id": 587647, "prompt": "def f_587647(x):\n    \"\"\"increment a value with leading zeroes in a number `x`\n    \"\"\"\n", "entry_point": "f_587647", "canonical_solution": "    return str(int(x) + 1).zfill(len(x))\n", "test": "def check(candidate):\n\n    assert candidate(\"001\") == \"002\"\n"}
{"task_id": 17315881, "prompt": "import pandas as pd\n\n\ndef f_17315881(df):\n    \"\"\"check if a pandas dataframe `df`'s index is sorted\n    \"\"\"\n", "entry_point": "f_17315881", "canonical_solution": "    return all(df.index[:-1] <= df.index[1:])\n", "test": "def check(candidate):\n\n    df1 = pd.DataFrame({'a': [1,2], 'bb': [0,2]})\n    assert candidate(df1) == True\n"}
{"task_id": 16296643, "prompt": "def f_16296643(level1):\n    \"\"\"Convert tuple `level1` to list\n    \"\"\"\n", "entry_point": "f_16296643", "canonical_solution": "    level1 = map(list, level1)\n\n    return level1\n", "test": "def check(candidate):\n\n    t = ((1, 2), (3, 4))\n    t = candidate(t)\n    assert list(t) == [[1, 2], [3, 4]]\n"}
{"task_id": 3880399, "prompt": "import pprint\n\n\ndef f_3880399(dataobject, logFile):\n    \"\"\"send the output of pprint object `dataobject` to file `logFile`\n    \"\"\"\n", "entry_point": "f_3880399", "canonical_solution": "    return pprint.pprint(dataobject, logFile)\n", "test": "def check(candidate):\n\n    f = open('kkk.txt', 'w')\n    candidate('hello', f)\n    f.close()\n    with open('kkk.txt', 'r') as f:\n        assert 'hello' in f.readline()\n"}
{"task_id": 21800169, "prompt": "import pandas as pd\n\n\ndef f_21800169(df):\n    \"\"\"get index of rows in dataframe `df` which column 'BoolCol' matches value True\n    \"\"\"\n", "entry_point": "f_21800169", "canonical_solution": "    return df[df[\"BoolCol\"]].index.tolist()\n", "test": "def check(candidate):\n\n    df = pd.DataFrame([[True, 2, 3], [False, 5, 6]], columns = ['BoolCol', 'a', 'b'])\n    y = candidate(df)\n    assert y == [0]\n"}
{"task_id": 299446, "prompt": "import os\nfrom unittest.mock import Mock\n\n\ndef f_299446(owd):\n    \"\"\"change working directory to the directory `owd`\n    \"\"\"\n", "entry_point": "f_299446", "canonical_solution": "    os.chdir(owd)\n\n    return\n", "test": "def check(candidate):\n\n    os.chdir = Mock()\n    try:\n        candidate('/')\n    except:\n        assert False\n"}
{"task_id": 14695134, "prompt": "import sqlite3\n\n\ndef f_14695134(c, testfield):\n    \"\"\"insert data from a string `testfield` to sqlite db `c`\n    \"\"\"\n", "entry_point": "f_14695134", "canonical_solution": "    c.execute(\"INSERT INTO test VALUES (?, 'bar')\", (testfield,))\n\n    return\n", "test": "def check(candidate):\n\n    conn = sqlite3.connect('dev.db')\n    cur = conn.cursor()\n    cur.execute(\"CREATE TABLE test (x VARCHAR(10), y VARCHAR(10))\")\n    candidate(cur, 'kang')\n    cur.execute(\"SELECT * FROM test\")\n    rows = cur.fetchall()\n    assert len(rows) == 1\n"}
{"task_id": 24242433, "prompt": "def f_24242433(raw_byte_string):\n    \"\"\"convert a raw string `raw_byte_string` into a normal string\n    \"\"\"\n", "entry_point": "f_24242433", "canonical_solution": "    return raw_byte_string.decode(\"unicode_escape\")\n", "test": "def check(candidate):\n\n    assert candidate(b\"Hello\") == \"Hello\"\n"}
{"task_id": 22882922, "prompt": "import re\n\n\ndef f_22882922(s):\n    \"\"\"split a string `s` with into all strings of repeated characters\n    \"\"\"\n", "entry_point": "f_22882922", "canonical_solution": "    return [m.group(0) for m in re.finditer(\"(\\\\d)\\\\1*\", s)]\n", "test": "def check(candidate):\n\n    assert candidate('111234') == ['111', '2', '3', '4']\n"}
{"task_id": 4143502, "prompt": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef f_4143502():\n    \"\"\"do a scatter plot with empty circles\n    \"\"\"\n", "entry_point": "f_4143502", "canonical_solution": "    return plt.plot(np.random.randn(100), np.random.randn(100), \"o\", mfc=\"none\")\n", "test": "def check(candidate):\n\n    assert 'matplotlib' in str(type(candidate()[0]))\n"}
{"task_id": 32063985, "prompt": "from bs4 import BeautifulSoup\n\n\ndef f_32063985(soup):\n    \"\"\"remove a div from `soup` with a id `main-content` using beautifulsoup\n    \"\"\"\n", "entry_point": "f_32063985", "canonical_solution": "    return soup.find(\"div\", id=\"main-content\").decompose()\n", "test": "def check(candidate):\n\n    markup = \"<a>This is not div <div>This is div 1</div><div id='main-content'>This is div 2</div></a>\"\n    soup = BeautifulSoup(markup,\"html.parser\")\n    candidate(soup)\n    assert str(soup) == '<a>This is not div <div>This is div 1</div></a>'\n"}
{"task_id": 27975069, "prompt": "import pandas as pd\n\n\ndef f_27975069(df):\n    \"\"\"filter rows of datafram `df` containing key word `ball` in column `ids`\n    \"\"\"\n", "entry_point": "f_27975069", "canonical_solution": "    return df[df[\"ids\"].str.contains(\"ball\")]\n", "test": "def check(candidate):\n\n    f = pd.DataFrame([[\"ball1\", 1, 2], [\"hall\", 5, 4]], columns = ['ids', 'x', 'y'])\n    f1 = candidate(f)\n    assert f1['x'][0] == 1\n    assert f1['y'][0] == 2\n"}
{"task_id": 20461165, "prompt": "import pandas as pd\n\n\ndef f_20461165(df):\n    \"\"\"convert pandas index in a dataframe `df` to columns\n    \"\"\"\n", "entry_point": "f_20461165", "canonical_solution": "    return df.reset_index(level=[\"tick\", \"obs\"])\n", "test": "def check(candidate):\n\n    df = pd.DataFrame([['2016-09-13', 'C', 2, 0.0139], ['2016-07-17', 'A', 2, 0.5577]], columns = ['tick', 'tag', 'obs', 'val'])\n    df = df.set_index(['tick', 'tag', 'obs'])\n    df = candidate(df)\n    assert df['tick']['C'] == '2016-09-13'\n"}
{"task_id": 4685571, "prompt": "def f_4685571(b):\n    \"\"\"Get reverse of list items from list 'b' using extended slicing\n    \"\"\"\n", "entry_point": "f_4685571", "canonical_solution": "    return [x[::-1] for x in b]\n", "test": "def check(candidate):\n\n    b = [('spam',0), ('eggs',1)]\n    b1 = candidate(b)\n    assert b1 == [(0, 'spam'), (1, 'eggs')]\n"}
{"task_id": 17960441, "prompt": "import numpy as np\n\n\ndef f_17960441(a, b):\n    \"\"\"zip two 2-d arrays `a` and `b`\n    \"\"\"\n", "entry_point": "f_17960441", "canonical_solution": "    return np.array(list(zip(a.ravel(), b.ravel())), dtype=(\"i4,i4\")).reshape(a.shape)\n", "test": "def check(candidate):\n\n    a = np.array([[9, 8], [7, 6]])\n    b = np.array([[7, 1], [5, 2]])\n    c = candidate(a, b)\n    e = np.array([[(9, 7), (8, 1)], [(7, 5), (6, 2)]], dtype=[('f0', '<i4'), ('f1', '<i4')])\n    assert np.array_equal(c, e)\n"}
{"task_id": 438684, "prompt": "def f_438684(list_of_ints):\n    \"\"\"convert list `list_of_ints` into a comma separated string\n    \"\"\"\n", "entry_point": "f_438684", "canonical_solution": "    return \"\"\",\"\"\".join([str(i) for i in list_of_ints])\n", "test": "def check(candidate):\n\n    list_of_ints = [8, 7, 6]\n    assert candidate(list_of_ints) == '8,7,6'\n"}
{"task_id": 8519922, "prompt": "import requests\nfrom unittest.mock import Mock\n\n\ndef f_8519922(url, DATA, HEADERS_DICT, username, password):\n    \"\"\"Send a post request with raw data `DATA` and basic authentication with `username` and `password`\n    \"\"\"\n", "entry_point": "f_8519922", "canonical_solution": "    return requests.post(\n        url, data=DATA, headers=HEADERS_DICT, auth=(username, password)\n    )\n", "test": "def check(candidate):\n\n    url='https://www.google.com'\n    HEADERS_DICT = {'Accept':'text/json'}\n    requests.post = Mock()\n    try:\n        candidate(url, \"{'name': 'abc'}\", HEADERS_DICT, 'admin', 'admin123')\n    except:\n        assert False\n"}
{"task_id": 26443308, "prompt": "def f_26443308():\n    \"\"\"Find last occurrence of character '}' in string \"abcd}def}\"\n    \"\"\"\n", "entry_point": "f_26443308", "canonical_solution": "    return \"abcd}def}\".rfind(\"}\")\n", "test": "def check(candidate):\n\n    assert candidate() == 8\n"}
{"task_id": 22365172, "prompt": "def f_22365172():\n    \"\"\"Iterate ove list `[1, 2, 3]` using list comprehension\n    \"\"\"\n", "entry_point": "f_22365172", "canonical_solution": "    return [item for item in [1, 2, 3]]\n", "test": "def check(candidate):\n\n    assert candidate() == [1,2,3]\n"}
{"task_id": 12300912, "prompt": "def f_12300912(d):\n    \"\"\"extract all the values with keys 'x' and 'y' from a list of dictionaries `d` to list of tuples\n    \"\"\"\n", "entry_point": "f_12300912", "canonical_solution": "    return [(x[\"x\"], x[\"y\"]) for x in d]\n", "test": "def check(candidate):\n\n    data = [{'x': 1, 'y': 10}, {'x': 3, 'y': 15}, {'x': 2, 'y': 1}]\n    res = candidate(data)\n    assert res == [(1, 10), (3, 15), (2, 1)]\n"}
{"task_id": 678236, "prompt": "import os\n\n\ndef f_678236():\n    \"\"\"get the filename without the extension from file 'hemanth.txt'\n    \"\"\"\n", "entry_point": "f_678236", "canonical_solution": "    return os.path.splitext(os.path.basename(\"hemanth.txt\"))[0]\n", "test": "def check(candidate):\n\n    assert candidate() == \"hemanth\"\n"}
{"task_id": 7895449, "prompt": "def f_7895449():\n    \"\"\"create a list containing flattened list `[['A', 'B', 'C'], ['D', 'E', 'F'], ['G', 'H', 'I']]`\n    \"\"\"\n", "entry_point": "f_7895449", "canonical_solution": "    return sum([[\"A\", \"B\", \"C\"], [\"D\", \"E\", \"F\"], [\"G\", \"H\", \"I\"]], [])\n", "test": "def check(candidate):\n\n    assert candidate() == ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I']\n"}
{"task_id": 31617845, "prompt": "import pandas as pd\n\n\ndef f_31617845(df):\n    \"\"\"select rows in a dataframe `df` column 'closing_price' between two values 99 and 101\n    \"\"\"\n", "entry_point": "f_31617845", "canonical_solution": "    df = df[(df[\"closing_price\"] >= 99) & (df[\"closing_price\"] <= 101)]\n\n    return df\n", "test": "def check(candidate):\n\n    df = pd.DataFrame([67, 68, 69, 70, 99, 100, 101, 102], columns = ['closing_price'])\n    assert candidate(df).shape[0] == 3\n"}
{"task_id": 25698710, "prompt": "import pandas as pd\n\n\ndef f_25698710(df):\n    \"\"\"replace all occurrences of a string `\\n` by string `<br>` in a pandas data frame `df`\n    \"\"\"\n", "entry_point": "f_25698710", "canonical_solution": "    return df.replace({\"\\n\": \"<br>\"}, regex=True)\n", "test": "def check(candidate):\n\n    df = pd.DataFrame(['klm\\npqr', 'wxy\\njkl'], columns = ['val'])\n    expected = pd.DataFrame(['klm<br>pqr', 'wxy<br>jkl'], columns = ['val'])\n    assert pd.DataFrame.equals(candidate(df), expected)\n"}
{"task_id": 41923858, "prompt": "def f_41923858(word):\n    \"\"\"Get a list of pairs from a string `word` using lambda function\n    \"\"\"\n", "entry_point": "f_41923858", "canonical_solution": "    return list(map(lambda x, y: x + y, word[:-1], word[1:]))\n", "test": "def check(candidate):\n\n    assert candidate('abcdef') == ['ab', 'bc', 'cd', 'de', 'ef']\n"}
{"task_id": 9760588, "prompt": "import re\n\n\ndef f_9760588(myString):\n    \"\"\"extract a url from a string `myString`\n    \"\"\"\n", "entry_point": "f_9760588", "canonical_solution": "    return re.search(\"(?P<url>https?://[^\\\\s]+)\", myString).group(\"url\")\n", "test": "def check(candidate):\n\n    assert candidate(\"This is a link http://www.google.com\") == \"http://www.google.com\"\n"}
{"task_id": 5843518, "prompt": "import re\n\n\ndef f_5843518(mystring):\n    \"\"\"remove all special characters, punctuation and spaces from a string `mystring` using regex\n    \"\"\"\n", "entry_point": "f_5843518", "canonical_solution": "    return re.sub(\"[^A-Za-z0-9]+\", \"\", mystring)\n", "test": "def check(candidate):\n\n    assert candidate('Special $#! characters   spaces 888323') == 'Specialcharactersspaces888323'\n"}
{"task_id": 36674519, "prompt": "import pandas as pd\nimport datetime\n\n\ndef f_36674519():\n    \"\"\"create a DatetimeIndex containing 13 periods of the second friday of each month starting from date '2016-01-01'\n    \"\"\"\n", "entry_point": "f_36674519", "canonical_solution": "    return pd.date_range(\"2016-01-01\", freq=\"WOM-2FRI\", periods=13)\n", "test": "def check(candidate):\n\n    actual = candidate() \n    expected = [[2016, 1, 8], [2016, 2, 12],\n                [2016, 3, 11], [2016, 4, 8],\n                [2016, 5, 13], [2016, 6, 10],\n                [2016, 7, 8], [2016, 8, 12],\n                [2016, 9, 9], [2016, 10, 14],\n                [2016, 11, 11], [2016, 12, 9],\n                [2017, 1, 13]]\n    for i in range(0, len(expected)):\n        d = datetime.date(expected[i][0], expected[i][1], expected[i][2])\n        assert d == actual[i].date()\n"}
{"task_id": 508657, "prompt": "def f_508657():\n    \"\"\"Create multidimensional array `matrix` with 3 rows and 2 columns in python\n    \"\"\"\n", "entry_point": "f_508657", "canonical_solution": "    matrix = [[\"a\", \"b\"], [\"c\", \"d\"], [\"e\", \"f\"]]\n\n    return matrix\n", "test": "def check(candidate):\n\n    matrix = candidate()\n    assert len(matrix) == 3\n    assert all([len(row)==2 for row in matrix])\n"}
{"task_id": 1007481, "prompt": "def f_1007481(mystring):\n    \"\"\"replace spaces with underscore in string `mystring`\n    \"\"\"\n", "entry_point": "f_1007481", "canonical_solution": "    return mystring.replace(\" \", \"_\")\n", "test": "def check(candidate):\n\n    assert candidate(' ') == '_'\n"}
{"task_id": 1249786, "prompt": "def f_1249786(my_string):\n    \"\"\"split string `my_string` on white spaces\n    \"\"\"\n", "entry_point": "f_1249786", "canonical_solution": "    return \"\"\" \"\"\".join(my_string.split())\n", "test": "def check(candidate):\n\n    assert candidate('hello   world ') == 'hello world'\n"}
{"task_id": 4444923, "prompt": "import os\n\n\ndef f_4444923(filename):\n    \"\"\"get filename without extension from file `filename`\n    \"\"\"\n", "entry_point": "f_4444923", "canonical_solution": "    return os.path.splitext(filename)[0]\n", "test": "def check(candidate):\n\n    assert candidate('/Users/test/hello.txt') == '/Users/test/hello'\n"}
{"task_id": 13728486, "prompt": "def f_13728486(l):\n    \"\"\"get a list containing the sum of each element `i` in list `l` plus the previous elements\n    \"\"\"\n", "entry_point": "f_13728486", "canonical_solution": "    return [sum(l[:i]) for i, _ in enumerate(l)]\n", "test": "def check(candidate):\n\n    assert candidate([1,2,3]) == [0,1,3]\n"}
{"task_id": 9743134, "prompt": "def f_9743134():\n    \"\"\"split a string `Docs/src/Scripts/temp` by `/` keeping `/` in the result\n    \"\"\"\n", "entry_point": "f_9743134", "canonical_solution": "    return \"\"\"Docs/src/Scripts/temp\"\"\".replace(\"/\", \"/\\x00/\").split(\"\\x00\")\n", "test": "def check(candidate):\n\n    assert candidate() == ['Docs/', '/src/', '/Scripts/', '/temp']\n"}
{"task_id": 20546419, "prompt": "import numpy as np\n\n\ndef f_20546419(r):\n    \"\"\"shuffle columns of an numpy array 'r'\n    \"\"\"\n", "entry_point": "f_20546419", "canonical_solution": "    return np.random.shuffle(np.transpose(r))\n", "test": "def check(candidate):\n\n    a1 = np.array([[ 1, 20], [ 2, 30]])\n    candidate(a1)\n    assert np.array_equal(a1, np.array([[ 1, 20],[ 2, 30]])) or np.array_equal(a1, np.array([[ 20, 1], [ 30, 2]]))\n"}
{"task_id": 32675861, "prompt": "import pandas as pd\n\n\ndef f_32675861(df):\n    \"\"\"copy all values in a column 'B' to a new column 'D' in a pandas data frame 'df'\n    \"\"\"\n", "entry_point": "f_32675861", "canonical_solution": "    df[\"D\"] = df[\"B\"]\n\n    return df\n", "test": "def check(candidate):\n\n    df_1 = pd.DataFrame({'A': [1,2,3], 'B': ['a', 'b', 'c']})\n    candidate(df_1)\n    assert (df_1['D'] == df_1['B']).all()\n"}
{"task_id": 14227561, "prompt": "import json\n\n\ndef f_14227561(data):\n    \"\"\"find a value within nested json 'data' where the key inside another key 'B' is unknown.\n    \"\"\"\n", "entry_point": "f_14227561", "canonical_solution": "    return list(data[\"A\"][\"B\"].values())[0][\"maindata\"][0][\"Info\"]\n", "test": "def check(candidate):\n\n    s1 = '{\"A\":{\"B\":{\"unknown\":{\"1\":\"F\",\"maindata\":[{\"Info\":\"TEXT\"}]}}}}'\n    data = json.loads(s1)\n    assert candidate(data) == 'TEXT'\n"}
{"task_id": 14858916, "prompt": "def f_14858916(string, predicate):\n    \"\"\"check characters of string `string` are true predication of function `predicate`\n    \"\"\"\n", "entry_point": "f_14858916", "canonical_solution": "    return all(predicate(x) for x in string)\n", "test": "def check(candidate):\n\n    def predicate(x):\n        if x == 'a':\n            return True\n        else:\n            return False\n    assert candidate('aab', predicate) == False\n"}
{"task_id": 574236, "prompt": "import os\n\n\ndef f_574236():\n    \"\"\"determine number of files on a drive with python\n    \"\"\"\n", "entry_point": "f_574236", "canonical_solution": "    return os.statvfs(\"/\").f_files - os.statvfs(\"/\").f_ffree\n", "test": "def check(candidate):\n\n    assert candidate() == (os.statvfs('/').f_files - os.statvfs('/').f_ffree)\n"}
{"task_id": 7011291, "prompt": "import sqlite3\n\n\ndef f_7011291(cursor):\n    \"\"\"how to get a single result from a SQLite query from `cursor`\n    \"\"\"\n", "entry_point": "f_7011291", "canonical_solution": "    return cursor.fetchone()[0]\n", "test": "def check(candidate):\n\n    conn = sqlite3.connect('main')\n    cursor = conn.cursor()\n    cursor.execute(\"CREATE TABLE student (name VARCHAR(10))\")\n    cursor.execute(\"INSERT INTO student VALUES('abc')\")\n    cursor.execute(\"SELECT * FROM student\")\n    assert candidate(cursor) == 'abc'\n"}
{"task_id": 6378889, "prompt": "def f_6378889(user):\n    \"\"\"Get a list of integers by splitting  a string `user` with comma\n    \"\"\"\n", "entry_point": "f_6378889", "canonical_solution": "    return [int(s) for s in user.split(\",\")]\n", "test": "def check(candidate):\n\n    assert candidate('0') == [0]\n"}
{"task_id": 5212870, "prompt": "def f_5212870(list):\n    \"\"\"Sorting a Python list `list` by the first item ascending and last item descending\n    \"\"\"\n", "entry_point": "f_5212870", "canonical_solution": "    return sorted(list, key=lambda x: (x[0], -x[1]))\n", "test": "def check(candidate):\n\n    list = [(9, 0), (9, 1), (9, -1), (8, 5), (4, 5)]\n    assert candidate(list) == [(4, 5), (8, 5), (9, 1), (9, 0), (9, -1)]\n"}
{"task_id": 403421, "prompt": "class Tag:\n    def __init__(self, name, count):\n        self.name = name\n        self.count = count\n\n    def __str__(self):\n        return f\"[{self.name}]-[{self.count}]\"\n\n\ndef f_403421(ut):\n    \"\"\"reverse list `ut` based on the `count` attribute of each object\n    \"\"\"\n", "entry_point": "f_403421", "canonical_solution": "    ut.sort(key=lambda x: x.count, reverse=True)\n\n    return ut\n", "test": "def check(candidate):\n\n    result = candidate([Tag(\"red\", 1), Tag(\"blue\", 22), Tag(\"black\", 0)])\n    assert (result[0].name == \"blue\") and (result[0].count == 22)\n    assert (result[1].name == \"red\") and (result[1].count == 1)\n    assert (result[2].name == \"black\") and (result[2].count == 0)\n"}
{"task_id": 3944876, "prompt": "def f_3944876(i):\n    \"\"\"cast an int `i` to a string and concat to string 'ME'\n    \"\"\"\n", "entry_point": "f_3944876", "canonical_solution": "    return \"ME\" + str(i)\n", "test": "def check(candidate):\n\n    assert candidate(100) == \"ME100\"\n"}
{"task_id": 40903174, "prompt": "import pandas as pd\n\n\ndef f_40903174(df):\n    \"\"\"Sorting data in Pandas DataFrame `df` with columns 'System_num' and 'Dis'\n    \"\"\"\n", "entry_point": "f_40903174", "canonical_solution": "    return df.sort_values([\"System_num\", \"Dis\"])\n", "test": "def check(candidate):\n\n    df1 = pd.DataFrame([[6, 1, 1], [5, 1, 1], [4, 1, 1], [3, 2, 1], [2, 2, 1], [1, 2, 1]], columns = ['Dis', 'System_num', 'Energy'])\n    df_ans1 = pd.DataFrame([[4, 1, 1], [5, 1, 1], [6, 1, 1], [1, 2, 1], [2, 2, 1], [3, 2, 1]], columns = ['Dis', 'System_num', 'Energy'])\n    assert (df_ans1.equals(candidate(df1).reset_index(drop = True))) == True\n"}
{"task_id": 4454298, "prompt": "import filecmp\n\n\ndef f_4454298(infile, outfile):\n    \"\"\"prepend the line '#test firstline\\n' to the contents of file 'infile' and save as the file 'outfile'\n    \"\"\"\n", "entry_point": "f_4454298", "canonical_solution": "    open(outfile, \"w\").write(\"#test firstline\\n\" + open(infile).read())\n\n    return\n", "test": "def check(candidate):\n\n    open('test1.txt', 'w').write('test1')\n    candidate('test1.txt', 'test1_out.txt')\n    open('test1_ans.txt', 'w').write('#test firstline\\ntest1')\n    assert filecmp.cmp('test1_out.txt', 'test1_ans.txt') == True\n"}
{"task_id": 19729928, "prompt": "def f_19729928(l):\n    \"\"\"sort a list `l` by length of value in tuple\n    \"\"\"\n", "entry_point": "f_19729928", "canonical_solution": "    l.sort(key=lambda t: len(t[1]), reverse=True)\n\n    return l\n", "test": "def check(candidate):\n\n    assert candidate([(\"a\", [1]), (\"b\", [1,2]), (\"c\", [1,2,3])]) ==         [(\"c\", [1,2,3]), (\"b\", [1,2]), (\"a\", [1])]\n"}
{"task_id": 31371879, "prompt": "import re\n\n\ndef f_31371879(s):\n    \"\"\"split string `s` by words that ends with 'd'\n    \"\"\"\n", "entry_point": "f_31371879", "canonical_solution": "    return re.findall(\"\\\\b(\\\\w+)d\\\\b\", s)\n", "test": "def check(candidate):\n\n    assert candidate(\"this is good\") == [\"goo\"]\n"}
{"task_id": 9012008, "prompt": "import re\n\n\ndef f_9012008():\n    \"\"\"return `True` if string `foobarrrr` contains regex `ba[rzd]`\n    \"\"\"\n", "entry_point": "f_9012008", "canonical_solution": "    return bool(re.search(\"ba[rzd]\", \"foobarrrr\"))\n", "test": "def check(candidate):\n\n    assert candidate() == True\n"}
{"task_id": 7961363, "prompt": "from collections import OrderedDict\n\n\ndef f_7961363():\n    \"\"\"Removing duplicates in list `abracadabra`\n    \"\"\"\n", "entry_point": "f_7961363", "canonical_solution": "    return list(OrderedDict.fromkeys(\"abracadabra\"))\n", "test": "def check(candidate):\n\n    assert candidate() == ['a', 'b', 'r', 'c', 'd']\n"}
{"task_id": 5183533, "prompt": "import numpy\n\n\ndef f_5183533(a):\n    \"\"\"Convert the first row of numpy matrix `a` to a list\n    \"\"\"\n", "entry_point": "f_5183533", "canonical_solution": "    return numpy.array(a)[0].tolist()\n", "test": "def check(candidate):\n\n    assert candidate([[1,2,3],[4,5,6]]) == [1,2,3]\n"}
{"task_id": 5999747, "prompt": "from bs4 import BeautifulSoup\n\n\ndef f_5999747(soup):\n    \"\"\"In `soup`, get the content of the sibling of the `td`  tag with text content `Address:`\n    \"\"\"\n", "entry_point": "f_5999747", "canonical_solution": "    return soup.find(text=\"Address:\").findNext(\"td\").contents[0]\n", "test": "def check(candidate):\n\n    assert candidate(BeautifulSoup(\"<td><b>Address:</b></td><td>My home address</td>\")) == \"My home address\"\n"}
{"task_id": 4284648, "prompt": "def f_4284648(l):\n    \"\"\"convert each tuple in list `l` to a string with '@' separating the tuples' elements\n    \"\"\"\n", "entry_point": "f_4284648", "canonical_solution": "    return \"\"\" \"\"\".join([(\"%d@%d\" % (t[0], t[1])) for t in l])\n", "test": "def check(candidate):\n\n    assert candidate([(1, 2), (3, 4)]) == \"1@2 3@4\"\n"}
{"task_id": 29696641, "prompt": "import re\n\n\ndef f_29696641(teststr):\n    \"\"\"Get all matches with regex pattern `\\\\d+[xX]` in list of string `teststr`\n    \"\"\"\n", "entry_point": "f_29696641", "canonical_solution": "    return [i for i in teststr if re.search(\"\\\\d+[xX]\", i)]\n", "test": "def check(candidate):\n\n    assert candidate(['1 FirstString', '2x Sec String', '3rd String', 'x forString', '5X fifth']) == ['2x Sec String', '5X fifth']\n"}
{"task_id": 15315452, "prompt": "import pandas as pd\n\n\ndef f_15315452(df):\n    \"\"\"select values from column 'A' for which corresponding values in column 'B' will be greater than 50, and in column 'C' - equal 900 in dataframe `df`\n    \"\"\"\n", "entry_point": "f_15315452", "canonical_solution": "    return df[\"A\"][(df[\"B\"] > 50) & (df[\"C\"] == 900)]\n", "test": "def check(candidate):\n\n    df = pd.DataFrame({'A': [7, 7, 4, 4, 7, 7, 3, 9, 6, 3], 'B': [20, 80, 90, 30, 80, 60, 80, 40, 40 ,10], 'C': [300, 700, 100, 900, 200, 800, 900, 100, 100, 600]})\n    assert candidate(df).to_dict() == {6: 3}\n"}
{"task_id": 4642501, "prompt": "def f_4642501(d):\n    \"\"\"sort dictionaries `d` by keys\n    \"\"\"\n", "entry_point": "f_4642501", "canonical_solution": "    return sorted(d.items())\n", "test": "def check(candidate):\n\n    d = {'a': [1, 2, 3], 'c': ['one', 'two'], 'b': ['blah', 'bhasdf', 'asdf'], 'd': ['asdf', 'wer', 'asdf', 'zxcv']}\n    assert candidate(d) == [('a', [1, 2, 3]), ('b', ['blah', 'bhasdf', 'asdf']), ('c', ['one', 'two']), ('d', ['asdf', 'wer', 'asdf', 'zxcv'])]\n"}
{"task_id": 642154, "prompt": "def f_642154(T1):\n    \"\"\"convert items in `T1` to integers\n    \"\"\"\n", "entry_point": "f_642154", "canonical_solution": "    return [list(map(int, x)) for x in T1]\n", "test": "def check(candidate):\n\n    T1 = (('13', '17', '18', '21', '32'), ('07', '11', '13', '14', '28'), ('01', '05', '06', '08', '15', '16'))\n    assert candidate(T1) == [[13, 17, 18, 21, 32], [7, 11, 13, 14, 28], [1, 5, 6, 8, 15, 16]]\n"}
{"task_id": 3777301, "prompt": "import subprocess\nfrom unittest.mock import Mock\n\n\ndef f_3777301():\n    \"\"\"call a shell script `notepad` using subprocess\n    \"\"\"\n", "entry_point": "f_3777301", "canonical_solution": "    subprocess.call([\"notepad\"])\n\n    return\n", "test": "def check(candidate):\n\n    subprocess.call = Mock()\n    try:\n        candidate()\n    except:\n        assert False\n"}
{"task_id": 7946798, "prompt": "def f_7946798(l1, l2):\n    \"\"\"combine lists `l1` and `l2`  by alternating their elements\n    \"\"\"\n", "entry_point": "f_7946798", "canonical_solution": "    return [val for pair in zip(l1, l2) for val in pair]\n", "test": "def check(candidate):\n\n    assert candidate([1,2,3], [10,20,30]) == [1,10,2,20,3,30]\n"}
{"task_id": 8908287, "prompt": "def f_8908287():\n    \"\"\"encode a string `data to be encoded` to `ascii` encoding\n    \"\"\"\n", "entry_point": "f_8908287", "canonical_solution": "    return \"data to be encoded\".encode(\"ascii\")\n", "test": "def check(candidate):\n\n    assert candidate() == b'data to be encoded'\n"}
{"task_id": 7856296, "prompt": "import csv\n\n\ndef f_7856296():\n    \"\"\"parse tab-delimited CSV file 'text.txt' into a list\n    \"\"\"\n", "entry_point": "f_7856296", "canonical_solution": "    return list(csv.reader(open(\"text.txt\", \"r\"), delimiter=\"\\t\"))\n", "test": "def check(candidate):\n\n    with open('text.txt', 'w', newline='') as csvfile:\n        spamwriter = csv.writer(csvfile, delimiter='\t')\n        spamwriter.writerow(['Spam', 'Lovely Spam', 'Wonderful Spam'])\n        spamwriter.writerow(['hello', 'world', '!'])\n\n    assert candidate() == [['Spam', 'Lovely Spam', 'Wonderful Spam'], ['hello', 'world', '!']]\n"}
{"task_id": 9035479, "prompt": "def f_9035479(my_object, my_str):\n    \"\"\"Get attribute `my_str` of object `my_object`\n    \"\"\"\n", "entry_point": "f_9035479", "canonical_solution": "    return getattr(my_object, my_str)\n", "test": "def check(candidate):\n\n    class Student:\n        id = 9\n        name = \"abc\"\n        grade = 97.08\n\n    s = Student()\n    \n    assert candidate(s, \"name\") == \"abc\"\n"}
{"task_id": 5558418, "prompt": "import collections\n\n\ndef f_5558418(LD):\n    \"\"\"group a list of dicts `LD` into one dict by key\n    \"\"\"\n", "entry_point": "f_5558418", "canonical_solution": "    return dict(zip(LD[0], zip(*[list(d.values()) for d in LD])))\n", "test": "def check(candidate):\n\n    employees = [{'name' : 'apple', 'id': 60}, {'name' : 'orange', 'id': 65}]\n    exp_result = {'name': ('apple', 'orange'), 'id': (60, 65)}\n    actual_result = candidate(employees)\n    for key in actual_result:\n        assert collections.Counter(list(exp_result[key])) == collections.Counter(list(actual_result[key]))\n"}
{"task_id": 638048, "prompt": "def f_638048(list_of_pairs):\n    \"\"\"sum the first value in each tuple in a list of tuples `list_of_pairs` in python\n    \"\"\"\n", "entry_point": "f_638048", "canonical_solution": "    return sum([pair[0] for pair in list_of_pairs])\n", "test": "def check(candidate):\n\n    assert candidate([(5, 9), (-1, -2), (4, 2)]) == 8\n"}
{"task_id": 14950260, "prompt": "import ast\n\n\ndef f_14950260():\n    \"\"\"convert unicode string u\"{'code1':1,'code2':1}\" into dictionary\n    \"\"\"\n", "entry_point": "f_14950260", "canonical_solution": "    return ast.literal_eval(\"{'code1':1,'code2':1}\")\n", "test": "def check(candidate):\n\n    d = candidate()\n    exp_result = {'code1' : 1, 'code2': 1}\n    for key in d:\n        if key not in exp_result:\n            assert False\n        else:\n            assert d[key] == exp_result[key]\n"}
{"task_id": 11416772, "prompt": "def f_11416772(mystring):\n    \"\"\"find all words in a string `mystring` that start with the `$` sign\n    \"\"\"\n", "entry_point": "f_11416772", "canonical_solution": "    return [word for word in mystring.split() if word.startswith(\"$\")]\n", "test": "def check(candidate):\n\n    str = \"$abc def $efg $hij klm $\"\n    exp_result = ['$abc', '$efg', '$hij', '$']\n    assert sorted(candidate(str)) == sorted(exp_result)\n"}
{"task_id": 11331982, "prompt": "import re\n\n\ndef f_11331982(text):\n    \"\"\"remove any url within string `text`\n    \"\"\"\n", "entry_point": "f_11331982", "canonical_solution": "    text = re.sub(\"^https?:\\\\/\\\\/.*[\\\\r\\\\n]*\", \"\", text, flags=re.MULTILINE)\n\n    return text\n", "test": "def check(candidate):\n\n    assert candidate(\"https://www.wikipedia.org/ click at\") == \"\"\n"}
{"task_id": 34945274, "prompt": "import numpy as np\n\n\ndef f_34945274(A):\n    \"\"\"replace all elements in array `A` that are not present in array `[1, 3, 4]` with zeros\n    \"\"\"\n", "entry_point": "f_34945274", "canonical_solution": "    return np.where(np.in1d(A, [1, 3, 4]).reshape(A.shape), A, 0)\n", "test": "def check(candidate):\n\n    A = np.array([[6, 8, 1, 3, 4], [-1, 0, 3, 5, 1]])\n    B = np.array([[0, 0, 1, 3, 4], [0, 0, 3, 0, 1]])\n    assert np.array_equal(candidate(A), B)\n"}
{"task_id": 15819980, "prompt": "import numpy as np\n\n\ndef f_15819980(a):\n    \"\"\"calculate mean across dimension in a 2d array `a`\n    \"\"\"\n", "entry_point": "f_15819980", "canonical_solution": "    return np.mean(a, axis=1)\n", "test": "def check(candidate):\n\n    A = np.array([[6, 8, 1, 3, 4], [-1, 0, 3, 5, 1]])\n    B = np.array([4.4, 1.6])\n    assert np.array_equal(candidate(A), B)\n"}
{"task_id": 19894365, "prompt": "from unittest.mock import Mock\nimport subprocess\n\n\ndef f_19894365():\n    \"\"\"run r script '/usr/bin/Rscript --vanilla /pathto/MyrScript.r'\n    \"\"\"\n", "entry_point": "f_19894365", "canonical_solution": "    return subprocess.call(\"/usr/bin/Rscript --vanilla /pathto/MyrScript.r\", shell=True)\n", "test": "def check(candidate):\n\n    subprocess.call = Mock(return_value = 0)\n    assert candidate() == 0\n"}
{"task_id": 33058590, "prompt": "import pandas as pd\nimport numpy as np\n\n\ndef f_33058590(df):\n    \"\"\"replacing nan in the dataframe `df` with row average\n    \"\"\"\n", "entry_point": "f_33058590", "canonical_solution": "    return df.fillna(df.mean(axis=0))\n", "test": "def check(candidate):\n\n    df = pd.DataFrame([[1,2,3],[4,5,6],[7.0,np.nan,9.0]], columns=[\"c1\",\"c2\",\"c3\"]) \n    res = pd.DataFrame([[1,2,3],[4,5,6],[7.0,3.5,9.0]], columns=[\"c1\",\"c2\",\"c3\"])\n    assert candidate(df).equals(res)\n"}
{"task_id": 23359886, "prompt": "import numpy as np\n\n\ndef f_23359886(a):\n    \"\"\"selecting rows in Numpy ndarray 'a', where the value in the first column is 0 and value in the second column is 1\n    \"\"\"\n", "entry_point": "f_23359886", "canonical_solution": "    return a[np.where((a[:, (0)] == 0) * (a[:, (1)] == 1))]\n", "test": "def check(candidate):\n\n    a = np.array([[ 0,  1,  2], [ 3,  4,  5], [ 6,  7,  8], [ 9, 10, 11], [12, 13, 14]])\n    res = np.array([[0, 1, 2]])\n    assert np.array_equal(candidate(a), res)\n"}
{"task_id": 4383082, "prompt": "import regex as re\n\n\ndef f_4383082(words):\n    \"\"\"separate words delimited by one or more spaces into a list\n    \"\"\"\n", "entry_point": "f_4383082", "canonical_solution": "    return re.split(\" +\", words)\n", "test": "def check(candidate):\n\n    s = \"hello world sample text\"\n    res = [\"hello\", \"world\", \"sample\", \"text\"]\n    assert candidate(s) == res\n"}
{"task_id": 14637696, "prompt": "def f_14637696(words):\n    \"\"\"length of longest element in list `words`\n    \"\"\"\n", "entry_point": "f_14637696", "canonical_solution": "    return len(max(words, key=len))\n", "test": "def check(candidate):\n\n    assert candidate([\"hello\", \"world\", \"sample\", \"text\", \"superballer\"]) == 11\n"}
{"task_id": 3933478, "prompt": "def f_3933478(result):\n    \"\"\"get the value associated with unicode key 'from_user' of first dictionary in list `result`\n    \"\"\"\n", "entry_point": "f_3933478", "canonical_solution": "    return result[0][\"from_user\"]\n", "test": "def check(candidate):\n\n    Contents = [{\"hi\": 7, \"bye\": 4, \"from_user\": 0}, {1: 2, 3: 4, 5: 6}]\n    assert candidate(Contents) == 0\n"}
{"task_id": 39112645, "prompt": "def f_39112645():\n    \"\"\"Retrieve each line from a file 'File.txt' as a list\n    \"\"\"\n", "entry_point": "f_39112645", "canonical_solution": "    return [line.split() for line in open(\"File.txt\")]\n", "test": "def check(candidate):\n\n    with open('File.txt','w') as fw:\n        fw.write(\"hi hello cat dog\")\n    assert candidate() == [['hi', 'hello', 'cat', 'dog']]\n"}
{"task_id": 1031851, "prompt": "def f_1031851(a):\n    \"\"\"swap keys with values in a dictionary `a`\n    \"\"\"\n", "entry_point": "f_1031851", "canonical_solution": "    return dict((v, k) for k, v in a.items())\n", "test": "def check(candidate):\n\n    a = {\"one\": 1, \"two\": 2}\n    assert candidate(a) == {1: \"one\", 2: \"two\"}\n"}
{"task_id": 8577137, "prompt": "import os\n\n\ndef f_8577137():\n    \"\"\"Open a file `path/to/FILE_NAME.ext` in write mode\n    \"\"\"\n", "entry_point": "f_8577137", "canonical_solution": "    return open(\"path/to/FILE_NAME.ext\", \"w\")\n", "test": "def check(candidate):\n\n    path1 = os.path.join(\"\", \"path\")\n    os.mkdir(path1)\n    path2 = os.path.join(\"path\", \"to\")\n    os.mkdir(path2)\n    candidate()\n    assert os.path.exists('path/to/FILE_NAME.ext')\n"}
{"task_id": 17926273, "prompt": "import pandas as pd\n\n\ndef f_17926273(df):\n    \"\"\"count distinct values in a column 'col3' of a pandas dataframe `df` group by objects in 'col1' and 'col2'\n    \"\"\"\n", "entry_point": "f_17926273", "canonical_solution": "    return df.groupby([\"col1\", \"col2\"])[\"col3\"].nunique().reset_index()\n", "test": "def check(candidate):\n\n    data = [[1, 1, 1], [1, 1, 1], [1, 1, 2], [1, 2, 3], [1, 2, 3], [1, 2, 3], \n            [2, 1, 1], [2, 1, 2], [2, 1, 3], [2, 2, 3], [2, 2, 3], [2, 2, 3]]\n    expected = [[1, 1, 2], [1, 2, 1], [2, 1, 3], [2, 2, 1]]\n    df = pd.DataFrame(data, columns = ['col1', 'col2', 'col3'])\n    expected_df = pd.DataFrame(expected, columns = ['col1', 'col2', 'col3'])\n    df1 = candidate(df)\n    assert pd.DataFrame.equals(expected_df, df1)\n"}
{"task_id": 3735814, "prompt": "def f_3735814(dict1):\n    \"\"\"create list of values from dictionary `dict1` that have a key that starts with 'EMP$$'\n    \"\"\"\n", "entry_point": "f_3735814", "canonical_solution": "    return [value for key, value in list(dict1.items()) if key.startswith(\"EMP$$\")]\n", "test": "def check(candidate):\n\n    assert sorted(candidate({'EMP$$': 1, 'EMP$$112': 4})) == [1, 4]\n"}
{"task_id": 26097916, "prompt": "import pandas as pd\n\n\ndef f_26097916(sf):\n    \"\"\"convert a pandas series `sf` into a pandas dataframe `df` with columns `email` and `list`\n    \"\"\"\n", "entry_point": "f_26097916", "canonical_solution": "    df = pd.DataFrame({\"email\": sf.index, \"list\": sf.values})\n\n    return df\n", "test": "def check(candidate):\n\n    dict = {'email1': [1.0, 5.0, 7.0], 'email2': [4.2, 3.6, -0.9]}\n    sf = pd.Series(dict)\n    k = [['email1', [1.0, 5.0, 7.0]], ['email2', [4.2, 3.6, -0.9]]]\n    df1 = pd.DataFrame(k, columns=['email', 'list'])\n    df2 = candidate(sf)\n    assert pd.DataFrame.equals(df1, df2)\n"}
{"task_id": 4048964, "prompt": "def f_4048964(list):\n    \"\"\"concatenate elements of list `list` by tabs `    `\n    \"\"\"\n", "entry_point": "f_4048964", "canonical_solution": "    return \"\\t\".join(map(str, list))\n", "test": "def check(candidate):\n\n    assert candidate(['hello', 'world', '!']) == 'hello\\tworld\\t!'\n"}
{"task_id": 3182716, "prompt": "def f_3182716():\n    \"\"\"Encode a latin character in string `Sopet\\xc3\\xb3n` properly\n    \"\"\"\n", "entry_point": "f_3182716", "canonical_solution": "    return \"Sopet\\xc3\\xb3n\".encode(\"latin-1\").decode(\"utf-8\")\n", "test": "def check(candidate):\n\n    assert candidate() == \"Sopet\u00f3n\"\n"}
{"task_id": 35622945, "prompt": "import re\n\n\ndef f_35622945(s):\n    \"\"\"regex, find \"n\"s only in the middle of string `s`\n    \"\"\"\n", "entry_point": "f_35622945", "canonical_solution": "    return re.findall(\"n(?<=[^n]n)n+(?=[^n])(?i)\", s)\n", "test": "def check(candidate):\n\n    assert candidate(\"ncnnnne\") == ['nnnn']\n"}
{"task_id": 5306756, "prompt": "def f_5306756():\n    \"\"\"display the float `1/3*100` as a percentage\n    \"\"\"\n", "entry_point": "f_5306756", "canonical_solution": "    return \"{0:.0f}%\".format(1.0 / 3 * 100)\n", "test": "def check(candidate):\n\n    assert(candidate() == \"33%\")\n"}
{"task_id": 2878084, "prompt": "def f_2878084(l):\n    \"\"\"sort a list of dictionaries by the value of keys 'title', 'title_url', 'id' in ascending order.\n    \"\"\"\n", "entry_point": "f_2878084", "canonical_solution": "    l.sort(key=lambda x: (x[\"title\"], x[\"title_url\"], x[\"id\"]))\n\n    return l\n", "test": "def check(candidate):\n\n    input = [\n        {'title':'New York Times', 'title_url':'New_York_Times','id':4}, \n        {'title':'USA Today','title_url':'USA_Today','id':6}, \n        {'title':'Apple News','title_url':'Apple_News','id':2}\n    ]\n    res = [\n        {'title': 'Apple News', 'title_url': 'Apple_News', 'id': 2}, \n        {'title': 'New York Times', 'title_url': 'New_York_Times', 'id': 4},\n        {'title': 'USA Today', 'title_url': 'USA_Today', 'id': 6}\n    ]\n    assert candidate(input) == res\n"}
{"task_id": 9323159, "prompt": "import heapq\n\n\ndef f_9323159(l1, l2):\n    \"\"\"find 10 largest differences between each respective elements of list `l1` and list `l2`\n    \"\"\"\n", "entry_point": "f_9323159", "canonical_solution": "    return heapq.nlargest(10, range(len(l1)), key=lambda i: abs(l1[i] - l2[i]))\n", "test": "def check(candidate):\n\n    l1 = [99, 86, 90, 70, 86, 95, 56, 98, 80, 81]\n    l2 = [21, 11, 21, 1, 26, 40, 4, 50, 34, 37]\n    res = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate(l1, l2) == res\n"}
{"task_id": 24189150, "prompt": "import pandas as pd\nfrom sqlalchemy import create_engine\n\n\ndef f_24189150(df, engine):\n    \"\"\"write records in dataframe `df` to table 'test' in schema 'a_schema' with `engine`\n    \"\"\"\n", "entry_point": "f_24189150", "canonical_solution": "    df.to_sql(\"test\", engine)\n\n    return\n", "test": "def check(candidate):\n\n    engine = create_engine('sqlite://', echo=False)\n    df = pd.DataFrame({'name' : ['User 1', 'User 2', 'User 3']})\n    candidate(df, engine)\n    result = pd.read_sql('SELECT name FROM test', engine)\n    assert result.equals(df)\n"}
{"task_id": 30766151, "prompt": "import re\n\n\ndef f_30766151(s):\n    \"\"\"Extract brackets from string `s`\n    \"\"\"\n", "entry_point": "f_30766151", "canonical_solution": "    return re.sub(\"[^(){}[\\]]\", \"\", s)\n", "test": "def check(candidate):\n\n    assert candidate(\"(a(vdwvndw){}]\") == \"((){}]\"\n"}
{"task_id": 1143379, "prompt": "def f_1143379(L):\n    \"\"\"remove duplicate elements from list 'L'\n    \"\"\"\n", "entry_point": "f_1143379", "canonical_solution": "    return list(dict((x[0], x) for x in L).values())\n", "test": "def check(candidate):\n\n    L = [['14', '65', 76], ['2', '5', 6], ['7', '12', 33], ['14', '22', 46]]\n    res = [['14', '22', 46], ['2', '5', 6], ['7', '12', 33]]\n    assert(candidate(L) == res)\n"}
{"task_id": 12330522, "prompt": "def f_12330522(file):\n    \"\"\"read a file `file` without newlines\n    \"\"\"\n", "entry_point": "f_12330522", "canonical_solution": "    return [line.rstrip(\"\\n\") for line in file]\n", "test": "def check(candidate):\n\n    res = ['1', '2', '3']\n    f = open(\"myfile.txt\", \"a\")\n    f.write(\"1\\n2\\n3\")\n    f.close()\n    f = open(\"myfile.txt\", \"r\")\n    assert candidate(f) == res\n"}
{"task_id": 364621, "prompt": "def f_364621(testlist, element):\n    \"\"\"get the position of item `element` in list `testlist`\n    \"\"\"\n", "entry_point": "f_364621", "canonical_solution": "    return testlist.index(element)\n", "test": "def check(candidate):\n\n    testlist = [1,2,3,5,3,1,2,1,6]\n    assert candidate(testlist, 1) == 0\n"}
{"task_id": 13145368, "prompt": "from operator import itemgetter\n\n\ndef f_13145368(lis):\n    \"\"\"get the item at index 0 from the tuple that has maximum value at index 1 in list `lis`\n    \"\"\"\n", "entry_point": "f_13145368", "canonical_solution": "    return max(lis, key=itemgetter(1))[0]\n", "test": "def check(candidate):\n\n    lis = [(101, 153), (255, 827), (361, 961)]\n    assert candidate(lis) == 361\n"}
{"task_id": 2689189, "prompt": "import time\n\n\ndef f_2689189():\n    \"\"\"Make a delay of 1 second\n    \"\"\"\n", "entry_point": "f_2689189", "canonical_solution": "    time.sleep(1)\n\n    return\n", "test": "def check(candidate):\n\n    t1 = time.time()\n    candidate()\n    t2 = time.time()\n    assert t2 - t1 > 1\n"}
{"task_id": 12485244, "prompt": "def f_12485244(L):\n    \"\"\"convert list of tuples `L` to a string\n    \"\"\"\n", "entry_point": "f_12485244", "canonical_solution": "    return \"\"\", \"\"\".join(\"(\" + \", \".join(i) + \")\" for i in L)\n", "test": "def check(candidate):\n\n    L = [(\"abc\", \"def\"), (\"hij\", \"klm\")]\n    assert candidate(L) == '(abc, def), (hij, klm)'\n"}
{"task_id": 16193578, "prompt": "from math import degrees\n\n\ndef f_16193578(list5):\n    \"\"\"Sort lis `list5` in ascending order based on the degrees value of its elements\n    \"\"\"\n", "entry_point": "f_16193578", "canonical_solution": "    return sorted(list5, key=lambda x: (degrees(x), x))\n", "test": "def check(candidate):\n\n    list5 = [4, 1, 2, 3, 9, 5]\n    assert candidate(list5) == [1, 2, 3, 4, 5, 9]\n"}
{"task_id": 16041405, "prompt": "def f_16041405(l):\n    \"\"\"convert a list `l` into a generator object\n    \"\"\"\n", "entry_point": "f_16041405", "canonical_solution": "    return (n for n in l)\n", "test": "def check(candidate):\n\n    generator = candidate([1,2,3,5])\n    assert str(type(generator)) == \"<class 'generator'>\"\n    assert [x for x in generator] == [1, 2, 3, 5]\n"}
{"task_id": 18837607, "prompt": "def f_18837607(oldlist, removelist):\n    \"\"\"remove elements from list `oldlist` that have an index number mentioned in list `removelist`\n    \"\"\"\n", "entry_point": "f_18837607", "canonical_solution": "    return [v for i, v in enumerate(oldlist) if i not in removelist]\n", "test": "def check(candidate):\n\n    assert candidate([\"asdf\",\"ghjk\",\"qwer\",\"tyui\"], [1,3]) == ['asdf', 'qwer']\n"}
{"task_id": 4710067, "prompt": "def f_4710067():\n    \"\"\"Open a file `yourfile.txt` in write mode\n    \"\"\"\n", "entry_point": "f_4710067", "canonical_solution": "    return open(\"yourfile.txt\", \"w\")\n", "test": "def check(candidate):\n\n    fw = candidate()\n    assert fw.name == \"yourfile.txt\"\n    assert fw.mode == 'w'\n"}
{"task_id": 7373219, "prompt": "def f_7373219(obj, attr):\n    \"\"\"get attribute 'attr' from object `obj`\n    \"\"\"\n", "entry_point": "f_7373219", "canonical_solution": "    return getattr(obj, attr)\n", "test": "def check(candidate):\n\n    class Student:\n        student_id = \"\"\n        student_name = \"\"\n\n        def __init__(self, student_id=101, student_name=\"Adam\"):\n            self.student_id = student_id\n            self.student_name = student_name\n\n    student = Student()\n\n    assert(candidate(student, 'student_name') == \"Adam\")\n    assert(candidate(student, 'student_id') == 101)\n"}
{"task_id": 8171751, "prompt": "def f_8171751():\n    \"\"\"convert tuple of tuples `(('aa',), ('bb',), ('cc',))` to list in one line\n    \"\"\"\n", "entry_point": "f_8171751", "canonical_solution": "    return list(map(lambda a: a[0], ((\"aa\",), (\"bb\",), (\"cc\",))))\n", "test": "def check(candidate):\n\n    assert candidate() == ['aa', 'bb', 'cc']\n"}
{"task_id": 28986489, "prompt": "import pandas as pd\n\n\ndef f_28986489(df):\n    \"\"\"replace a characters in a column of a dataframe `df`\n    \"\"\"\n", "entry_point": "f_28986489", "canonical_solution": "    df[\"range\"].replace(\",\", \"-\", inplace=True)\n\n    return df\n", "test": "def check(candidate):\n\n    df = pd.DataFrame({'range' : [\",\", \"(50,290)\", \",,,\"]})\n    res = pd.DataFrame({'range' : [\"-\", \"(50,290)\", \",,,\"]})\n    assert candidate(df).equals(res)\n"}
{"task_id": 19339, "prompt": "from itertools import zip_longest\n\n\ndef f_19339():\n    \"\"\"unzip list `[('a', 1), ('b', 2), ('c', 3), ('d', 4), ('e', )]` and fill empty results with None\n    \"\"\"\n", "entry_point": "f_19339", "canonical_solution": "    return list(zip_longest((\"a\", 1), (\"b\", 2), (\"c\", 3), (\"d\", 4), (\"e\",)))\n", "test": "def check(candidate):\n\n    assert(candidate() == [('a', 'b', 'c', 'd', 'e'), (1, 2, 3, 4, None)])\n"}
{"task_id": 1960516, "prompt": "import json\n\n\ndef f_1960516():\n    \"\"\"encode `Decimal('3.9')` to a JSON string\n    \"\"\"\n", "entry_point": "f_1960516", "canonical_solution": "    return json.dumps(\"3.9\")\n", "test": "def check(candidate):\n\n    data = candidate()\n    assert json.loads(data) == '3.9'\n"}
{"task_id": 1024847, "prompt": "def f_1024847(data):\n    \"\"\"Add key 'a' to dictionary `data` with value 1\n    \"\"\"\n", "entry_point": "f_1024847", "canonical_solution": "    data.update(a=1)\n\n    return data\n", "test": "def check(candidate):\n\n    assert candidate({'key': 'value'}) == {'key': 'value', 'a': 1}\n"}
{"task_id": 35837346, "prompt": "def f_35837346(matrix):\n    \"\"\"find maximal value in matrix `matrix`\n    \"\"\"\n", "entry_point": "f_35837346", "canonical_solution": "    return max([max(i) for i in matrix])\n", "test": "def check(candidate):\n\n    assert candidate([[1,2,3],[4,5,6],[7,8,9]]) == 9\n"}
{"task_id": 20457038, "prompt": "def f_20457038(answer):\n    \"\"\"Round number `answer` to 2 precision after the decimal point\n    \"\"\"\n", "entry_point": "f_20457038", "canonical_solution": "    answer = str(round(answer, 2))\n\n    return answer\n", "test": "def check(candidate):\n\n    assert candidate(2.34351) == \"2.34\"\n"}
{"task_id": 2890896, "prompt": "import re\n\n\ndef f_2890896(s):\n    \"\"\"extract ip address `ip` from an html string `s`\n    \"\"\"\n", "entry_point": "f_2890896", "canonical_solution": "    ip = re.findall(\"[0-9]+(?:\\\\.[0-9]+){3}\", s)\n\n    return ip\n", "test": "def check(candidate):\n\n    assert candidate(\"<html><head><title>Current IP Check</title></head><body>Current IP Address: 165.91.15.131</body></html>\") == [\"165.91.15.131\"]\n"}
{"task_id": 29836836, "prompt": "import pandas as pd\n\n\ndef f_29836836(df):\n    \"\"\"filter dataframe `df` by values in column `A` that appear more than once\n    \"\"\"\n", "entry_point": "f_29836836", "canonical_solution": "    return df.groupby(\"A\").filter(lambda x: len(x) > 1)\n", "test": "def check(candidate):\n\n    assert candidate(pd.DataFrame([[1, 2], [1, 4], [5, 6]], columns=['A', 'B'])).equals(pd.DataFrame([[1, 2], [1, 4]], columns=['A', 'B'])) is True\n"}
{"task_id": 2545397, "prompt": "import pandas as pd\n\n\ndef f_2545397():\n    \"\"\"Get a list of integers `lst` from a file `filename.txt`\n    \"\"\"\n", "entry_point": "f_2545397", "canonical_solution": "    lst = list(map(int, open(\"filename.txt\").readlines()))\n\n    return lst\n", "test": "def check(candidate):\n\n    with open('./filename.txt', 'w') as fw: \n        for s in [\"1\", \"2\", \"100\"]:\n            fw.write(f\"{s}\\n\")\n\n    assert candidate() == [1, 2, 100]\n"}
{"task_id": 29903025, "prompt": "import pandas as pd\nfrom collections import Counter\n\n\ndef f_29903025(df):\n    \"\"\"count most frequent 100 words in column 'text' of dataframe `df`\n    \"\"\"\n", "entry_point": "f_29903025", "canonical_solution": "    return Counter(\" \".join(df[\"text\"]).split()).most_common(100)\n", "test": "def check(candidate):\n\n    df = pd.DataFrame({\"text\": [\n      'Python is a high-level, general-purpose programming language.', \n      'Its design philosophy emphasizes code readability with the use of significant indentation. Python is dynamically-typed and garbage-collected.'\n    ]})\n    assert candidate(df) == [('Python', 2),('is', 2),('a', 1),('high-level,', 1),('general-purpose', 1),\n        ('programming', 1),('language.', 1),('Its', 1),('design', 1),('philosophy', 1),('emphasizes', 1),\n        ('code', 1),('readability', 1),('with', 1), ('the', 1),('use', 1),('of', 1),('significant', 1),\n        ('indentation.', 1),('dynamically-typed', 1),('and', 1),('garbage-collected.', 1)]\n"}
{"task_id": 7378180, "prompt": "import itertools\n\n\ndef f_7378180():\n    \"\"\"generate all 2-element subsets of tuple `(1, 2, 3)`\n    \"\"\"\n", "entry_point": "f_7378180", "canonical_solution": "    return list(itertools.combinations((1, 2, 3), 2))\n", "test": "def check(candidate):\n\n    assert candidate() == [(1, 2), (1, 3), (2, 3)]\n"}
{"task_id": 4530069, "prompt": "import pytz\nimport time\nfrom datetime import datetime, timezone\n\n\ndef f_4530069():\n    \"\"\"get a value of datetime.today() in the UTC time zone\n    \"\"\"\n", "entry_point": "f_4530069", "canonical_solution": "    return datetime.now(pytz.utc)\n", "test": "def check(candidate):\n\n    assert (candidate() - datetime(1970, 1, 1).replace(tzinfo=timezone.utc)).total_seconds() - time.time() <= 1\n"}
{"task_id": 4842956, "prompt": "def f_4842956(list1):\n    \"\"\"Create `list2` to contain the lists from list `list1` excluding the empty lists from `list1`\n    \"\"\"\n", "entry_point": "f_4842956", "canonical_solution": "    list2 = [x for x in list1 if x]\n\n    return list2\n", "test": "def check(candidate):\n\n    assert candidate([[\"a\"], [], [\"b\"]]) == [[\"a\"], [\"b\"]]\n"}
{"task_id": 17284947, "prompt": "import re\n\n\ndef f_17284947(example_str):\n    \"\"\"Use a regex to get all text in a string `example_str` that is not surrounded by square brackets\n    \"\"\"\n", "entry_point": "f_17284947", "canonical_solution": "    return re.findall(\"(.*?)(?:\\\\[.*?\\\\]|$)\", example_str)\n", "test": "def check(candidate):\n\n    list_elems = candidate(\"Josie Smith [3996 COLLEGE AVENUE, SOMETOWN, MD 21003]Mugsy Dog Smith [2560 OAK ST, GLENMEADE, WI 14098]\")\n    assert \"\".join(list_elems).strip() == 'Josie Smith Mugsy Dog Smith'\n"}
{"task_id": 14182339, "prompt": "import re\n\n\ndef f_14182339():\n    \"\"\"match multiple regex patterns with the alternation operator `|` in a string `(zyx)bc`\n    \"\"\"\n", "entry_point": "f_14182339", "canonical_solution": "    return re.findall(\"\\\\(.*?\\\\)|\\\\w\", \"(zyx)bc\")\n", "test": "def check(candidate):\n\n    assert candidate() == ['(zyx)', 'b', 'c']\n"}
{"task_id": 7126916, "prompt": "def f_7126916(elements):\n    \"\"\"formate each string cin list `elements` into pattern '%{0}%'\n    \"\"\"\n", "entry_point": "f_7126916", "canonical_solution": "    elements = [\"%{0}%\".format(element) for element in elements]\n\n    return elements\n", "test": "def check(candidate):\n\n    elements = ['abc', 'def', 'ijk', 'mno']\n    assert candidate(elements) == ['%abc%', '%def%', '%ijk%', '%mno%']\n"}
{"task_id": 3595685, "prompt": "import subprocess\nfrom unittest.mock import Mock\n\n\ndef f_3595685():\n    \"\"\"Open a background process 'background-process' with arguments 'arguments'\n    \"\"\"\n", "entry_point": "f_3595685", "canonical_solution": "    return subprocess.Popen([\"background-process\", \"arguments\"])\n", "test": "def check(candidate):\n\n    subprocess.Popen = Mock(return_value = 0)\n    assert candidate() == 0\n"}
{"task_id": 18453566, "prompt": "def f_18453566(mydict, mykeys):\n    \"\"\"get list of values from dictionary 'mydict' w.r.t. list of keys 'mykeys'\n    \"\"\"\n", "entry_point": "f_18453566", "canonical_solution": "    return [mydict[x] for x in mykeys]\n", "test": "def check(candidate):\n\n    mydict = {'one': 1, 'two': 2, 'three': 3}\n    mykeys = ['three', 'one']\n    assert candidate(mydict, mykeys) == [3, 1]\n"}
{"task_id": 12692135, "prompt": "def f_12692135():\n    \"\"\"convert list `[('Name', 'Joe'), ('Age', 22)]` into a dictionary\n    \"\"\"\n", "entry_point": "f_12692135", "canonical_solution": "    return dict([(\"Name\", \"Joe\"), (\"Age\", 22)])\n", "test": "def check(candidate):\n\n    assert candidate() == {'Name': 'Joe', 'Age': 22}\n"}
{"task_id": 14401047, "prompt": "import numpy as np\n\n\ndef f_14401047(data):\n    \"\"\"average each two columns of array `data`\n    \"\"\"\n", "entry_point": "f_14401047", "canonical_solution": "    return data.mean(axis=1).reshape(data.shape[0], -1)\n", "test": "def check(candidate):\n\n    data = np.array([[1, 2, 3, 4, 4, 3, 7, 1], [6, 2, 3, 4, 3, 4, 4, 1]])\n    expected_res = np.array([[3.125], [3.375]])\n    assert np.array_equal(candidate(data), expected_res)\n"}
{"task_id": 18886596, "prompt": "def f_18886596(s):\n    \"\"\"double backslash escape all double quotes in string `s`\n    \"\"\"\n", "entry_point": "f_18886596", "canonical_solution": "    return s.replace('\"', '\"')\n", "test": "def check(candidate):\n\n    s = 'This sentence has some \"quotes\" in it'\n    assert candidate(s) == 'This sentence has some \\\"quotes\\\" in it'\n"}
{"task_id": 5932059, "prompt": "import re\n\n\ndef f_5932059(s):\n    \"\"\"split a string `s` into a list of words and whitespace\n    \"\"\"\n", "entry_point": "f_5932059", "canonical_solution": "    return re.split(\"(\\\\W+)\", s)\n", "test": "def check(candidate):\n\n    s = \"this is  a\\nsentence\"\n    assert candidate(s) == ['this', ' ', 'is', '  ', 'a', '\\n', 'sentence']\n"}
{"task_id": 35945473, "prompt": "def f_35945473(myDictionary):\n    \"\"\"reverse the keys and values in a dictionary `myDictionary`\n    \"\"\"\n", "entry_point": "f_35945473", "canonical_solution": "    return {i[1]: i[0] for i in list(myDictionary.items())}\n", "test": "def check(candidate):\n\n    assert candidate({'a' : 'b', 'c' : 'd'}) == {'b': 'a', 'd': 'c'}\n"}
{"task_id": 30729735, "prompt": "def f_30729735(myList):\n    \"\"\"finding the index of elements containing substring 'how' and 'what' in a list of strings 'myList'.\n    \"\"\"\n", "entry_point": "f_30729735", "canonical_solution": "    return [\n        i for i, j in enumerate(myList) if \"how\" in j.lower() or \"what\" in j.lower()\n    ]\n", "test": "def check(candidate):\n\n    assert candidate(['abc', 'how', 'what', 'def']) == [1, 2]\n"}
{"task_id": 1303243, "prompt": "def f_1303243(obj_to_test):\n    \"\"\"check if `obj_to_test` is a string\n    \"\"\"\n", "entry_point": "f_1303243", "canonical_solution": "    return isinstance(obj_to_test, str)\n", "test": "def check(candidate):\n\n    assert candidate(\"hello\") == True\n"}
{"task_id": 8177079, "prompt": "def f_8177079(mylog, list1):\n    \"\"\"append items in list `mylog` to `list1`\n    \"\"\"\n", "entry_point": "f_8177079", "canonical_solution": "    for line in mylog:\n        list1.append(line)\n\n    return\n", "test": "def check(candidate):\n\n    a, b = [1, 2, 3], [4, 5, 6]\n    candidate(a, b)\n    assert b == [4, 5, 6, 1, 2, 3]\n"}
{"task_id": 4126227, "prompt": "def f_4126227(a, b):\n    \"\"\"append a tuple of elements from list `a` with indexes '[0][0] [0][2]' to list `b`\n    \"\"\"\n", "entry_point": "f_4126227", "canonical_solution": "    b.append((a[0][0], a[0][2]))\n\n    return\n", "test": "def check(candidate):\n\n    a = [(1,2,3),(4,5,6)]\n    b = [(0,0)]\n    candidate(a, b)\n    assert(b == [(0, 0), (1, 3)])\n"}
{"task_id": 34902378, "prompt": "from flask import Flask\n\n\ndef f_34902378(app):\n    \"\"\"Initialize `SECRET_KEY` in flask config with `Your_secret_string `\n    \"\"\"\n", "entry_point": "f_34902378", "canonical_solution": "    app.config[\"SECRET_KEY\"] = \"Your_secret_string\"\n\n    return\n", "test": "def check(candidate):\n\n    app = Flask(\"test\")\n    candidate(app)\n    assert app.config['SECRET_KEY'] == 'Your_secret_string'\n"}
{"task_id": 22799300, "prompt": "import numpy as np\nimport pandas as pd\nfrom scipy import stats\n\n\ndef f_22799300(out):\n    \"\"\"unpack a series of tuples in pandas `out` into a DataFrame with column names 'out-1' and 'out-2'\n    \"\"\"\n", "entry_point": "f_22799300", "canonical_solution": "    return pd.DataFrame(out.tolist(), columns=[\"out-1\", \"out-2\"], index=out.index)\n", "test": "def check(candidate):\n\n    df = pd.DataFrame(dict(x=np.random.randn(100), y=np.repeat(list(\"abcd\"), 25)))\n    out = df.groupby(\"y\").x.apply(stats.ttest_1samp, 0)\n    test = pd.DataFrame(out.tolist())\n    test.columns = ['out-1', 'out-2']\n    test.index = out.index\n    res = candidate(out)\n    assert(test.equals(res))\n"}
{"task_id": 1762484, "prompt": "def f_1762484(stocks_list):\n    \"\"\"find the index of an element 'MSFT' in a list `stocks_list`\n    \"\"\"\n", "entry_point": "f_1762484", "canonical_solution": "    return [x for x in range(len(stocks_list)) if stocks_list[x] == \"MSFT\"]\n", "test": "def check(candidate):\n\n    stocks_list = ['AAPL', 'MSFT', 'GOOG', 'MSFT', 'MSFT']\n    assert(candidate(stocks_list) == [1,3,4])\n"}
{"task_id": 3464359, "prompt": "import matplotlib.pyplot as plt\n\n\ndef f_3464359(ax, labels):\n    \"\"\"rotate the xtick `labels` of matplotlib plot `ax` by `45` degrees to make long labels readable\n    \"\"\"\n", "entry_point": "f_3464359", "canonical_solution": "    return ax.set_xticklabels(labels, rotation=45)\n", "test": "def check(candidate):\n\n    fig, ax = plt.subplots()\n    ax.plot([1, 2, 3, 4], [1, 4, 2, 3])\n    ret = candidate(ax, [f\"#{i}\" for i in range(7)])\n    assert [tt.get_rotation() == 45.0 for tt in ret]\n"}
{"task_id": 875968, "prompt": "import re\n\n\ndef f_875968(s):\n    \"\"\"remove symbols from a string `s`\n    \"\"\"\n", "entry_point": "f_875968", "canonical_solution": "    return re.sub(\"[^\\\\w]\", \" \", s)\n", "test": "def check(candidate):\n\n    s = \"how much for the maple syrup? $20.99? That's ridiculous!!!\"\n    assert candidate(s) == 'how much for the maple syrup   20 99  That s ridiculous   '\n"}
{"task_id": 34750084, "prompt": "import re\n\n\ndef f_34750084(s):\n    \"\"\"Find octal characters matches from a string `s` using regex\n    \"\"\"\n", "entry_point": "f_34750084", "canonical_solution": "    return re.findall(\"'\\\\\\\\[0-7]{1,3}'\", s)\n", "test": "def check(candidate):\n\n    assert candidate(r\"char x = '\\077';\") == [\"'\\\\077'\"]\n"}
{"task_id": 13209288, "prompt": "import re\n\n\ndef f_13209288(input):\n    \"\"\"Split string `input` at every space followed by an upper-case letter\n    \"\"\"\n", "entry_point": "f_13209288", "canonical_solution": "    return re.split(\"[ ](?=[A-Z])\", input)\n", "test": "def check(candidate):\n\n    assert candidate('HELLO there HOW are YOU') == ['HELLO there', 'HOW are', 'YOU']\n"}
{"task_id": 24642040, "prompt": "import requests\nfrom unittest.mock import Mock\n\n\ndef f_24642040(url, files, headers, data):\n    \"\"\"send multipart encoded file `files` to url `url` with headers `headers` and metadata `data`\n    \"\"\"\n", "entry_point": "f_24642040", "canonical_solution": "    return requests.post(url, files=files, headers=headers, data=data)\n", "test": "def check(candidate):\n\n    requests.post = Mock()\n    try:\n        candidate('https://www.google.com', ['a.txt'], {'accept': 'text/json'}, {'name': 'abc'})\n    except:\n        assert False\n"}
{"task_id": 4290716, "prompt": "def f_4290716(filename, bytes_):\n    \"\"\"write bytes `bytes_` to a file `filename` in python 3\n    \"\"\"\n", "entry_point": "f_4290716", "canonical_solution": "    return open(filename, \"wb\").write(bytes_)\n", "test": "def check(candidate):\n\n    bytes_ = b'68 65 6c 6c 6f'\n    candidate(\"tmpfile\", bytes_)\n\n    with open(\"tmpfile\", 'rb') as fr:\n        assert fr.read() == bytes_\n"}
{"task_id": 33078554, "prompt": "def f_33078554(lst, dct):\n    \"\"\"get a list from a list `lst` with values mapped into a dictionary `dct`\n    \"\"\"\n", "entry_point": "f_33078554", "canonical_solution": "    return [dct[k] for k in lst]\n", "test": "def check(candidate):\n\n    assert candidate(['c', 'd', 'a', 'b', 'd'], {'a': '3', 'b': '3', 'c': '5', 'd': '3'}) == ['5', '3', '3', '3', '3'] \n"}
{"task_id": 15247628, "prompt": "import pandas as pd\n\n\ndef f_15247628(x):\n    \"\"\"find duplicate names in column 'name' of the dataframe `x`\n    \"\"\"\n", "entry_point": "f_15247628", "canonical_solution": "    return x[\"name\"][x.duplicated(\"name\")]\n", "test": "def check(candidate):\n\n    assert candidate(pd.DataFrame([{'name': 'willy', 'age': 10}, {'name': 'wilson', 'age': 11}, {'name': 'zoe', 'age': 10}])).tolist() == [] \n"}
{"task_id": 783897, "prompt": "def f_783897():\n    \"\"\"truncate float 1.923328437452 to 3 decimal places\n    \"\"\"\n", "entry_point": "f_783897", "canonical_solution": "    return round(1.923328437452, 3)\n", "test": "def check(candidate):\n\n    assert candidate() == 1.923\n"}
{"task_id": 22859493, "prompt": "from datetime import datetime\n\n\ndef f_22859493(li):\n    \"\"\"sort list `li` in descending order based on the date value in second element of each list in list `li`\n    \"\"\"\n", "entry_point": "f_22859493", "canonical_solution": "    return sorted(li, key=lambda x: datetime.strptime(x[1], \"%d/%m/%Y\"), reverse=True)\n", "test": "def check(candidate):\n\n    assert candidate([['name', '01/03/2012', 'job'], ['name', '02/05/2013', 'job'], ['name', '03/08/2014', 'job']]) == [['name', '03/08/2014', 'job'], ['name', '02/05/2013', 'job'], ['name', '01/03/2012', 'job']] \n"}
{"task_id": 29394552, "prompt": "import matplotlib.pyplot as plt\n\n\ndef f_29394552(ax):\n    \"\"\"place the radial ticks in plot `ax` at 135 degrees\n    \"\"\"\n", "entry_point": "f_29394552", "canonical_solution": "    ax.set_rlabel_position(135)\n\n    return\n", "test": "def check(candidate):\n\n    ax = plt.subplot(111, polar=True)\n    candidate(ax)\n    assert ax.properties()['rlabel_position'] == 135.0\n"}
{"task_id": 3320406, "prompt": "import os\n\n\ndef f_3320406(my_path):\n    \"\"\"check if path `my_path` is an absolute path\n    \"\"\"\n", "entry_point": "f_3320406", "canonical_solution": "    return os.path.isabs(my_path)\n", "test": "def check(candidate):\n\n    assert candidate('.') == False \n"}
{"task_id": 2212433, "prompt": "def f_2212433(yourdictfile):\n    \"\"\"count the number of keys in dictionary `yourdictfile`\n    \"\"\"\n", "entry_point": "f_2212433", "canonical_solution": "    return len(set(open(yourdictfile).read().split()))\n", "test": "def check(candidate):\n\n    with open('dict.txt', 'w') as fw:\n        for w in [\"apple\", \"banana\", \"tv\", \"apple\", \"phone\"]:\n            fw.write(f\"{w}\\n\")\n    assert candidate('dict.txt') == 4\n"}
{"task_id": 20067636, "prompt": "import pandas as pd\n\n\ndef f_20067636(df):\n    \"\"\"pandas dataframe `df` get first row of each group by 'id'\n    \"\"\"\n", "entry_point": "f_20067636", "canonical_solution": "    return df.groupby(\"id\").first()\n", "test": "def check(candidate):\n\n    df = pd.DataFrame({\n        'id': [1, 1, 1, 2, 2, 3, 3, 3, 3, 4, 4, 5, 6, 6, 6, 7, 7], \n        'value': ['first', 'second', 'second', 'first', 'second', 'first', 'third', 'fourth', 'fifth', 'second', 'fifth', 'first', 'first', 'second', 'third', 'fourth', 'fifth']\n    })\n    assert candidate(df).to_dict() == {'value': {1: 'first', 2: 'first', 3: 'first', 4: 'second', 5: 'first', 6: 'first', 7: 'fourth'}}\n"}
{"task_id": 40924332, "prompt": "import numpy as np\nimport pandas as pd\n\n\ndef f_40924332(df):\n    \"\"\"split a list in first column into multiple columns keeping other columns as well in pandas data frame `df`\n    \"\"\"\n", "entry_point": "f_40924332", "canonical_solution": "    return pd.concat([df[0].apply(pd.Series), df[1]], axis=1)\n", "test": "def check(callerFunction):\n\n    assert callerFunction(pd.DataFrame([[[8, 10, 12], 'A'], [[7, 9, 11], 'B']])).equals(pd.DataFrame([[8,10,12,'A'], [7,9,11,'B']], columns=[0,1,2,1]))\n"}
{"task_id": 30759776, "prompt": "import re\n\n\ndef f_30759776(data):\n    \"\"\"extract attributes 'src=\"js/([^\"]*\\\\bjquery\\\\b[^\"]*)\"' from string `data`\n    \"\"\"\n", "entry_point": "f_30759776", "canonical_solution": "    return re.findall('src=\"js/([^\"]*\\\\bjquery\\\\b[^\"]*)\"', data)\n", "test": "def check(candidate):\n\n    data = '<script type=\"text/javascript\" src=\"js/jquery-1.9.1.min.js\"/><script type=\"text/javascript\" src=\"js/jquery-migrate-1.2.1.min.js\"/><script type=\"text/javascript\" src=\"js/jquery-ui.min.js\"/><script type=\"text/javascript\" src=\"js/abc_bsub.js\"/><script type=\"text/javascript\" src=\"js/abc_core.js\"/>            <script type=\"text/javascript\" src=\"js/abc_explore.js\"/><script type=\"text/javascript\" src=\"js/abc_qaa.js\"/>'\n    assert candidate(data) == ['jquery-1.9.1.min.js', 'jquery-migrate-1.2.1.min.js', 'jquery-ui.min.js']\n"}
{"task_id": 25388796, "prompt": "def f_25388796():\n    \"\"\"Sum integers contained in strings in list `['', '3.4', '', '', '1.0']`\n    \"\"\"\n", "entry_point": "f_25388796", "canonical_solution": "    return sum(\n        int(float(item)) for item in [_f for _f in [\"\", \"3.4\", \"\", \"\", \"1.0\"] if _f]\n    )\n", "test": "def check(candidate):\n\n    assert candidate() == 4\n"}
{"task_id": 804995, "prompt": "import subprocess\nfrom unittest.mock import Mock\n\n\ndef f_804995():\n    \"\"\"Call a subprocess with arguments `c:\\\\Program Files\\\\VMware\\\\VMware Server\\\\vmware-cmd.bat` that may contain spaces\n    \"\"\"\n", "entry_point": "f_804995", "canonical_solution": "    return subprocess.Popen(\n        [\"c:\\\\Program Files\\\\VMware\\\\VMware Server\\\\vmware-cmd.bat\"]\n    )\n", "test": "def check(candidate):\n\n    subprocess.Popen = Mock(return_value = 0)\n    assert candidate() == 0\n"}
{"task_id": 26441253, "prompt": "from queue import PriorityQueue\n\n\ndef f_26441253(q):\n    \"\"\"reverse a priority queue `q` in python without using classes\n    \"\"\"\n", "entry_point": "f_26441253", "canonical_solution": "    for n in [1, 3, 4, 2]:\n        q.put((-n, n))\n\n    return q\n", "test": "def check(candidate):\n\n    q = PriorityQueue()\n    q = candidate(q)\n    expected = [4, 3, 2, 1]\n    for i in range(0, len(expected)):\n        assert q.get()[1] == expected[i]\n"}
{"task_id": 373194, "prompt": "import re\n\n\ndef f_373194(data):\n    \"\"\"find all matches of regex pattern '([a-fA-F\\\\d]{32})' in string `data`\n    \"\"\"\n", "entry_point": "f_373194", "canonical_solution": "    return re.findall(\"([a-fA-F\\\\d]{32})\", data)\n", "test": "def check(candidate):\n\n    assert candidate('6f96cfdfe5ccc627cadf24b41725caa4 gorilla') ==         ['6f96cfdfe5ccc627cadf24b41725caa4']\n"}
{"task_id": 518021, "prompt": "def f_518021(my_string):\n    \"\"\"Getting the length of `my_string`\n    \"\"\"\n", "entry_point": "f_518021", "canonical_solution": "    return len(my_string)\n", "test": "def check(candidate):\n\n    assert candidate(\"sedfgbdjofgljnh\") == 15\n"}
{"task_id": 40452956, "prompt": "def f_40452956():\n    \"\"\"remove escape character from string \"\\\\a\"\n    \"\"\"\n", "entry_point": "f_40452956", "canonical_solution": "    return b\"\\\\a\".decode(\"unicode-escape\")\n", "test": "def check(candidate):\n\n    assert candidate() == '\\x07'\n"}
{"task_id": 8687018, "prompt": "def f_8687018():\n    \"\"\"replace each 'a' with 'b' and each 'b' with 'a' in the string 'obama' in a single pass.\n    \"\"\"\n", "entry_point": "f_8687018", "canonical_solution": "    return \"\"\"obama\"\"\".replace(\"a\", \"%temp%\").replace(\"b\", \"a\").replace(\"%temp%\", \"b\")\n", "test": "def check(candidate):\n\n    assert candidate() == 'oabmb'\n"}
{"task_id": 303200, "prompt": "import os\nimport shutil\nfrom unittest.mock import Mock\n\n\ndef f_303200():\n    \"\"\"remove directory tree '/folder_name'\n    \"\"\"\n", "entry_point": "f_303200", "canonical_solution": "    shutil.rmtree(\"/folder_name\")\n\n    return\n", "test": "def check(candidate):\n\n    shutil.rmtree = Mock()\n    os.walk = Mock(return_value = [])\n    candidate()\n    assert os.walk('/') == []\n"}
{"task_id": 13740672, "prompt": "import pandas as pd\n\n\ndef f_13740672(data):\n    \"\"\"create a new column `weekday` in pandas data frame `data` based on the values in column `my_dt`\n    \"\"\"\n", "entry_point": "f_13740672", "canonical_solution": "\n    def weekday(i):\n        if i >= 1 and i <= 5:\n            return True\n        else:\n            return False\n\n    data[\"weekday\"] = data[\"my_dt\"].apply(lambda x: weekday(x))\n\n    return data\n", "test": "def check(candidate):\n\n    data = pd.DataFrame([1, 2, 3, 4, 5, 6, 7], columns = ['my_dt'])\n    data = candidate(data)\n    assert data['weekday'][5] == False\n    assert data['weekday'][6] == False\n    for i in range (0, 5):\n        assert data['weekday'][i]\n"}
{"task_id": 20950650, "prompt": "from collections import Counter\n\n\ndef f_20950650(x):\n    \"\"\"reverse sort counter `x` by value\n    \"\"\"\n", "entry_point": "f_20950650", "canonical_solution": "    return sorted(list(x.items()), key=lambda pair: pair[1], reverse=True)\n", "test": "def check(candidate):\n\n    x = Counter({'blue': 1, 'red': 2, 'green': 3})\n    assert candidate(x) == [('green', 3), ('red', 2), ('blue', 1)]\n"}
{"task_id": 9775297, "prompt": "import numpy as np\n\n\ndef f_9775297(a, b):\n    \"\"\"append a numpy array 'b' to a numpy array 'a'\n    \"\"\"\n", "entry_point": "f_9775297", "canonical_solution": "    return np.vstack((a, b))\n", "test": "def check(candidate):\n\n    a = np.array([[1, 2, 3], [4, 5, 6]])\n    b = np.array([[9, 8, 7], [6, 5, 4]])\n    assert np.array_equal(candidate(a, b), np.array([[1, 2, 3], [4, 5, 6], [9, 8, 7], [6, 5, 4]]))\n"}
{"task_id": 21887754, "prompt": "import numpy as np\n\n\ndef f_21887754(a, b):\n    \"\"\"numpy concatenate two arrays `a` and `b` along the first axis\n    \"\"\"\n", "entry_point": "f_21887754", "canonical_solution": "    return np.array((a, b))\n", "test": "def check(candidate):\n\n    a = np.array([[1, 5, 9], [2, 6, 10]])\n    b = np.array([[3, 7, 11], [4, 8, 12]])\n    assert np.array_equal(candidate(a, b), np.array([[[1, 5, 9], [2, 6, 10]], [[3, 7, 11], [4, 8, 12]]]))\n"}
{"task_id": 2805231, "prompt": "import socket\n\n\ndef f_2805231():\n    \"\"\"fetch address information for host 'google.com' ion port 80\n    \"\"\"\n", "entry_point": "f_2805231", "canonical_solution": "    return socket.getaddrinfo(\"google.com\", 80)\n", "test": "def check(candidate):\n\n    res = candidate()\n    assert all([(add[4][1] == 80) for add in res])\n"}
{"task_id": 17552997, "prompt": "import pandas as pd\n\n\ndef f_17552997(df):\n    \"\"\"add a column 'day' with value 'sat' to dataframe `df`\n    \"\"\"\n", "entry_point": "f_17552997", "canonical_solution": "    return df.xs(\"sat\", level=\"day\", drop_level=False)\n", "test": "def check(candidate):\n\n    df = pd.DataFrame({'year':[2008,2008,2008,2008,2009,2009,2009,2009], \n                      'flavour':['strawberry','strawberry','banana','banana',\n                      'strawberry','strawberry','banana','banana'],\n                      'day':['sat','sun','sat','sun','sat','sun','sat','sun'],\n                      'sales':[10,12,22,23,11,13,23,24]})\n    df = df.set_index(['year','flavour','day'])\n    assert candidate(df).to_dict() == {'sales': {(2008, 'strawberry', 'sat'): 10, (2008, 'banana', 'sat'): 22, (2009, 'strawberry', 'sat'): 11, (2009, 'banana', 'sat'): 23}}\n"}
{"task_id": 13598363, "prompt": "from flask import Flask\n\n\ndef f_13598363():\n    \"\"\"Flask set folder 'wherever' as the default template folder\n    \"\"\"\n", "entry_point": "f_13598363", "canonical_solution": "    return Flask(\"test\", template_folder=\"wherever\")\n", "test": "def check(candidate):\n\n    __name__ == \"test\"\n    assert candidate().template_folder == \"wherever\"\n"}
{"task_id": 3398589, "prompt": "def f_3398589(c2):\n    \"\"\"Sorting a list of lists `c2`, each by the third and second row\n    \"\"\"\n", "entry_point": "f_3398589", "canonical_solution": "    c2.sort(key=lambda row: (row[2], row[1]))\n\n    return c2\n", "test": "def check(candidate):\n\n    c2 = [[14, 25, 46], [1, 22, 53], [7, 8, 9]]\n    candidate(c2)\n    assert c2[0] == [7,8,9]\n"}
{"task_id": 10960463, "prompt": "import matplotlib\n\n\ndef f_10960463():\n    \"\"\"set font `Arial` to display non-ascii characters in matplotlib\n    \"\"\"\n", "entry_point": "f_10960463", "canonical_solution": "    return matplotlib.rc(\"font\", **{\"sans-serif\": \"Arial\", \"family\": \"sans-serif\"})\n", "test": "def check(candidate):\n\n    try:\n        candidate()\n    except:\n        assert False\n"}
{"task_id": 20576618, "prompt": "import pandas as pd\n\n\ndef f_20576618(df):\n    \"\"\"Convert  DateTime column 'date' of pandas dataframe 'df' to ordinal\n    \"\"\"\n", "entry_point": "f_20576618", "canonical_solution": "    return df[\"date\"].apply(lambda x: x.toordinal())\n", "test": "def check(candidate):\n\n    df = pd.DataFrame(\n        {\n            \"group\": [\"A\", \"A\", \"A\", \"A\", \"A\"],\n            \"date\": pd.to_datetime([\"2020-01-02\", \"2020-01-13\", \"2020-02-01\", \"2020-02-23\", \"2020-03-05\"]),\n            \"value\": [10, 20, 16, 31, 56],\n        })    \n    data_series = candidate(df).tolist()\n    assert data_series[1] == 737437\n"}
{"task_id": 31793195, "prompt": "import pandas as pd\nimport numpy as np\n\n\ndef f_31793195(df):\n    \"\"\"Get the integer location of a key `bob` in a pandas data frame `df`\n    \"\"\"\n", "entry_point": "f_31793195", "canonical_solution": "    return df.index.get_loc(\"bob\")\n", "test": "def check(candidate):\n\n    df = pd.DataFrame(data=np.asarray([[1,2,3],[4,5,6],[7,8,9]]), index=['alice', 'bob', 'charlie'])\n    index = candidate(df)\n    assert index == 1\n"}
{"task_id": 10487278, "prompt": "def f_10487278(my_list):\n    \"\"\"Insert item `12` to a list `my_list`\n    \"\"\"\n", "entry_point": "f_10487278", "canonical_solution": "    my_list.append(12)\n\n    return my_list\n", "test": "def check(candidate):\n\n    assert candidate([1,2]) == [1, 2, 12] \n"}
{"task_id": 10155684, "prompt": "def f_10155684(myList):\n    \"\"\"add an entry 'wuggah' at the beginning of list `myList`\n    \"\"\"\n", "entry_point": "f_10155684", "canonical_solution": "    myList.insert(0, \"wuggah\")\n\n    return myList\n", "test": "def check(candidate):\n\n    assert candidate([1,2]) == ['wuggah', 1, 2]\n"}
{"task_id": 3519125, "prompt": "def f_3519125(hex_str):\n    \"\"\"convert a hex-string representation `hex_str` to actual bytes\n    \"\"\"\n", "entry_point": "f_3519125", "canonical_solution": "    return bytes.fromhex(hex_str.replace(\"\\\\x\", \"\"))\n", "test": "def check(candidate):\n\n    assert candidate(\"\\\\xF3\\\\xBE\\\\x80\\\\x80\") == b'\\xf3\\xbe\\x80\\x80'\n"}
{"task_id": 40144769, "prompt": "import pandas as pd\n\n\ndef f_40144769(df):\n    \"\"\"select the last column of dataframe `df`\n    \"\"\"\n", "entry_point": "f_40144769", "canonical_solution": "    return df[df.columns[-1]]\n", "test": "def check(candidate):\n\n    df = pd.DataFrame([[1, 2, 3],[4,5,6]], columns=[\"a\", \"b\", \"c\"])\n    assert candidate(df).tolist() == [3,6]\n"}
{"task_id": 30787901, "prompt": "import pandas as pd\n\n\ndef f_30787901(df):\n    \"\"\"get the first value from dataframe `df` where column 'Letters' is equal to 'C'\n    \"\"\"\n", "entry_point": "f_30787901", "canonical_solution": "    return df.loc[df[\"Letters\"] == \"C\", \"Letters\"].values[0]\n", "test": "def check(candidate):\n\n    df = pd.DataFrame([[\"a\", 1],[\"C\", 6]], columns=[\"Letters\", \"Numbers\"])\n    assert candidate(df) == 'C'\n"}
{"task_id": 18730044, "prompt": "import numpy as np\n\n\ndef f_18730044():\n    \"\"\"converting two lists `[1, 2, 3]` and `[4, 5, 6]` into a matrix\n    \"\"\"\n", "entry_point": "f_18730044", "canonical_solution": "    return np.column_stack(([1, 2, 3], [4, 5, 6]))\n", "test": "def check(candidate):\n\n    assert np.all(candidate() == np.array([[1, 4], [2, 5], [3, 6]]))\n"}
{"task_id": 402504, "prompt": "def f_402504(variable_name):\n    \"\"\"get the type of variable `variable_name`\n    \"\"\"\n", "entry_point": "f_402504", "canonical_solution": "    return type(variable_name)\n", "test": "def check(candidate):\n\n    assert candidate(\"hello\") is str\n"}
{"task_id": 2300756, "prompt": "import itertools\n\n\ndef f_2300756(g):\n    \"\"\"get the 5th item of a generator `g`\n    \"\"\"\n", "entry_point": "f_2300756", "canonical_solution": "    return next(itertools.islice(g, 5, 5 + 1))\n", "test": "def check(candidate):\n\n    test = [1, 2, 3, 4, 5, 6, 7]\n    assert(candidate(test) == 6)\n"}
{"task_id": 20056548, "prompt": "def f_20056548(word):\n    \"\"\"return a string `word` with string format\n    \"\"\"\n", "entry_point": "f_20056548", "canonical_solution": "    return '\"{}\"'.format(word)\n", "test": "def check(candidate):\n\n    assert candidate('Some Random Word') == '\"Some Random Word\"'\n"}
{"task_id": 8546245, "prompt": "def f_8546245(list):\n    \"\"\"join a list of strings `list` using a space ' '\n    \"\"\"\n", "entry_point": "f_8546245", "canonical_solution": "    return \"\"\" \"\"\".join(list)\n", "test": "def check(candidate):\n\n    test = ['hello', 'good', 'morning']\n    assert candidate(test) == \"hello good morning\"\n"}
{"task_id": 2276416, "prompt": "def f_2276416():\n    \"\"\"create list `y` containing two empty lists\n    \"\"\"\n", "entry_point": "f_2276416", "canonical_solution": "    y = [[] for n in range(2)]\n\n    return y\n", "test": "def check(candidate):\n\n    assert(candidate() == [[], []])\n"}
{"task_id": 3925614, "prompt": "def f_3925614(filename):\n    \"\"\"read a file `filename` into a list `data`\n    \"\"\"\n", "entry_point": "f_3925614", "canonical_solution": "    data = [line.strip() for line in open(filename, \"r\")]\n\n    return data\n", "test": "def check(candidate):\n\n    file1 = open(\"myfile.txt\", \"w\")\n    L = [\"This is Delhi \\n\", \"This is Paris \\n\", \"This is London \\n\"]\n    file1.writelines(L)\n    file1.close()\n    assert candidate('myfile.txt') == ['This is Delhi', 'This is Paris', 'This is London']\n"}
{"task_id": 22187233, "prompt": "def f_22187233():\n    \"\"\"delete all characters \"i\" in string \"it is icy\"\n    \"\"\"\n", "entry_point": "f_22187233", "canonical_solution": "    return \"\"\"it is icy\"\"\".replace(\"i\", \"\")\n", "test": "def check(candidate):\n\n    assert candidate() == 't s cy'\n"}
{"task_id": 13413590, "prompt": "import numpy as np\nimport pandas as pd\n\n\ndef f_13413590(df):\n    \"\"\"Drop rows of pandas dataframe `df` having NaN in column at index \"1\"\n    \"\"\"\n", "entry_point": "f_13413590", "canonical_solution": "    return df.dropna(subset=[1])\n", "test": "def check(candidate):\n\n    data = {0:[3.0, 4.0, 2.0], 1:[2.0, 3.0, np.nan], 2:[np.nan, 3.0, np.nan]}\n    df = pd.DataFrame(data)\n    d = {0:[3.0, 4.0], 1:[2.0, 3.0], 2:[np.nan, 3.0]}\n    res = pd.DataFrame(d)\n    assert candidate(df).equals(res)\n"}
{"task_id": 598398, "prompt": "import numpy as np\nimport pandas as pd\n\n\ndef f_598398(myList):\n    \"\"\"get elements from list `myList`, that have a field `n` value 30\n    \"\"\"\n", "entry_point": "f_598398", "canonical_solution": "    return [x for x in myList if x.n == 30]\n", "test": "def check(candidate):\n\n    class Data: \n        def __init__(self, a, n): \n            self.a = a\n            self.n = n\n    \n    myList = [Data(i, 10*(i%4)) for i in range(20)]\n    assert candidate(myList) == [myList[i] for i in [3, 7, 11, 15, 19]]\n"}
{"task_id": 10351772, "prompt": "def f_10351772(intstringlist):\n    \"\"\"converting list of strings `intstringlist` to list of integer `nums`\n    \"\"\"\n", "entry_point": "f_10351772", "canonical_solution": "    nums = [int(x) for x in intstringlist]\n\n    return nums\n", "test": "def check(candidate):\n\n    assert candidate(['1', '2', '3', '4', '5']) == [1, 2, 3, 4, 5]\n"}
{"task_id": 493386, "prompt": "import sys\n\n\ndef f_493386():\n    \"\"\"print \".\" without newline\n    \"\"\"\n", "entry_point": "f_493386", "canonical_solution": "    return sys.stdout.write(\".\")\n", "test": "def check(candidate):\n\n    assert candidate() == 1\n"}
{"task_id": 6569528, "prompt": "def f_6569528():\n    \"\"\"round off the float that is the product of `2.52 * 100` and convert it to an int\n    \"\"\"\n", "entry_point": "f_6569528", "canonical_solution": "    return int(round(2.52 * 100))\n", "test": "def check(candidate):\n\n    assert candidate() == 252\n"}
{"task_id": 3964681, "prompt": "import os\nfrom unittest.mock import Mock\n\n\ndef f_3964681():\n    \"\"\"Find all files in directory \"/mydir\" with extension \".txt\"\n    \"\"\"\n", "entry_point": "f_3964681", "canonical_solution": "    return [\n        file\n        for (root, dirs, files) in os.walk(\"/mydir\")\n        for file in files\n        if file.endswith(\".txt\")\n    ]\n", "test": "def check(candidate):\n\n    name = '/mydir'\n    samples = [(name, [], ['abc.txt', 'f.csv'])]\n    os.walk = Mock(return_value = samples)\n    assert candidate() == ['abc.txt']\n"}
{"task_id": 13368659, "prompt": "def f_13368659():\n    \"\"\"loop through the IP address range \"192.168.x.x\"\n    \"\"\"\n", "entry_point": "f_13368659", "canonical_solution": "    return [\"192.168.%d.%d\" % (i, j) for i in range(256) for j in range(256)]\n", "test": "def check(candidate):\n\n    addrs = candidate()\n    assert len(addrs) == 256*256\n    assert addrs == [f'192.168.{i}.{j}' for i in range(256) for j in range(256)]\n"}
{"task_id": 4065737, "prompt": "def f_4065737(x):\n    \"\"\"Sum the corresponding decimal values for binary values of each boolean element in list `x`\n    \"\"\"\n", "entry_point": "f_4065737", "canonical_solution": "    return sum(1 << i for i, b in enumerate(x) if b)\n", "test": "def check(candidate):\n\n    assert candidate([1,2,3]) == 7\n"}
{"task_id": 8691311, "prompt": "def f_8691311(line1, line2, line3, target):\n    \"\"\"write multiple strings `line1`, `line2` and `line3` in one line in a file `target`\n    \"\"\"\n", "entry_point": "f_8691311", "canonical_solution": "    target.write(\"%r\\n%r\\n%r\\n\" % (line1, line2, line3))\n\n    return\n", "test": "def check(candidate):\n\n    file_name = 'abc.txt'\n    lines = ['fgh', 'ijk', 'mnop']\n    f = open(file_name, 'a')\n    candidate(lines[0], lines[1], lines[2], f)\n    f.close()\n    with open(file_name, 'r') as f:\n        f_lines = f.readlines()\n        for i in range (0, len(lines)):\n            assert lines[i] in f_lines[i]\n"}
{"task_id": 10632111, "prompt": "def f_10632111(data):\n    \"\"\"Convert list of lists `data` into a flat list\n    \"\"\"\n", "entry_point": "f_10632111", "canonical_solution": "    return [y for x in data for y in (x if isinstance(x, list) else [x])]\n", "test": "def check(candidate):\n\n    data = [[1, 2], [3]]\n    assert candidate(data) == [1, 2, 3]\n"}
{"task_id": 15392730, "prompt": "def f_15392730():\n    \"\"\"Print new line character as `\\n` in a string `foo\\nbar`\n    \"\"\"\n", "entry_point": "f_15392730", "canonical_solution": "    return \"foo\\nbar\".encode(\"unicode_escape\")\n", "test": "def check(candidate):\n\n    assert candidate() == b'foo\\\\nbar'\n"}
{"task_id": 1010961, "prompt": "def f_1010961(s):\n    \"\"\"remove last comma character ',' in string `s`\n    \"\"\"\n", "entry_point": "f_1010961", "canonical_solution": "    return \"\"\"\"\"\".join(s.rsplit(\",\", 1))\n", "test": "def check(candidate):\n\n    assert candidate('abc, def, klm') == 'abc, def klm'\n"}
{"task_id": 23855976, "prompt": "import numpy as np\n\n\ndef f_23855976(x):\n    \"\"\"get an array of the mean of each two consecutive values in numpy array `x`\n    \"\"\"\n", "entry_point": "f_23855976", "canonical_solution": "    return x[:-1] + (x[1:] - x[:-1]) / 2\n", "test": "def check(candidate):\n\n    x = np.array([ 1230.,  1230.,  1227.,  1235.,  1217.,  1153.,  1170.])\n    xm = np.array([1230. , 1228.5, 1231. , 1226. , 1185. , 1161.5])\n    assert np.array_equal(candidate(x), xm)\n"}
{"task_id": 6375343, "prompt": "import numpy\nimport codecs\nimport numpy as np\n\n\ndef f_6375343():\n    \"\"\"load data containing `utf-8` from file `new.txt` into numpy array `arr`\n    \"\"\"\n", "entry_point": "f_6375343", "canonical_solution": "    arr = numpy.fromiter(codecs.open(\"new.txt\", encoding=\"utf-8\"), dtype=\"<U2\")\n\n    return arr\n", "test": "def check(candidate):\n\n    with open ('new.txt', 'a', encoding='utf-8') as f:\n        f.write('\u091f')\n        f.write('\u091c')\n    arr = candidate()\n    assert arr[0] == '\u091f\u091c'\n"}
{"task_id": 1547733, "prompt": "def f_1547733(l):\n    \"\"\"Sort a list of dictionary `l` based on key `time` in descending order\n    \"\"\"\n", "entry_point": "f_1547733", "canonical_solution": "    l = sorted(l, key=lambda a: a[\"time\"], reverse=True)\n\n    return l\n", "test": "def check(candidate):\n\n    l = [ {'time':33}, {'time':11}, {'time':66} ]\n    assert candidate(l) == [{'time':66}, {'time':33}, {'time':11}]\n"}
{"task_id": 37080612, "prompt": "import pandas as pd\n\n\ndef f_37080612(df):\n    \"\"\"get rows of dataframe `df` that match regex '(Hel|Just)'\n    \"\"\"\n", "entry_point": "f_37080612", "canonical_solution": "    return df.loc[df[0].str.contains(\"(Hel|Just)\")]\n", "test": "def check(candidate):\n\n    df = pd.DataFrame([['Hello', 'World'], ['Just', 'Wanted'], ['To', 'Say'], ['I\\'m', 'Tired']])\n    df1 = candidate(df)\n    assert df1[0][0] == 'Hello'\n    assert df1[0][1] == 'Just'\n"}
{"task_id": 14716342, "prompt": "import re\n\n\ndef f_14716342(your_string):\n    \"\"\"find the string in `your_string` between two special characters \"[\" and \"]\"\n    \"\"\"\n", "entry_point": "f_14716342", "canonical_solution": "    return re.search(\"\\\\[(.*)\\\\]\", your_string).group(1)\n", "test": "def check(candidate):\n\n    assert candidate('[uranus]') == 'uranus'\n"}
{"task_id": 18684076, "prompt": "import pandas\n\n\ndef f_18684076():\n    \"\"\"create a list of date string in 'yyyymmdd' format with Python Pandas from '20130226' to '20130302'\n    \"\"\"\n", "entry_point": "f_18684076", "canonical_solution": "    return [d.strftime(\"%Y%m%d\") for d in pandas.date_range(\"20130226\", \"20130302\")]\n", "test": "def check(candidate):\n\n    assert candidate() == ['20130226', '20130227', '20130228', '20130301', '20130302']\n"}
{"task_id": 1666700, "prompt": "def f_1666700():\n    \"\"\"count number of times string 'brown' occurred in string 'The big brown fox is brown'\n    \"\"\"\n", "entry_point": "f_1666700", "canonical_solution": "    return \"\"\"The big brown fox is brown\"\"\".count(\"brown\")\n", "test": "def check(candidate):\n\n    assert candidate() == 2\n"}
{"task_id": 18979111, "prompt": "import json\n\n\ndef f_18979111(request_body):\n    \"\"\"decode json string `request_body` to python dict\n    \"\"\"\n", "entry_point": "f_18979111", "canonical_solution": "    return json.loads(request_body)\n", "test": "def check(candidate):\n\n    x = \"\"\"{\n    \"Name\": \"Jennifer Smith\",\n    \"Contact Number\": 7867567898,\n    \"Email\": \"jen123@gmail.com\",\n    \"Hobbies\":[\"Reading\", \"Sketching\", \"Horse Riding\"]\n    }\"\"\"\n    assert candidate(x) == {'Hobbies': ['Reading', 'Sketching', 'Horse Riding'], 'Name': 'Jennifer Smith', 'Email': 'jen123@gmail.com', 'Contact Number': 7867567898}\n"}
{"task_id": 743806, "prompt": "def f_743806(line):\n    \"\"\"Split string `line` into a list by whitespace\n    \"\"\"\n", "entry_point": "f_743806", "canonical_solution": "    return line.split()\n", "test": "def check(candidate):\n\n    assert candidate('The  quick brown  fox') == ['The', 'quick', 'brown', 'fox']\n"}
{"task_id": 35044115, "prompt": "import re\n\n\ndef f_35044115(s):\n    \"\"\"replace dot characters  '.' associated with ascii letters in list `s` with space ' '\n    \"\"\"\n", "entry_point": "f_35044115", "canonical_solution": "    return [re.sub(\"(?<!\\\\d)\\\\.(?!\\\\d)\", \" \", i) for i in s]\n", "test": "def check(candidate):\n\n    assert candidate('h.j.k') == ['h', ' ', 'j', ' ', 'k']\n"}
{"task_id": 38388799, "prompt": "def f_38388799(list_of_strings):\n    \"\"\"sort list `list_of_strings` based on second index of each string `s`\n    \"\"\"\n", "entry_point": "f_38388799", "canonical_solution": "    return sorted(list_of_strings, key=lambda s: s.split(\",\")[1])\n", "test": "def check(candidate):\n\n    assert candidate(['parrot, medicine', 'abott, kangaroo', 'sriracha, coriander', 'phone, bottle']) == ['phone, bottle', 'sriracha, coriander', 'abott, kangaroo', 'parrot, medicine']\n"}
{"task_id": 37004138, "prompt": "def f_37004138(lst):\n    \"\"\"get all the elements except strings from the list 'lst'.\n    \"\"\"\n", "entry_point": "f_37004138", "canonical_solution": "    return [element for element in lst if not isinstance(element, str)]\n", "test": "def check(candidate):\n\n    lst = [1, \"hello\", \"string\", 2, 4.46]\n    assert candidate(lst) == [1, 2, 4.46]\n"}
{"task_id": 72899, "prompt": "import operator\n\n\ndef f_72899(list_of_dicts):\n    \"\"\"sort a list of dictionaries `list_of_dicts` by `age` values of the dictionary\n    \"\"\"\n", "entry_point": "f_72899", "canonical_solution": "    list_of_dicts.sort(key=operator.itemgetter(\"age\"))\n\n    return list_of_dicts\n", "test": "def check(candidate):\n\n    list_to_be_sorted = [{'name': 'Homer', 'age': 39}, {'name': 'Bart', 'age': 10}]\n    assert candidate(list_to_be_sorted) == [{'name': 'Bart', 'age': 10}, {'name': 'Homer', 'age': 39}]\n"}
{"task_id": 29881993, "prompt": "def f_29881993(trans):\n    \"\"\"join together with \",\" elements inside a list indexed with 'category' within a dictionary `trans`\n    \"\"\"\n", "entry_point": "f_29881993", "canonical_solution": "    return \"\"\",\"\"\".join(trans[\"category\"])\n", "test": "def check(candidate):\n\n    trans = {'category':[\"hello\", \"world\",\"test\"], 'dummy_key':[\"dummy_val\"]}\n    assert candidate(trans) == \"hello,world,test\"\n"}
{"task_id": 34158494, "prompt": "def f_34158494():\n    \"\"\"concatenate array of strings `['A', 'B', 'C', 'D']` into a string\n    \"\"\"\n", "entry_point": "f_34158494", "canonical_solution": "    return \"\"\"\"\"\".join([\"A\", \"B\", \"C\", \"D\"])\n", "test": "def check(candidate):\n\n    assert candidate() == 'ABCD'\n"}
{"task_id": 12666897, "prompt": "def f_12666897(sents):\n    \"\"\"Remove all strings from a list a strings `sents` where the values starts with `@$\\t` or `#`\n    \"\"\"\n", "entry_point": "f_12666897", "canonical_solution": "    return [x for x in sents if not x.startswith(\"@$\\t\") and not x.startswith(\"#\")]\n", "test": "def check(candidate):\n\n    sents = [\"@$\tabcd\", \"#453923\", \"abcd\", \"hello\", \"1\"]\n    assert candidate(sents) == [\"abcd\", \"hello\", \"1\"]\n"}
{"task_id": 5944630, "prompt": "def f_5944630(list):\n    \"\"\"sort a list of dictionary `list` first by key `points` and then by `time`\n    \"\"\"\n", "entry_point": "f_5944630", "canonical_solution": "    list.sort(key=lambda item: (item[\"points\"], item[\"time\"]))\n\n    return list\n", "test": "def check(candidate):\n\n    list = [\n        {'name':'JOHN', 'points' : 30, 'time' : '0:02:2'},\n        {'name':'KARL','points':50,'time': '0:03:00'},\n        {'name':'TEST','points':20,'time': '0:03:00'}\n    ]\n    assert candidate(list) == [\n        {'name':'TEST','points':20,'time': '0:03:00'}, \n        {'name':'JOHN', 'points' : 30, 'time' : '0:02:2'},\n        {'name':'KARL','points':50,'time': '0:03:00'}\n    ]\n"}
{"task_id": 7852855, "prompt": "import time\nimport datetime\n\n\ndef f_7852855():\n    \"\"\"convert datetime object `(1970, 1, 1)` to seconds\n    \"\"\"\n", "entry_point": "f_7852855", "canonical_solution": "    return datetime.datetime(1970, 1, 1).second\n", "test": "def check(candidate):\n\n    assert candidate() == 0\n"}
{"task_id": 2763750, "prompt": "import re\n\n\ndef f_2763750():\n    \"\"\"insert `_suff` before the file extension in `long.file.name.jpg` or replace `_a` with `suff` if it precedes the extension.\n    \"\"\"\n", "entry_point": "f_2763750", "canonical_solution": "    return re.sub(\"(\\\\_a)?\\\\.([^\\\\.]*)$\", \"_suff.\\\\2\", \"long.file.name.jpg\")\n", "test": "def check(candidate):\n\n    assert candidate() == 'long.file.name_suff.jpg'\n"}
{"task_id": 6420361, "prompt": "import imp\nfrom unittest.mock import Mock\n\n\ndef f_6420361(module):\n    \"\"\"reload a module `module`\n    \"\"\"\n", "entry_point": "f_6420361", "canonical_solution": "    imp.reload(module)\n\n    return\n", "test": "def check(candidate):\n\n    imp.reload = Mock()\n    try:\n        candidate('ads')\n        assert True\n    except:\n        assert False\n"}
{"task_id": 19546911, "prompt": "import struct\n\n\ndef f_19546911(number):\n    \"\"\"Convert integer `number` into an unassigned integer\n    \"\"\"\n", "entry_point": "f_19546911", "canonical_solution": "    return struct.unpack(\"H\", struct.pack(\"h\", number))\n", "test": "def check(candidate):\n\n    assert candidate(3) == (3,)\n"}
{"task_id": 9746522, "prompt": "def f_9746522(numlist):\n    \"\"\"convert int values in list `numlist` to float\n    \"\"\"\n", "entry_point": "f_9746522", "canonical_solution": "    numlist = [float(x) for x in numlist]\n\n    return numlist\n", "test": "def check(candidate):\n\n    assert candidate([3, 4]) == [3.0, 4.0]\n"}
{"task_id": 20107570, "prompt": "import pandas as pd\n\n\ndef f_20107570(df, filename):\n    \"\"\"write dataframe `df`, excluding index, to a csv file `filename`\n    \"\"\"\n", "entry_point": "f_20107570", "canonical_solution": "    df.to_csv(filename, index=False)\n\n    return\n", "test": "def check(candidate):\n\n    file_name = 'a.csv'\n    df = pd.DataFrame([1, 2, 3], columns = ['Vals'])\n    candidate(df, file_name)\n    with open (file_name, 'r') as f:\n        lines = f.readlines()\n    assert len(lines) == 4\n"}
{"task_id": 8740353, "prompt": "import json\n\n\ndef f_8740353(unescaped):\n    \"\"\"convert a urllib unquoted string `unescaped` to a json data `json_data`\n    \"\"\"\n", "entry_point": "f_8740353", "canonical_solution": "    json_data = json.loads(unescaped)\n\n    return json_data\n", "test": "def check(candidate):\n\n    x = \"\"\"{\n    \"Name\": \"Jennifer Smith\",\n    \"Contact Number\": 7867567898,\n    \"Email\": \"jen123@gmail.com\",\n    \"Hobbies\":[\"Reading\", \"Sketching\", \"Horse Riding\"]\n    }\"\"\"\n    assert candidate(x) == {'Hobbies': ['Reading', 'Sketching', 'Horse Riding'], 'Name': 'Jennifer Smith', 'Email': 'jen123@gmail.com', 'Contact Number': 7867567898}\n"}
{"task_id": 5891453, "prompt": "def f_5891453():\n    \"\"\"Create a list containing all ascii characters as its elements\n    \"\"\"\n", "entry_point": "f_5891453", "canonical_solution": "    return [chr(i) for i in range(127)]\n", "test": "def check(candidate):\n\n    chars = candidate()\n    assert len(chars) == 127\n    assert chars == [chr(i) for i in range(127)]\n"}
{"task_id": 18367007, "prompt": "import struct\n\n\ndef f_18367007(newFileBytes, newFile):\n    \"\"\"write `newFileBytes` to a binary file `newFile`\n    \"\"\"\n", "entry_point": "f_18367007", "canonical_solution": "    newFile.write(struct.pack(\"5B\", *newFileBytes))\n\n    return\n", "test": "def check(candidate):\n\n    newFileBytes = [123, 3, 123, 100, 99]\n    file_name = 'f.txt'\n    newFile = open(file_name, 'wb')\n    candidate(newFileBytes, newFile)\n    newFile.close()\n    with open (file_name, 'rb') as f:\n        lines = f.readlines()\n        assert lines == [b'{\u0003{dc']\n"}
{"task_id": 21805490, "prompt": "import re\n\n\ndef f_21805490(string):\n    \"\"\"python regex - check for a capital letter with a following lowercase in string `string`\n    \"\"\"\n", "entry_point": "f_21805490", "canonical_solution": "    return re.sub(\"^[A-Z0-9]*(?![a-z])\", \"\", string)\n", "test": "def check(candidate):\n\n    assert candidate(\"AASKH317298DIUANFProgramming is fun\") == \"Programming is fun\"\n"}
{"task_id": 16125229, "prompt": "def f_16125229(dict):\n    \"\"\"get the last key of dictionary `dict`\n    \"\"\"\n", "entry_point": "f_16125229", "canonical_solution": "    return list(dict.keys())[-1]\n", "test": "def check(candidate):\n\n    assert candidate({'t': 1, 'r': 2}) == 'r'\n"}
{"task_id": 6159900, "prompt": "def f_6159900():\n    \"\"\"write line \"Hello\" to file `somefile.txt`\n    \"\"\"\n", "entry_point": "f_6159900", "canonical_solution": "\n    with open(\"somefile.txt\", \"a\") as the_file:\n        the_file.write(\"Hello\\n\")\n\n    return\n", "test": "def check(candidate):\n\n    file_name = 'somefile.txt'\n    candidate()\n    with open (file_name, 'r') as f:\n        lines = f.readlines()\n        assert lines[0] == 'Hello\\n'\n"}
{"task_id": 19527279, "prompt": "def f_19527279(s):\n    \"\"\"convert unicode string `s` to ascii\n    \"\"\"\n", "entry_point": "f_19527279", "canonical_solution": "    return s.encode(\"iso-8859-15\")\n", "test": "def check(candidate):\n\n    assert candidate('table') == b'table'\n"}
{"task_id": 356483, "prompt": "import re\n\n\ndef f_356483(text):\n    \"\"\"Find all numbers and dots from a string `text` using regex\n    \"\"\"\n", "entry_point": "f_356483", "canonical_solution": "    return re.findall(\"Test([0-9.]*[0-9]+)\", text)\n", "test": "def check(candidate):\n\n    assert candidate('Test0.9ssd') == ['0.9']\n"}
{"task_id": 38081866, "prompt": "import os\nfrom unittest.mock import Mock\n\n\ndef f_38081866():\n    \"\"\"execute script 'script.ps1' using 'powershell.exe' shell\n    \"\"\"\n", "entry_point": "f_38081866", "canonical_solution": "    return os.system(\"powershell.exe\", \"script.ps1\")\n", "test": "def check(candidate):\n\n    os.system = Mock()\n    try:\n        candidate()\n        assert True\n    except:\n        assert False\n"}
{"task_id": 7349646, "prompt": "def f_7349646(b):\n    \"\"\"Sort a list of tuples `b` by third item in the tuple\n    \"\"\"\n", "entry_point": "f_7349646", "canonical_solution": "    b.sort(key=lambda x: x[2])\n\n    return b\n", "test": "def check(candidate):\n\n    b = [(1,2,3), (4,5,6), (7,8,0)]\n    assert candidate(b) == [(7,8,0), (1,2,3), (4,5,6)]\n"}
{"task_id": 10607688, "prompt": "import datetime\n\n\ndef f_10607688():\n    \"\"\"create a datetime with the current date & time\n    \"\"\"\n", "entry_point": "f_10607688", "canonical_solution": "    return datetime.datetime.now()\n", "test": "def check(candidate):\n\n    y = candidate()\n    assert y.year >= 2022\n"}
{"task_id": 30843103, "prompt": "def f_30843103(lst):\n    \"\"\"get the index of an integer `1` from a list `lst` if the list also contains boolean items\n    \"\"\"\n", "entry_point": "f_30843103", "canonical_solution": "    return next(i for i, x in enumerate(lst) if not isinstance(x, bool) and x == 1)\n", "test": "def check(candidate):\n\n    lst = [True, False, 1, 3]\n    assert candidate(lst) == 2\n"}
{"task_id": 4918425, "prompt": "def f_4918425(a):\n    \"\"\"subtract 13 from every number in a list `a`\n    \"\"\"\n", "entry_point": "f_4918425", "canonical_solution": "    a[:] = [(x - 13) for x in a]\n\n    return a\n", "test": "def check(candidate):\n\n    a = [14, 15]\n    candidate(a)\n    assert a == [1, 2]\n"}
{"task_id": 17794266, "prompt": "import numpy as np\n\n\ndef f_17794266(x):\n    \"\"\"get the highest element in absolute value in a numpy matrix `x`\n    \"\"\"\n", "entry_point": "f_17794266", "canonical_solution": "    return max(x.min(), x.max(), key=abs)\n", "test": "def check(candidate):\n\n    x = np.matrix([[1, 1], [2, -3]])\n    assert candidate(x) == -3\n"}
{"task_id": 30551576, "prompt": "import re\n\n\ndef f_30551576(s):\n    \"\"\"Get all urls within text `s`\n    \"\"\"\n", "entry_point": "f_30551576", "canonical_solution": "    return re.findall(r'\"(http.*?)\"', s, re.MULTILINE | re.DOTALL)\n", "test": "def check(candidate):\n\n    s = (\n      '     [irrelevant javascript code here]'\n      '     sources:[{file:\"http://url.com/folder1/v.html\",label:\"label1\"},'\n      '     {file:\"http://url.com/folder2/v.html\",label:\"label2\"},'\n      '     {file:\"http://url.com/folder3/v.html\",label:\"label3\"}],'\n      '     [irrelevant javascript code here]'\n    )\n    assert candidate(s) == ['http://url.com/folder1/v.html', 'http://url.com/folder2/v.html', 'http://url.com/folder3/v.html']\n"}
{"task_id": 113534, "prompt": "def f_113534(mystring):\n    \"\"\"split a string `mystring` considering the spaces ' '\n    \"\"\"\n", "entry_point": "f_113534", "canonical_solution": "    return mystring.replace(\" \", \"! !\").split(\"!\")\n", "test": "def check(candidate):\n\n    assert candidate(\"This is the string I want to split\") ==       ['This',' ','is',' ','the',' ','string',' ','I',' ','want',' ','to',' ','split']\n"}
{"task_id": 5838735, "prompt": "def f_5838735(path):\n    \"\"\"open file `path` with mode 'r'\n    \"\"\"\n", "entry_point": "f_5838735", "canonical_solution": "    return open(path, \"r\")\n", "test": "def check(candidate):\n\n    with open('tmp.txt', 'w') as fw: fw.write('hello world!')\n    f = candidate('tmp.txt')\n    assert f.name == 'tmp.txt'\n    assert f.mode == 'r'\n"}
{"task_id": 36003967, "prompt": "def f_36003967(data):\n    \"\"\"sum elements at the same index in list `data`\n    \"\"\"\n", "entry_point": "f_36003967", "canonical_solution": "    return [[sum(item) for item in zip(*items)] for items in zip(*data)]\n", "test": "def check(candidate):\n\n    data = [[[5, 10, 30, 24, 100], [1, 9, 25, 49, 81]],\n            [[15, 10, 10, 16, 70], [10, 1, 25, 11, 19]],\n            [[34, 20, 10, 10, 30], [9, 20, 25, 30, 80]]]\n    assert candidate(data) == [[54, 40, 50, 50, 200], [20, 30, 75, 90, 180]]\n"}
{"task_id": 7635237, "prompt": "import numpy as np\n\n\ndef f_7635237(a):\n    \"\"\"add a new axis to array `a`\n    \"\"\"\n", "entry_point": "f_7635237", "canonical_solution": "    return a[:, (np.newaxis)]\n", "test": "def check(candidate):\n\n    data = np.array([[[5, 10, 30, 24, 100], [1, 9, 25, 49, 81]],\n            [[15, 10, 10, 16, 70], [10, 1, 25, 11, 19]],\n            [[34, 20, 10, 10, 30], [9, 20, 25, 30, 80]]])\n    assert candidate(data).tolist() == [[[[  5,  10,  30,  24, 100],\n         [  1,   9,  25,  49,  81]]],\n       [[[ 15,  10,  10,  16,  70],\n         [ 10,   1,  25,  11,  19]]],\n       [[[ 34,  20,  10,  10,  30],\n         [  9,  20,  25,  30,  80]]]]\n"}
