{"code":"def classify_text(text):\n    categories = [\"sports\", \"finance\", \"health\", \"technology\"]\n\n    rules = {\n        \"sports\": (\"football\", \"basketball\", \"soccer\"),\n        \"finance\": (\"stock\", \"financial planning\", \"investment\"),\n        \"health\": (\"diet\", \"healthcare\", \"exercise\"),\n        \"technology\": (\"AI\", \"machine learning\", \"data science\"),\n    }\n\n    for category in categories:\n        for rule in rules[category]:\n            if rule in text:\n                return category\n\n    return \"other\"\n","entry_point":"classify_text","input":"\"I love playing basketball\",","output":"\"sports\""}
{"code":"def classify_text(text):\n    categories = [\"sports\", \"finance\", \"health\", \"technology\"]\n\n    rules = {\n        \"sports\": (\"football\", \"basketball\", \"soccer\"),\n        \"finance\": (\"stock\", \"financial planning\", \"investment\"),\n        \"health\": (\"diet\", \"healthcare\", \"exercise\"),\n        \"technology\": (\"AI\", \"machine learning\", \"data science\"),\n    }\n\n    for category in categories:\n        for rule in rules[category]:\n            if rule in text:\n                return category\n\n    return \"other\"\n","entry_point":"classify_text","input":"\"I am interested in financial planning\",","output":"\"finance\""}
{"code":"def classify_text(text):\n    categories = [\"sports\", \"finance\", \"health\", \"technology\"]\n\n    rules = {\n        \"sports\": (\"football\", \"basketball\", \"soccer\"),\n        \"finance\": (\"stock\", \"financial planning\", \"investment\"),\n        \"health\": (\"diet\", \"healthcare\", \"exercise\"),\n        \"technology\": (\"AI\", \"machine learning\", \"data science\"),\n    }\n\n    for category in categories:\n        for rule in rules[category]:\n            if rule in text:\n                return category\n\n    return \"other\"\n","entry_point":"classify_text","input":"\"I follow the latest AI trends\",","output":"\"technology\""}
{"code":"def create_frozen_set(s):\n    return frozenset(s)\n","entry_point":"create_frozen_set","input":"{1, 2, 3}","output":"frozenset({1, 2, 3})"}
{"code":"def create_frozen_set(s):\n    return frozenset(s)\n","entry_point":"create_frozen_set","input":"{'a', 'b', 'c'}","output":"frozenset({'a', 'b', 'c'})"}
{"code":"def create_frozen_set(s):\n    return frozenset(s)\n","entry_point":"create_frozen_set","input":"set(","output":"frozenset()"}
{"code":"def bitwise_xor(num1, num2):\n    return num1 ^ num2\n","entry_point":"bitwise_xor","input":"5, 3","output":"6"}
{"code":"def bitwise_xor(num1, num2):\n    return num1 ^ num2\n","entry_point":"bitwise_xor","input":"8, 12","output":"4"}
{"code":"def bitwise_xor(num1, num2):\n    return num1 ^ num2\n","entry_point":"bitwise_xor","input":"0, 0","output":"0"}
{"code":"def sort_instruments(instruments):\n    sorted_instruments = sorted(instruments, reverse=True)\n    return sorted_instruments\n","entry_point":"sort_instruments","input":"['guitar', 'piano', 'violin']","output":"['violin', 'piano', 'guitar']"}
{"code":"def sort_instruments(instruments):\n    sorted_instruments = sorted(instruments, reverse=True)\n    return sorted_instruments\n","entry_point":"sort_instruments","input":"['flute', 'drums', 'trumpet', 'saxophone']","output":"['trumpet', 'saxophone', 'flute', 'drums']"}
{"code":"def sort_instruments(instruments):\n    sorted_instruments = sorted(instruments, reverse=True)\n    return sorted_instruments\n","entry_point":"sort_instruments","input":"['cello', 'bass', 'clarinet', 'oboe']","output":"['oboe', 'clarinet', 'cello', 'bass']"}
{"code":"import json\n\n\ndef convert_json_to_list(json_string):\n    try:\n        json_data = json.loads(json_string)\n        if isinstance(json_data, list):\n            return json_data\n        return [json_data]\n\n    except ValueError as e:\n        raise ValueError(\"Invalid JSON string.\") from e\n","entry_point":"convert_json_to_list","input":"'[{\"name\": \"Alice\", \"age\": 25}, {\"name\": \"Bob\", \"age\": 30}]'","output":"[{'name': 'Alice', 'age': 25}, {'name': 'Bob', 'age': 30}]"}
{"code":"import json\n\n\ndef convert_json_to_list(json_string):\n    try:\n        json_data = json.loads(json_string)\n        if isinstance(json_data, list):\n            return json_data\n        return [json_data]\n\n    except ValueError as e:\n        raise ValueError(\"Invalid JSON string.\") from e\n","entry_point":"convert_json_to_list","input":"'{\"name\": \"Alice\", \"age\": 25}'","output":"[{'name': 'Alice', 'age': 25}]"}
{"code":"import json\n\n\ndef convert_json_to_list(json_string):\n    try:\n        json_data = json.loads(json_string)\n        if isinstance(json_data, list):\n            return json_data\n        return [json_data]\n\n    except ValueError as e:\n        raise ValueError(\"Invalid JSON string.\") from e\n","entry_point":"convert_json_to_list","input":"'{\"name\": \"Alice\"}'","output":"[{'name': 'Alice'}]"}
{"code":"def is_divisible_and_sum_divisible(n):\n    if not isinstance(n, int) or n < 0:\n        return False\n\n    if n % 5 != 0:\n        return False\n\n    digit_sum = sum(int(digit) for digit in str(n))\n\n    if digit_sum % 3 == 0:\n        return True\n    else:\n        return False\n","entry_point":"is_divisible_and_sum_divisible","input":"15","output":"True"}
{"code":"def is_divisible_and_sum_divisible(n):\n    if not isinstance(n, int) or n < 0:\n        return False\n\n    if n % 5 != 0:\n        return False\n\n    digit_sum = sum(int(digit) for digit in str(n))\n\n    if digit_sum % 3 == 0:\n        return True\n    else:\n        return False\n","entry_point":"is_divisible_and_sum_divisible","input":"20","output":"False"}
{"code":"def is_divisible_and_sum_divisible(n):\n    if not isinstance(n, int) or n < 0:\n        return False\n\n    if n % 5 != 0:\n        return False\n\n    digit_sum = sum(int(digit) for digit in str(n))\n\n    if digit_sum % 3 == 0:\n        return True\n    else:\n        return False\n","entry_point":"is_divisible_and_sum_divisible","input":"-10","output":"False"}
{"code":"def discrete_logarithm(n, base):\n    power = 1\n    result = 0\n    while base**power <= n:\n        power += 1\n    return power - 1\n","entry_point":"discrete_logarithm","input":"10, 2","output":"3"}
{"code":"def discrete_logarithm(n, base):\n    power = 1\n    result = 0\n    while base**power <= n:\n        power += 1\n    return power - 1\n","entry_point":"discrete_logarithm","input":"81, 3","output":"4"}
{"code":"def discrete_logarithm(n, base):\n    power = 1\n    result = 0\n    while base**power <= n:\n        power += 1\n    return power - 1\n","entry_point":"discrete_logarithm","input":"1000, 10","output":"3"}
{"code":"import json\nimport pprint\n\n\ndef pretty_print_json(json_str):\n    try:\n        json_data = json.loads(json_str)\n        pprint.pprint(json_data, indent=4)\n    except ValueError:\n        raise ValueError(\"Invalid JSON string\")\n","entry_point":"pretty_print_json","input":"'{\"name\": \"Alice\", \"age\": 30}'","output":"None"}
{"code":"import json\nimport pprint\n\n\ndef pretty_print_json(json_str):\n    try:\n        json_data = json.loads(json_str)\n        pprint.pprint(json_data, indent=4)\n    except ValueError:\n        raise ValueError(\"Invalid JSON string\")\n","entry_point":"pretty_print_json","input":"'{\"name\": \"Bob\", \"age\": 25}'","output":"None"}
{"code":"import json\nimport pprint\n\n\ndef pretty_print_json(json_str):\n    try:\n        json_data = json.loads(json_str)\n        pprint.pprint(json_data, indent=4)\n    except ValueError:\n        raise ValueError(\"Invalid JSON string\")\n","entry_point":"pretty_print_json","input":"'{\"name\": \"Charlie\", \"age\": 35}'","output":"None"}
{"code":"def has_consecutive_repeating_chars(s):\n    for i in range(len(s) - 1):\n        if s[i] == s[i + 1]:\n            return True\n\n    return False\n","entry_point":"has_consecutive_repeating_chars","input":"\"hello\"","output":"True"}
{"code":"def has_consecutive_repeating_chars(s):\n    for i in range(len(s) - 1):\n        if s[i] == s[i + 1]:\n            return True\n\n    return False\n","entry_point":"has_consecutive_repeating_chars","input":"\"world\"","output":"False"}
{"code":"def has_consecutive_repeating_chars(s):\n    for i in range(len(s) - 1):\n        if s[i] == s[i + 1]:\n            return True\n\n    return False\n","entry_point":"has_consecutive_repeating_chars","input":"\"mississippi\"","output":"True"}
{"code":"def replace_placeholders(template, values):\n    for key, value in values.items():\n        template = template.replace(\"{{\" + key + \"}}\", str(value))\n    return template\n","entry_point":"replace_placeholders","input":"\"Hello, {{name}}!\", {\"name\": \"Alice\"}","output":"\"Hello, Alice!\""}
{"code":"def replace_placeholders(template, values):\n    for key, value in values.items():\n        template = template.replace(\"{{\" + key + \"}}\", str(value))\n    return template\n","entry_point":"replace_placeholders","input":"\"My favorite color is {{color}}.\", {\"color\": \"blue\"}","output":"\"My favorite color is blue.\""}
{"code":"def replace_placeholders(template, values):\n    for key, value in values.items():\n        template = template.replace(\"{{\" + key + \"}}\", str(value))\n    return template\n","entry_point":"replace_placeholders","input":"\"I have {{number}} cats.\", {\"number\": 3}","output":"\"I have 3 cats.\""}
{"code":"def are_all_characters_unique(string):\n    string_chars = set()\n    for char in string:\n        if char in string_chars:\n            return False\n        string_chars.add(char)\n\n    return True\n","entry_point":"are_all_characters_unique","input":"\"hello\"","output":"False"}
{"code":"def are_all_characters_unique(string):\n    string_chars = set()\n    for char in string:\n        if char in string_chars:\n            return False\n        string_chars.add(char)\n\n    return True\n","entry_point":"are_all_characters_unique","input":"\"world\"","output":"True"}
{"code":"def are_all_characters_unique(string):\n    string_chars = set()\n    for char in string:\n        if char in string_chars:\n            return False\n        string_chars.add(char)\n\n    return True\n","entry_point":"are_all_characters_unique","input":"\"apple\"","output":"False"}
{"code":"from datetime import datetime, timedelta\n\n\ndef add_days(date_string, days):\n    date_format = \"%Y-%m-%d\"\n    original_date = datetime.strptime(date_string, date_format)\n    new_date = original_date + timedelta(days=days)\n    return new_date.strftime(date_format)\n","entry_point":"add_days","input":"\"2022-01-01\", 5","output":"\"2022-01-06\""}
{"code":"from datetime import datetime, timedelta\n\n\ndef add_days(date_string, days):\n    date_format = \"%Y-%m-%d\"\n    original_date = datetime.strptime(date_string, date_format)\n    new_date = original_date + timedelta(days=days)\n    return new_date.strftime(date_format)\n","entry_point":"add_days","input":"\"2023-12-31\", 1","output":"\"2024-01-01\""}
{"code":"from datetime import datetime, timedelta\n\n\ndef add_days(date_string, days):\n    date_format = \"%Y-%m-%d\"\n    original_date = datetime.strptime(date_string, date_format)\n    new_date = original_date + timedelta(days=days)\n    return new_date.strftime(date_format)\n","entry_point":"add_days","input":"\"2021-02-28\", 1","output":"\"2021-03-01\""}
{"code":"def eliminate_whitespace(text):\n    if len(text) > 10000:\n        return \"Error: Text is too long\"\n\n    words = text.split()\n\n    result = \" \".join(words)\n\n    return result\n","entry_point":"eliminate_whitespace","input":"\"  Hello  \"","output":"\"Hello\""}
{"code":"def eliminate_whitespace(text):\n    if len(text) > 10000:\n        return \"Error: Text is too long\"\n\n    words = text.split()\n\n    result = \" \".join(words)\n\n    return result\n","entry_point":"eliminate_whitespace","input":"\"  Hello  World  \"","output":"\"Hello World\""}
{"code":"def eliminate_whitespace(text):\n    if len(text) > 10000:\n        return \"Error: Text is too long\"\n\n    words = text.split()\n\n    result = \" \".join(words)\n\n    return result\n","entry_point":"eliminate_whitespace","input":"\"This is a long text with extra spaces\"","output":"\"This is a long text with extra spaces\""}
{"code":"import string\n\n\ndef normalize_text(text):\n    text = text.lower()\n\n    text = text.translate(str.maketrans(\"\", \"\", string.punctuation))\n\n    text = \"\".join([i for i in text if not i.isdigit()])\n\n    text = text.strip()\n\n    text = \" \".join(text.split())\n\n    return text\n","entry_point":"normalize_text","input":"\"Hello, World!\"","output":"\"hello world\""}
{"code":"import string\n\n\ndef normalize_text(text):\n    text = text.lower()\n\n    text = text.translate(str.maketrans(\"\", \"\", string.punctuation))\n\n    text = \"\".join([i for i in text if not i.isdigit()])\n\n    text = text.strip()\n\n    text = \" \".join(text.split())\n\n    return text\n","entry_point":"normalize_text","input":"\"1234abc5678\"","output":"\"abc\""}
{"code":"import string\n\n\ndef normalize_text(text):\n    text = text.lower()\n\n    text = text.translate(str.maketrans(\"\", \"\", string.punctuation))\n\n    text = \"\".join([i for i in text if not i.isdigit()])\n\n    text = text.strip()\n\n    text = \" \".join(text.split())\n\n    return text\n","entry_point":"normalize_text","input":"\"  This is a test.  \"","output":"\"this is a test\""}
{"code":"import re\n\n\ndef match_words(text, word1, word2):\n    pattern = rf\"\\b({re.escape(word1)}|{re.escape(word2)})\\b\"\n    return bool(re.search(pattern, text))\n","entry_point":"match_words","input":"\"Hello, world!\", \"Hello\", \"world\"","output":"True"}
{"code":"import re\n\n\ndef match_words(text, word1, word2):\n    pattern = rf\"\\b({re.escape(word1)}|{re.escape(word2)})\\b\"\n    return bool(re.search(pattern, text))\n","entry_point":"match_words","input":"\"Python is great\", \"Java\", \"C++\"","output":"False"}
{"code":"import re\n\n\ndef match_words(text, word1, word2):\n    pattern = rf\"\\b({re.escape(word1)}|{re.escape(word2)})\\b\"\n    return bool(re.search(pattern, text))\n","entry_point":"match_words","input":"\"I love pizza\", \"love\", \"hate\"","output":"True"}
{"code":"def layer_sum(array):\n    layer_sums = []\n    for layer in array:\n        layer_sums.append(sum(layer))\n    return layer_sums\n","entry_point":"layer_sum","input":"[[1, 2], [3, 4]]","output":"[3, 7]"}
{"code":"def layer_sum(array):\n    layer_sums = []\n    for layer in array:\n        layer_sums.append(sum(layer))\n    return layer_sums\n","entry_point":"layer_sum","input":"[[5, 5, 5], [1, 1, 1], [2, 2, 2]]","output":"[15, 3, 6]"}
{"code":"def layer_sum(array):\n    layer_sums = []\n    for layer in array:\n        layer_sums.append(sum(layer))\n    return layer_sums\n","entry_point":"layer_sum","input":"[[10, 20, 30], [40, 50, 60]]","output":"[60, 150]"}
{"code":"def parse_vim_settings(comment: str) -> dict:\n    settings = {}\n    parts = comment.split(\": \")[1].split(\" \")\n    for part in parts:\n        key, value = part.split(\"=\")\n        if value.isdigit():\n            settings[key] = value\n        elif value.lower() == \"true\":\n            settings[key] = True\n        elif value.lower() == \"false\":\n            settings[key] = False\n    return settings\n","entry_point":"parse_vim_settings","input":"\"# Vim settings: tabstop=4 expandtab=true shiftwidth=4 softtabstop=4\"","output":"{'tabstop': '4', 'expandtab': True, 'shiftwidth': '4', 'softtabstop': '4'}"}
{"code":"def parse_vim_settings(comment: str) -> dict:\n    settings = {}\n    parts = comment.split(\": \")[1].split(\" \")\n    for part in parts:\n        key, value = part.split(\"=\")\n        if value.isdigit():\n            settings[key] = value\n        elif value.lower() == \"true\":\n            settings[key] = True\n        elif value.lower() == \"false\":\n            settings[key] = False\n    return settings\n","entry_point":"parse_vim_settings","input":"\"# Vim settings: tabstop=2 expandtab=false shiftwidth=2 softtabstop=2\"","output":"{'tabstop': '2', 'expandtab': False, 'shiftwidth': '2', 'softtabstop': '2'}"}
{"code":"def parse_vim_settings(comment: str) -> dict:\n    settings = {}\n    parts = comment.split(\": \")[1].split(\" \")\n    for part in parts:\n        key, value = part.split(\"=\")\n        if value.isdigit():\n            settings[key] = value\n        elif value.lower() == \"true\":\n            settings[key] = True\n        elif value.lower() == \"false\":\n            settings[key] = False\n    return settings\n","entry_point":"parse_vim_settings","input":"\"# Vim settings: tabstop=8 expandtab=true shiftwidth=2 softtabstop=2\"","output":"{'tabstop': '8', 'expandtab': True, 'shiftwidth': '2', 'softtabstop': '2'}"}
{"code":"def disassemble_sentence(sentence):\n    return sentence.split()\n","entry_point":"disassemble_sentence","input":"\"I love programming\"","output":"[\"I\", \"love\", \"programming\"]"}
{"code":"def disassemble_sentence(sentence):\n    return sentence.split()\n","entry_point":"disassemble_sentence","input":"\"The quick brown fox jumps over the lazy dog\"","output":"[\"The\", \"quick\", \"brown\", \"fox\", \"jumps\", \"over\", \"the\", \"lazy\", \"dog\"]"}
{"code":"def disassemble_sentence(sentence):\n    return sentence.split()\n","entry_point":"disassemble_sentence","input":"\"Hello, world!\"","output":"[\"Hello,\", \"world!\"]"}
{"code":"def find_digits_count(num):\n    if num < 10:\n        return 1\n    else:\n        return 1 + find_digits_count(num \/\/ 10)\n","entry_point":"find_digits_count","input":"123","output":"3"}
{"code":"def find_digits_count(num):\n    if num < 10:\n        return 1\n    else:\n        return 1 + find_digits_count(num \/\/ 10)\n","entry_point":"find_digits_count","input":"0","output":"1"}
{"code":"def find_digits_count(num):\n    if num < 10:\n        return 1\n    else:\n        return 1 + find_digits_count(num \/\/ 10)\n","entry_point":"find_digits_count","input":"987654321","output":"9"}
{"code":"def reverse_combine_sort(list1, list2):\n    reversed_list1 = list1[::-1]\n    reversed_list2 = list2[::-1]\n    combined_list = reversed_list1 + reversed_list2\n    sorted_list = sorted(combined_list)\n    return sorted_list\n","entry_point":"reverse_combine_sort","input":"[1, 2, 3], [4, 5, 6]","output":"[1, 2, 3, 4, 5, 6]"}
{"code":"def reverse_combine_sort(list1, list2):\n    reversed_list1 = list1[::-1]\n    reversed_list2 = list2[::-1]\n    combined_list = reversed_list1 + reversed_list2\n    sorted_list = sorted(combined_list)\n    return sorted_list\n","entry_point":"reverse_combine_sort","input":"[9, 8, 7], [6, 5, 4]","output":"[4, 5, 6, 7, 8, 9]"}
{"code":"def reverse_combine_sort(list1, list2):\n    reversed_list1 = list1[::-1]\n    reversed_list2 = list2[::-1]\n    combined_list = reversed_list1 + reversed_list2\n    sorted_list = sorted(combined_list)\n    return sorted_list\n","entry_point":"reverse_combine_sort","input":"[3, 1], [2, 4]","output":"[1, 2, 3, 4]"}
{"code":"def replace_all_words(input_string, old_word, new_word):\n    return input_string.replace(old_word, new_word)\n","entry_point":"replace_all_words","input":"\"hello world\", \"world\", \"universe\"","output":"\"hello universe\""}
{"code":"def replace_all_words(input_string, old_word, new_word):\n    return input_string.replace(old_word, new_word)\n","entry_point":"replace_all_words","input":"\"apple banana apple\", \"apple\", \"orange\"","output":"\"orange banana orange\""}
{"code":"def replace_all_words(input_string, old_word, new_word):\n    return input_string.replace(old_word, new_word)\n","entry_point":"replace_all_words","input":"\"programming is fun\", \"is\", \"can be\"","output":"\"programming can be fun\""}
{"code":"def square_complex_number(z):\n    return z**2\n","entry_point":"square_complex_number","input":"2+3j","output":"-5+12j"}
{"code":"def square_complex_number(z):\n    return z**2\n","entry_point":"square_complex_number","input":"1j","output":"-1"}
{"code":"def square_complex_number(z):\n    return z**2\n","entry_point":"square_complex_number","input":"4-2j","output":"12-16j"}
{"code":"def get_nested_dictionary_value(dictionary):\n    try:\n        return dictionary[\"name\"]\n    except KeyError:\n        return None\n","entry_point":"get_nested_dictionary_value","input":"{\"name\": \"Alice\"}","output":"\"Alice\""}
{"code":"def get_nested_dictionary_value(dictionary):\n    try:\n        return dictionary[\"name\"]\n    except KeyError:\n        return None\n","entry_point":"get_nested_dictionary_value","input":"{\"age\": 25, \"city\": \"New York\"}","output":"None"}
{"code":"def get_nested_dictionary_value(dictionary):\n    try:\n        return dictionary[\"name\"]\n    except KeyError:\n        return None\n","entry_point":"get_nested_dictionary_value","input":"{\"name\": {\"first\": \"Bob\", \"last\": \"Smith\"}}","output":"{\"first\": \"Bob\", \"last\": \"Smith\"}"}
{"code":"def struct_to_dict(struct):\n    if isinstance(struct, dict):\n        return {key: struct_to_dict(value) for key, value in struct.items()}\n    elif isinstance(struct, (list, tuple)):\n        return [struct_to_dict(item) for item in struct]\n    elif hasattr(struct, \"__dict__\"):\n        return struct_to_dict(struct.__dict__)\n    else:\n        return struct\n","entry_point":"struct_to_dict","input":"{'a': 1, 'b': [2, 3]},","output":"{'a': 1, 'b': [2, 3]}"}
{"code":"def struct_to_dict(struct):\n    if isinstance(struct, dict):\n        return {key: struct_to_dict(value) for key, value in struct.items()}\n    elif isinstance(struct, (list, tuple)):\n        return [struct_to_dict(item) for item in struct]\n    elif hasattr(struct, \"__dict__\"):\n        return struct_to_dict(struct.__dict__)\n    else:\n        return struct\n","entry_point":"struct_to_dict","input":"[{'x': 1}, {'y': 2}]","output":"[{'x': 1}, {'y': 2}]"}
{"code":"def struct_to_dict(struct):\n    if isinstance(struct, dict):\n        return {key: struct_to_dict(value) for key, value in struct.items()}\n    elif isinstance(struct, (list, tuple)):\n        return [struct_to_dict(item) for item in struct]\n    elif hasattr(struct, \"__dict__\"):\n        return struct_to_dict(struct.__dict__)\n    else:\n        return struct\n","entry_point":"struct_to_dict","input":"(1, 2, 3","output":"[1, 2, 3]"}
{"code":"def findClosestPalindrome(num):\n    num_str = str(num)\n    length = len(num_str)\n    solution = None\n    for i in range(10**length):\n        temp_str = str(i).zfill(length)\n        if temp_str == temp_str[::-1]:\n            diff = abs(i - num)\n            if solution is None or diff < solution[1]:\n                solution = (i, diff)\n    return solution[0]\n","entry_point":"findClosestPalindrome","input":"123","output":"121"}
{"code":"def findClosestPalindrome(num):\n    num_str = str(num)\n    length = len(num_str)\n    solution = None\n    for i in range(10**length):\n        temp_str = str(i).zfill(length)\n        if temp_str == temp_str[::-1]:\n            diff = abs(i - num)\n            if solution is None or diff < solution[1]:\n                solution = (i, diff)\n    return solution[0]\n","entry_point":"findClosestPalindrome","input":"456","output":"454"}
{"code":"def findClosestPalindrome(num):\n    num_str = str(num)\n    length = len(num_str)\n    solution = None\n    for i in range(10**length):\n        temp_str = str(i).zfill(length)\n        if temp_str == temp_str[::-1]:\n            diff = abs(i - num)\n            if solution is None or diff < solution[1]:\n                solution = (i, diff)\n    return solution[0]\n","entry_point":"findClosestPalindrome","input":"789","output":"787"}
{"code":"def sqrt_calc(num):\n    return num**0.5\n","entry_point":"sqrt_calc","input":"4","output":"2"}
{"code":"def sqrt_calc(num):\n    return num**0.5\n","entry_point":"sqrt_calc","input":"9","output":"3"}
{"code":"def sqrt_calc(num):\n    return num**0.5\n","entry_point":"sqrt_calc","input":"16","output":"4"}
{"code":"def matrix_properties(matrix):\n    rows = len(matrix)\n    cols = len(matrix[0]) if matrix else 0\n    diagonal_sum = sum(matrix[i][i] for i in range(min(rows, cols)))\n    is_square = rows == cols\n    return rows, cols, diagonal_sum, is_square\n","entry_point":"matrix_properties","input":"[[1, 2, 3], [4, 5, 6], [7, 8, 9]]","output":"(3, 3, 15, True)"}
{"code":"def matrix_properties(matrix):\n    rows = len(matrix)\n    cols = len(matrix[0]) if matrix else 0\n    diagonal_sum = sum(matrix[i][i] for i in range(min(rows, cols)))\n    is_square = rows == cols\n    return rows, cols, diagonal_sum, is_square\n","entry_point":"matrix_properties","input":"[[1, 2], [3, 4], [5, 6]]","output":"(3, 2, 5, False)"}
{"code":"def matrix_properties(matrix):\n    rows = len(matrix)\n    cols = len(matrix[0]) if matrix else 0\n    diagonal_sum = sum(matrix[i][i] for i in range(min(rows, cols)))\n    is_square = rows == cols\n    return rows, cols, diagonal_sum, is_square\n","entry_point":"matrix_properties","input":"[[1, 0, 0], [0, 2, 0], [0, 0, 3]]","output":"(3, 3, 6, True)"}
{"code":"import base64\n\n\ndef string_to_base64(string):\n    string_bytes = string.encode(\"ascii\")\n    base64_bytes = base64.b64encode(string_bytes)\n    base64_string = base64_bytes.decode(\"ascii\")\n    return base64_string\n","entry_point":"string_to_base64","input":"\"Hello, World!\"","output":"\"SGVsbG8sIFdvcmxkIQ==\""}
{"code":"import base64\n\n\ndef string_to_base64(string):\n    string_bytes = string.encode(\"ascii\")\n    base64_bytes = base64.b64encode(string_bytes)\n    base64_string = base64_bytes.decode(\"ascii\")\n    return base64_string\n","entry_point":"string_to_base64","input":"\"12345\"","output":"\"MTIzNDU=\""}
{"code":"import base64\n\n\ndef string_to_base64(string):\n    string_bytes = string.encode(\"ascii\")\n    base64_bytes = base64.b64encode(string_bytes)\n    base64_string = base64_bytes.decode(\"ascii\")\n    return base64_string\n","entry_point":"string_to_base64","input":"\"Python is fun!\"","output":"\"UHl0aG9uIGlzIGZ1biE=\""}
{"code":"def clean_and_lower_string(s):\n    return \"\".join(c.lower() for c in s if c.isalpha())\n","entry_point":"clean_and_lower_string","input":"\"Hello World!\"","output":"\"helloworld\""}
{"code":"def clean_and_lower_string(s):\n    return \"\".join(c.lower() for c in s if c.isalpha())\n","entry_point":"clean_and_lower_string","input":"\"123abc456\"","output":"\"abc\""}
{"code":"def clean_and_lower_string(s):\n    return \"\".join(c.lower() for c in s if c.isalpha())\n","entry_point":"clean_and_lower_string","input":"\"This is a Test\"","output":"\"thisisatest\""}
{"code":"def find_minimum(lst):\n    return min(lst)\n","entry_point":"find_minimum","input":"[3, 5, 1, 9]","output":"1"}
{"code":"def find_minimum(lst):\n    return min(lst)\n","entry_point":"find_minimum","input":"[10, 20, 30, 40]","output":"10"}
{"code":"def find_minimum(lst):\n    return min(lst)\n","entry_point":"find_minimum","input":"[-5, -2, 0, 3, 1]","output":"-5"}
{"code":"import json\n\n\ndef validate_key_value(json_data, key, value):\n    if isinstance(json_data, str):\n        json_data = json.loads(json_data)\n\n    return key not in json_data or json_data[key] != value\n","entry_point":"validate_key_value","input":"'{\"name\": \"Alice\", \"age\": 30}', 'city', 'New York'","output":"True"}
{"code":"import json\n\n\ndef validate_key_value(json_data, key, value):\n    if isinstance(json_data, str):\n        json_data = json.loads(json_data)\n\n    return key not in json_data or json_data[key] != value\n","entry_point":"validate_key_value","input":"'{\"name\": \"Bob\", \"age\": 25}', 'name', 'Alice'","output":"True"}
{"code":"import json\n\n\ndef validate_key_value(json_data, key, value):\n    if isinstance(json_data, str):\n        json_data = json.loads(json_data)\n\n    return key not in json_data or json_data[key] != value\n","entry_point":"validate_key_value","input":"'{\"name\": \"Charlie\", \"age\": 35}', 'name', 'Charlie'","output":"False"}
{"code":"def _make_button_table(buttons, num_columns):\n    table = \"<table>\"\n    for i in range(0, len(buttons), num_columns):\n        table += \"<tr>\"\n        for j in range(num_columns):\n            if i + j < len(buttons):\n                table += f\"<td><button onclick='buttonClicked({i + j})'>{buttons[i + j]}<\/button><\/td>\"\n        table += \"<\/tr>\"\n    table += \"<\/table>\"\n    return table\n","entry_point":"_make_button_table","input":"[\"A\", \"B\", \"C\", \"D\"], 2","output":"\"<table><tr><td><button onclick='buttonClicked(0)'>A<\/button><\/td><td><button onclick='buttonClicked(1)'>B<\/button><\/td><\/tr><tr><td><button onclick='buttonClicked(2)'>C<\/button><\/td><td><button onclick='buttonClicked(3)'>D<\/button><\/td><\/tr><\/table>\""}
{"code":"def _make_button_table(buttons, num_columns):\n    table = \"<table>\"\n    for i in range(0, len(buttons), num_columns):\n        table += \"<tr>\"\n        for j in range(num_columns):\n            if i + j < len(buttons):\n                table += f\"<td><button onclick='buttonClicked({i + j})'>{buttons[i + j]}<\/button><\/td>\"\n        table += \"<\/tr>\"\n    table += \"<\/table>\"\n    return table\n","entry_point":"_make_button_table","input":"[\"X\", \"Y\", \"Z\"], 3","output":"\"<table><tr><td><button onclick='buttonClicked(0)'>X<\/button><\/td><td><button onclick='buttonClicked(1)'>Y<\/button><\/td><td><button onclick='buttonClicked(2)'>Z<\/button><\/td><\/tr><\/table>\""}
{"code":"def check_alphabet_order(s):\n    s = s.lower()\n    expected_char = \"a\"\n    for char in s:\n        if char == expected_char:\n            expected_char = chr(ord(expected_char) + 1)\n\n        if expected_char == \"z\":\n            return True\n\n    return False\n","entry_point":"check_alphabet_order","input":"\"abcdefghijklmnopqrstuvwxyz\"","output":"True"}
{"code":"def check_alphabet_order(s):\n    s = s.lower()\n    expected_char = \"a\"\n    for char in s:\n        if char == expected_char:\n            expected_char = chr(ord(expected_char) + 1)\n\n        if expected_char == \"z\":\n            return True\n\n    return False\n","entry_point":"check_alphabet_order","input":"\"abcde\"","output":"False"}
{"code":"def check_alphabet_order(s):\n    s = s.lower()\n    expected_char = \"a\"\n    for char in s:\n        if char == expected_char:\n            expected_char = chr(ord(expected_char) + 1)\n\n        if expected_char == \"z\":\n            return True\n\n    return False\n","entry_point":"check_alphabet_order","input":"\"abdefghijklmnopqrstuvwxyz\"","output":"False"}
{"code":"def larger_num(a, b):\n    if a > b:\n        return a\n    else:\n        return b\n","entry_point":"larger_num","input":"5, 3","output":"5"}
{"code":"def larger_num(a, b):\n    if a > b:\n        return a\n    else:\n        return b\n","entry_point":"larger_num","input":"10, 10","output":"10"}
{"code":"def larger_num(a, b):\n    if a > b:\n        return a\n    else:\n        return b\n","entry_point":"larger_num","input":"-2, -5","output":"-2"}
{"code":"def sum_numeric_substrings(ts: str) -> int:\n    from string import ascii_lowercase\n\n    res = set()\n    cur = []\n    for c in ts:\n        if c in ascii_lowercase:\n            if cur:\n                s = \"\".join(cur)\n                res.add(int(s))\n                cur = []\n        else:\n            cur.append(c)\n    if cur:\n        s = \"\".join(cur)\n        res.add(int(s))\n    return sum(res)\n","entry_point":"sum_numeric_substrings","input":"\"abc123def456\"","output":"579"}
{"code":"def sum_numeric_substrings(ts: str) -> int:\n    from string import ascii_lowercase\n\n    res = set()\n    cur = []\n    for c in ts:\n        if c in ascii_lowercase:\n            if cur:\n                s = \"\".join(cur)\n                res.add(int(s))\n                cur = []\n        else:\n            cur.append(c)\n    if cur:\n        s = \"\".join(cur)\n        res.add(int(s))\n    return sum(res)\n","entry_point":"sum_numeric_substrings","input":"\"1a2b3c4d5e\"","output":"15"}
{"code":"def sum_numeric_substrings(ts: str) -> int:\n    from string import ascii_lowercase\n\n    res = set()\n    cur = []\n    for c in ts:\n        if c in ascii_lowercase:\n            if cur:\n                s = \"\".join(cur)\n                res.add(int(s))\n                cur = []\n        else:\n            cur.append(c)\n    if cur:\n        s = \"\".join(cur)\n        res.add(int(s))\n    return sum(res)\n","entry_point":"sum_numeric_substrings","input":"\"abc\"","output":"0"}
{"code":"def convert_last_to_upper(words):\n    return [word[:-1] + word[-1].upper() for word in words]\n","entry_point":"convert_last_to_upper","input":"['apple', 'banana', 'orange']","output":"['applE', 'bananA', 'orangE']"}
{"code":"def convert_last_to_upper(words):\n    return [word[:-1] + word[-1].upper() for word in words]\n","entry_point":"convert_last_to_upper","input":"['cat', 'dog', 'bird']","output":"['caT', 'doG', 'birD']"}
{"code":"def convert_last_to_upper(words):\n    return [word[:-1] + word[-1].upper() for word in words]\n","entry_point":"convert_last_to_upper","input":"['book', 'pen', 'paper']","output":"['booK', 'peN', 'papeR']"}
{"code":"def validate_and_add(arr):\n    if all(isinstance(i, (int, float)) for i in arr):\n        return sum(arr)\n    else:\n        return \"Array contains non-numerical values.\"\n","entry_point":"validate_and_add","input":"[1, 2, 3]","output":"6"}
{"code":"def validate_and_add(arr):\n    if all(isinstance(i, (int, float)) for i in arr):\n        return sum(arr)\n    else:\n        return \"Array contains non-numerical values.\"\n","entry_point":"validate_and_add","input":"[4, 5, 6, 7]","output":"22"}
{"code":"def validate_and_add(arr):\n    if all(isinstance(i, (int, float)) for i in arr):\n        return sum(arr)\n    else:\n        return \"Array contains non-numerical values.\"\n","entry_point":"validate_and_add","input":"[1, 2, 'a', 3]","output":"\"Array contains non-numerical values.\""}
{"code":"def minAbsSumPair(arr, n):\n    arr = sorted(arr)\n    l = 0\n    r = n - 1\n    min_sum = 99999999999\n    min_l = l\n    min_r = n\n    while l < r:\n        sum = arr[l] + arr[r]\n        if abs(sum) < abs(min_sum):\n            min_sum = sum\n            min_l = l\n            min_r = r\n        if sum < 0:\n            l += 1\n        else:\n            r -= 1\n    return (arr[min_l], arr[min_r])\n","entry_point":"minAbsSumPair","input":"[1, 3, -5, 7, 8, 20, -40, 6], 8","output":"(-5, 6)"}
{"code":"def minAbsSumPair(arr, n):\n    arr = sorted(arr)\n    l = 0\n    r = n - 1\n    min_sum = 99999999999\n    min_l = l\n    min_r = n\n    while l < r:\n        sum = arr[l] + arr[r]\n        if abs(sum) < abs(min_sum):\n            min_sum = sum\n            min_l = l\n            min_r = r\n        if sum < 0:\n            l += 1\n        else:\n            r -= 1\n    return (arr[min_l], arr[min_r])\n","entry_point":"minAbsSumPair","input":"[10, 20, 30, 40, 50, 60, 70, 80, 90], 9","output":"(10, 20)"}
{"code":"def minAbsSumPair(arr, n):\n    arr = sorted(arr)\n    l = 0\n    r = n - 1\n    min_sum = 99999999999\n    min_l = l\n    min_r = n\n    while l < r:\n        sum = arr[l] + arr[r]\n        if abs(sum) < abs(min_sum):\n            min_sum = sum\n            min_l = l\n            min_r = r\n        if sum < 0:\n            l += 1\n        else:\n            r -= 1\n    return (arr[min_l], arr[min_r])\n","entry_point":"minAbsSumPair","input":"[-10, -5, -3, 0, 5, 7, 9, 12], 8","output":"(-5, 5)"}
{"code":"def evaluate_parentheses(p):\n    stack = []\n    for char in p:\n\n        if char == \"(\":\n            stack.append(char)\n\n        elif char == \")\":\n            stack.pop()\n\n    if len(stack) == 0:\n        return True\n    else:\n        return False\n","entry_point":"evaluate_parentheses","input":"\"(((","output":"True"}
{"code":"def evaluate_parentheses(p):\n    stack = []\n    for char in p:\n\n        if char == \"(\":\n            stack.append(char)\n\n        elif char == \")\":\n            stack.pop()\n\n    if len(stack) == 0:\n        return True\n    else:\n        return False\n","entry_point":"evaluate_parentheses","input":"\"(","output":"True"}
{"code":"def evaluate_parentheses(p):\n    stack = []\n    for char in p:\n\n        if char == \"(\":\n            stack.append(char)\n\n        elif char == \")\":\n            stack.pop()\n\n    if len(stack) == 0:\n        return True\n    else:\n        return False\n","entry_point":"evaluate_parentheses","input":"\"((","output":"False"}
{"code":"def calculate_election_results(votes):\n    results = {}\n    total_votes = 0\n    for vote in votes:\n        total_votes += vote[1]\n    if total_votes < 100:\n        print(\"Error: Total number of votes must be at least 100.\")\n        return None\n    for vote in votes:\n        candidate_name = vote[0]\n        number_of_votes = vote[1]\n        percentage = (number_of_votes \/ total_votes) * 100\n        percentage = round(percentage, 2)\n        results[candidate_name] = {\"votes\": number_of_votes, \"percentage\": percentage}\n    return results\n","entry_point":"calculate_election_results","input":"[(\"A\", 200","output":"{'A': {'votes': 200, 'percentage': 20.0}, 'B': {'votes': 300, 'percentage': 30.0}, 'C': {'votes': 500, 'percentage': 50.0}}"}
{"code":"def calculate_election_results(votes):\n    results = {}\n    total_votes = 0\n    for vote in votes:\n        total_votes += vote[1]\n    if total_votes < 100:\n        print(\"Error: Total number of votes must be at least 100.\")\n        return None\n    for vote in votes:\n        candidate_name = vote[0]\n        number_of_votes = vote[1]\n        percentage = (number_of_votes \/ total_votes) * 100\n        percentage = round(percentage, 2)\n        results[candidate_name] = {\"votes\": number_of_votes, \"percentage\": percentage}\n    return results\n","entry_point":"calculate_election_results","input":"[(\"X\", 1000","output":"{'X': {'votes': 1000, 'percentage': 66.67}, 'Y': {'votes': 500, 'percentage': 33.33}}"}
{"code":"def calculate_election_results(votes):\n    results = {}\n    total_votes = 0\n    for vote in votes:\n        total_votes += vote[1]\n    if total_votes < 100:\n        print(\"Error: Total number of votes must be at least 100.\")\n        return None\n    for vote in votes:\n        candidate_name = vote[0]\n        number_of_votes = vote[1]\n        percentage = (number_of_votes \/ total_votes) * 100\n        percentage = round(percentage, 2)\n        results[candidate_name] = {\"votes\": number_of_votes, \"percentage\": percentage}\n    return results\n","entry_point":"calculate_election_results","input":"[(\"ABCD\", 400","output":"{'ABCD': {'votes': 400, 'percentage': 40.0}, 'EFGH': {'votes': 600, 'percentage': 60.0}}"}
{"code":"from datetime import datetime\n\n\ndef date_analyzer(date_string):\n    try:\n        date = datetime.strptime(date_string, \"%d %b %Y\")\n    except ValueError:\n        try:\n            date = datetime.strptime(date_string, \"%d-%m-%Y\")\n        except ValueError:\n            return \"Error: invalid format.\"\n        else:\n            return datetime.strftime(date, \"%A, %B %d, %Y\")\n    else:\n        return datetime.strftime(date, \"%A, %B %d, %Y\")\n","entry_point":"date_analyzer","input":"\"01 Jan 2022\"","output":"\"Saturday, January 01, 2022\""}
{"code":"from datetime import datetime\n\n\ndef date_analyzer(date_string):\n    try:\n        date = datetime.strptime(date_string, \"%d %b %Y\")\n    except ValueError:\n        try:\n            date = datetime.strptime(date_string, \"%d-%m-%Y\")\n        except ValueError:\n            return \"Error: invalid format.\"\n        else:\n            return datetime.strftime(date, \"%A, %B %d, %Y\")\n    else:\n        return datetime.strftime(date, \"%A, %B %d, %Y\")\n","entry_point":"date_analyzer","input":"\"31-04-2022\"","output":"\"Error: invalid format.\""}
{"code":"from datetime import datetime\n\n\ndef date_analyzer(date_string):\n    try:\n        date = datetime.strptime(date_string, \"%d %b %Y\")\n    except ValueError:\n        try:\n            date = datetime.strptime(date_string, \"%d-%m-%Y\")\n        except ValueError:\n            return \"Error: invalid format.\"\n        else:\n            return datetime.strftime(date, \"%A, %B %d, %Y\")\n    else:\n        return datetime.strftime(date, \"%A, %B %d, %Y\")\n","entry_point":"date_analyzer","input":"\"30 Feb 2000\"","output":"\"Error: invalid format.\""}
{"code":"def is_rename_allowed(oldname, newname, allowed_type):\n    if oldname != \"\" and newname.split(\".\")[-1] in allowed_type:\n        return True\n    else:\n        return False\n","entry_point":"is_rename_allowed","input":"\"oldfile.txt\", \"newfile.txt\", [\"txt\", \"pdf\", \"docx\"]","output":"True"}
{"code":"def is_rename_allowed(oldname, newname, allowed_type):\n    if oldname != \"\" and newname.split(\".\")[-1] in allowed_type:\n        return True\n    else:\n        return False\n","entry_point":"is_rename_allowed","input":"\"oldfile.txt\", \"newfile.docx\", [\"txt\", \"pdf\", \"docx\"]","output":"True"}
{"code":"def is_rename_allowed(oldname, newname, allowed_type):\n    if oldname != \"\" and newname.split(\".\")[-1] in allowed_type:\n        return True\n    else:\n        return False\n","entry_point":"is_rename_allowed","input":"\"oldfile.txt\", \"newfile.jpg\", [\"txt\", \"pdf\", \"docx\"]","output":"False"}
{"code":"def remove_uneven(lst):\n    new_lst = []\n    for i in lst:\n        if type(i) == tuple:\n            new_lst.append(remove_uneven(i))\n        elif type(i) == str:\n            if i.isdigit() and int(i) % 2 == 0:\n                new_lst.append(i)\n        elif type(i) in (int, float) and i % 2 == 0:\n            new_lst.append(i)\n    return tuple(new_lst)\n","entry_point":"remove_uneven","input":"(1, 2, 3, 4, 5","output":"(2, 4)"}
{"code":"def remove_uneven(lst):\n    new_lst = []\n    for i in lst:\n        if type(i) == tuple:\n            new_lst.append(remove_uneven(i))\n        elif type(i) == str:\n            if i.isdigit() and int(i) % 2 == 0:\n                new_lst.append(i)\n        elif type(i) in (int, float) and i % 2 == 0:\n            new_lst.append(i)\n    return tuple(new_lst)\n","entry_point":"remove_uneven","input":"(1, (2, 3, 4","output":"((2, 4),)"}
{"code":"def remove_uneven(lst):\n    new_lst = []\n    for i in lst:\n        if type(i) == tuple:\n            new_lst.append(remove_uneven(i))\n        elif type(i) == str:\n            if i.isdigit() and int(i) % 2 == 0:\n                new_lst.append(i)\n        elif type(i) in (int, float) and i % 2 == 0:\n            new_lst.append(i)\n    return tuple(new_lst)\n","entry_point":"remove_uneven","input":"(\"2\", 3, \"4\", 5","output":"(\"2\", \"4\")"}
{"code":"def hours_to_minutes(hours):\n    return hours * 60\n","entry_point":"hours_to_minutes","input":"2","output":"120"}
{"code":"def hours_to_minutes(hours):\n    return hours * 60\n","entry_point":"hours_to_minutes","input":"3","output":"180"}
{"code":"def hours_to_minutes(hours):\n    return hours * 60\n","entry_point":"hours_to_minutes","input":"1","output":"60"}
{"code":"def count_specific_characters(string, specific_character):\n    count = 0\n    string = string.lower()\n    for char in string:\n        if char == specific_character.lower():\n            count += 1\n    return count\n","entry_point":"count_specific_characters","input":"\"Hello World\", \"o\"","output":"2"}
{"code":"def count_specific_characters(string, specific_character):\n    count = 0\n    string = string.lower()\n    for char in string:\n        if char == specific_character.lower():\n            count += 1\n    return count\n","entry_point":"count_specific_characters","input":"\"Programming is fun\", \"i\"","output":"3"}
{"code":"def count_specific_characters(string, specific_character):\n    count = 0\n    string = string.lower()\n    for char in string:\n        if char == specific_character.lower():\n            count += 1\n    return count\n","entry_point":"count_specific_characters","input":"\"Python is awesome\", \"z\"","output":"0"}
{"code":"def count_specific_characters(string, specific_character):\n    count = 0\n    string = string.lower()\n    for char in string:\n        if char == specific_character.lower():\n            count += 1\n    return count\n","entry_point":"count_specific_characters","input":"\"Hello World\", \"o\"","output":"2"}
{"code":"def count_specific_characters(string, specific_character):\n    count = 0\n    string = string.lower()\n    for char in string:\n        if char == specific_character.lower():\n            count += 1\n    return count\n","entry_point":"count_specific_characters","input":"\"Programming is fun\", \"i\"","output":"2  # Corrected from 3 to 2"}
{"code":"def count_specific_characters(string, specific_character):\n    count = 0\n    string = string.lower()\n    for char in string:\n        if char == specific_character.lower():\n            count += 1\n    return count\n","entry_point":"count_specific_characters","input":"\"Python is awesome\", \"z\"","output":"0"}
{"code":"def add_accuracy_to_histogram(histogram_data, generation, accs):\n    if generation in histogram_data:\n        histogram_data[generation].extend(accs)\n    else:\n        histogram_data[generation] = accs\n    return histogram_data\n","entry_point":"add_accuracy_to_histogram","input":"{}, 1, [0.8, 0.9]","output":"{1: [0.8, 0.9]}"}
{"code":"def add_accuracy_to_histogram(histogram_data, generation, accs):\n    if generation in histogram_data:\n        histogram_data[generation].extend(accs)\n    else:\n        histogram_data[generation] = accs\n    return histogram_data\n","entry_point":"add_accuracy_to_histogram","input":"{1: [0.7]}, 1, [0.8, 0.9]","output":"{1: [0.7, 0.8, 0.9]}"}
{"code":"def add_accuracy_to_histogram(histogram_data, generation, accs):\n    if generation in histogram_data:\n        histogram_data[generation].extend(accs)\n    else:\n        histogram_data[generation] = accs\n    return histogram_data\n","entry_point":"add_accuracy_to_histogram","input":"{1: [0.7]}, 2, [0.8, 0.9]","output":"{1: [0.7], 2: [0.8, 0.9]}"}
{"code":"import re\n\n\ndef match_five_alphanumeric(string):\n    pattern = r\"^[a-zA-Z0-9]{5}$\"\n    return re.match(pattern, string) is not None\n","entry_point":"match_five_alphanumeric","input":"\"abc12\"","output":"True"}
{"code":"import re\n\n\ndef match_five_alphanumeric(string):\n    pattern = r\"^[a-zA-Z0-9]{5}$\"\n    return re.match(pattern, string) is not None\n","entry_point":"match_five_alphanumeric","input":"\"12345\"","output":"True"}
{"code":"import re\n\n\ndef match_five_alphanumeric(string):\n    pattern = r\"^[a-zA-Z0-9]{5}$\"\n    return re.match(pattern, string) is not None\n","entry_point":"match_five_alphanumeric","input":"\"abc123\"","output":"False"}
{"code":"from typing import List\n\n\ndef count_unique_languages(classifiers: List[str]) -> int:\n    unique_languages = set()\n    for classifier in classifiers:\n        if classifier.startswith(\"Programming Language ::\"):\n            parts = classifier.split(\" :: \")\n            if len(parts) == 3:\n                language = parts[1]\n                unique_languages.add(language)\n    return len(unique_languages)\n","entry_point":"count_unique_languages","input":"[\"Programming Language :: Python :: 3.8\", \"Programming Language :: Java :: 11\", \"Programming Language :: C++ :: 17\"]","output":"3"}
{"code":"from typing import List\n\n\ndef count_unique_languages(classifiers: List[str]) -> int:\n    unique_languages = set()\n    for classifier in classifiers:\n        if classifier.startswith(\"Programming Language ::\"):\n            parts = classifier.split(\" :: \")\n            if len(parts) == 3:\n                language = parts[1]\n                unique_languages.add(language)\n    return len(unique_languages)\n","entry_point":"count_unique_languages","input":"[\"Programming Language :: Python :: 3.8\", \"Programming Language :: Python :: 3.7\", \"Programming Language :: Java :: 11\"]","output":"2"}
{"code":"from typing import List\n\n\ndef count_unique_languages(classifiers: List[str]) -> int:\n    unique_languages = set()\n    for classifier in classifiers:\n        if classifier.startswith(\"Programming Language ::\"):\n            parts = classifier.split(\" :: \")\n            if len(parts) == 3:\n                language = parts[1]\n                unique_languages.add(language)\n    return len(unique_languages)\n","entry_point":"count_unique_languages","input":"[\"Programming Language :: C++ :: 17\", \"Programming Language :: Java :: 11\", \"Programming Language :: JavaScript :: 6\"]","output":"3"}
{"code":"def arrayInstanceCount(arr):\n    res = {}\n    for row in arr:\n        for elem in row:\n            res[elem] = res.get(elem, 0) + 1\n    return res\n","entry_point":"arrayInstanceCount","input":"[[1, 2, 3], [4, 5, 6], [1, 2, 3]]","output":"{1: 2, 2: 2, 3: 2, 4: 1, 5: 1, 6: 1}"}
{"code":"def arrayInstanceCount(arr):\n    res = {}\n    for row in arr:\n        for elem in row:\n            res[elem] = res.get(elem, 0) + 1\n    return res\n","entry_point":"arrayInstanceCount","input":"[[1, 1, 1], [2, 2, 2], [3, 3, 3]]","output":"{1: 3, 2: 3, 3: 3}"}
{"code":"def arrayInstanceCount(arr):\n    res = {}\n    for row in arr:\n        for elem in row:\n            res[elem] = res.get(elem, 0) + 1\n    return res\n","entry_point":"arrayInstanceCount","input":"[[1, 2], [3, 4], [5, 6]]","output":"{1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1}"}
{"code":"import re\n\n\ndef match_url_to_view(url):\n    patterns = [\n        (r\"^(\\w+)\/(\\d+)$\", \"get_video_by_competition\"),\n        (r\"^add\/\", \"add_video_by_competition\"),\n    ]\n    for pattern, view in patterns:\n        if re.match(pattern, url):\n            return view\n    return \"Not Found\"\n","entry_point":"match_url_to_view","input":"\"football\/123\"","output":"\"get_video_by_competition\""}
{"code":"import re\n\n\ndef match_url_to_view(url):\n    patterns = [\n        (r\"^(\\w+)\/(\\d+)$\", \"get_video_by_competition\"),\n        (r\"^add\/\", \"add_video_by_competition\"),\n    ]\n    for pattern, view in patterns:\n        if re.match(pattern, url):\n            return view\n    return \"Not Found\"\n","entry_point":"match_url_to_view","input":"\"add\/\"","output":"\"add_video_by_competition\""}
{"code":"import re\n\n\ndef match_url_to_view(url):\n    patterns = [\n        (r\"^(\\w+)\/(\\d+)$\", \"get_video_by_competition\"),\n        (r\"^add\/\", \"add_video_by_competition\"),\n    ]\n    for pattern, view in patterns:\n        if re.match(pattern, url):\n            return view\n    return \"Not Found\"\n","entry_point":"match_url_to_view","input":"\"random\/\"","output":"\"Not Found\""}
{"code":"def insert_at_position(list, item, position):\n    new_list = list[:]\n    new_list.insert(position, item)\n    return new_list\n","entry_point":"insert_at_position","input":"[1, 2, 3], 4, 1","output":"[1, 4, 2, 3]"}
{"code":"def insert_at_position(list, item, position):\n    new_list = list[:]\n    new_list.insert(position, item)\n    return new_list\n","entry_point":"insert_at_position","input":"['a', 'b', 'c'], 'd', 0","output":"['d', 'a', 'b', 'c']"}
{"code":"def insert_at_position(list, item, position):\n    new_list = list[:]\n    new_list.insert(position, item)\n    return new_list\n","entry_point":"insert_at_position","input":"[], 'x', 0","output":"['x']"}
{"code":"def concatenate_string_with_sentence():\n    string = \"Hello\"\n    sentence = \"How are you today?\"\n    concatenated_string = string + \" \" + sentence\n    return concatenated_string\n","entry_point":"concatenate_string_with_sentence","input":"","output":"\"Hello How are you today?\""}
{"code":"def concatenate_string_with_sentence():\n    string = \"Hello\"\n    sentence = \"How are you today?\"\n    concatenated_string = string + \" \" + sentence\n    return concatenated_string\n","entry_point":"concatenate_string_with_sentence","input":"","output":"\"Hello How are you today?\""}
{"code":"def concatenate_string_with_sentence():\n    string = \"Hello\"\n    sentence = \"How are you today?\"\n    concatenated_string = string + \" \" + sentence\n    return concatenated_string\n","entry_point":"concatenate_string_with_sentence","input":"","output":"\"Hello How are you today?\""}
{"code":"def find_substrings(s):\n    n = len(s)\n    substrings = []\n    for i in range(n):\n        start = i\n        end = i\n        while end < n:\n            substrings.append(s[start : end + 1])\n            end += 1\n    return substrings\n","entry_point":"find_substrings","input":"\"hello\"","output":"['h', 'he', 'hel', 'hell', 'hello', 'e', 'el', 'ell', 'ello', 'l', 'll', 'llo', 'l', 'lo', 'o']"}
{"code":"def find_substrings(s):\n    n = len(s)\n    substrings = []\n    for i in range(n):\n        start = i\n        end = i\n        while end < n:\n            substrings.append(s[start : end + 1])\n            end += 1\n    return substrings\n","entry_point":"find_substrings","input":"\"abc\"","output":"['a', 'ab', 'abc', 'b', 'bc', 'c']"}
{"code":"def find_substrings(s):\n    n = len(s)\n    substrings = []\n    for i in range(n):\n        start = i\n        end = i\n        while end < n:\n            substrings.append(s[start : end + 1])\n            end += 1\n    return substrings\n","entry_point":"find_substrings","input":"\"12345\"","output":"['1', '12', '123', '1234', '12345', '2', '23', '234', '2345', '3', '34', '345', '4', '45', '5']"}
{"code":"def calculate_price_sum(list_of_dicts):\n    total = 0\n    for dictionary in list_of_dicts:\n        for key, value in dictionary.items():\n            if key.startswith(\"price\"):\n                total += value\n    return total\n","entry_point":"calculate_price_sum","input":"[{\"price\": 10}, {\"price_1\": 20}, {\"price_2\": 30}]","output":"60"}
{"code":"def calculate_price_sum(list_of_dicts):\n    total = 0\n    for dictionary in list_of_dicts:\n        for key, value in dictionary.items():\n            if key.startswith(\"price\"):\n                total += value\n    return total\n","entry_point":"calculate_price_sum","input":"[{\"price_1\": 10}, {\"price_3\": 20}, {\"price_5\": 30}]","output":"60"}
{"code":"def calculate_price_sum(list_of_dicts):\n    total = 0\n    for dictionary in list_of_dicts:\n        for key, value in dictionary.items():\n            if key.startswith(\"price\"):\n                total += value\n    return total\n","entry_point":"calculate_price_sum","input":"[{\"price_1\": 10}, {\"price_2\": 20}, {\"price_3\": 30}]","output":"60"}
{"code":"def find_intersection_and_remove(list1, list2):\n    intersection = list(set(list1) & set(list2))\n    list2 = [value for value in list2 if value not in intersection]\n    return intersection\n","entry_point":"find_intersection_and_remove","input":"[1, 2, 3, 4, 5], [3, 4, 5, 6, 7]","output":"[3, 4, 5]"}
{"code":"def find_intersection_and_remove(list1, list2):\n    intersection = list(set(list1) & set(list2))\n    list2 = [value for value in list2 if value not in intersection]\n    return intersection\n","entry_point":"find_intersection_and_remove","input":"[1, 2, 3, 4, 5], [6, 7, 8, 9, 10]","output":"[]"}
{"code":"def find_intersection_and_remove(list1, list2):\n    intersection = list(set(list1) & set(list2))\n    list2 = [value for value in list2 if value not in intersection]\n    return intersection\n","entry_point":"find_intersection_and_remove","input":"[1, 2, 3, 4, 5], [1, 2, 3, 4, 5]","output":"[1, 2, 3, 4, 5]"}
{"code":"def route_request(request_method):\n    endpoints = [\n        \"api_advisor_view\",\n        \"api_advisor_view_post\",\n    ]\n\n    if request_method == \"GET\":\n        return (\n            \"api_advisor_view\" if \"api_advisor_view\" in endpoints else \"404 Not Found\"\n        )\n    elif request_method == \"POST\":\n        return (\n            \"api_advisor_view_post\"\n            if \"api_advisor_view_post\" in endpoints\n            else \"404 Not Found\"\n        )\n    else:\n        return \"404 Not Found\"\n","entry_point":"route_request","input":"\"GET\"","output":"\"api_advisor_view\""}
{"code":"def route_request(request_method):\n    endpoints = [\n        \"api_advisor_view\",\n        \"api_advisor_view_post\",\n    ]\n\n    if request_method == \"GET\":\n        return (\n            \"api_advisor_view\" if \"api_advisor_view\" in endpoints else \"404 Not Found\"\n        )\n    elif request_method == \"POST\":\n        return (\n            \"api_advisor_view_post\"\n            if \"api_advisor_view_post\" in endpoints\n            else \"404 Not Found\"\n        )\n    else:\n        return \"404 Not Found\"\n","entry_point":"route_request","input":"\"POST\"","output":"\"api_advisor_view_post\""}
{"code":"def route_request(request_method):\n    endpoints = [\n        \"api_advisor_view\",\n        \"api_advisor_view_post\",\n    ]\n\n    if request_method == \"GET\":\n        return (\n            \"api_advisor_view\" if \"api_advisor_view\" in endpoints else \"404 Not Found\"\n        )\n    elif request_method == \"POST\":\n        return (\n            \"api_advisor_view_post\"\n            if \"api_advisor_view_post\" in endpoints\n            else \"404 Not Found\"\n        )\n    else:\n        return \"404 Not Found\"\n","entry_point":"route_request","input":"\"PUT\"","output":"\"404 Not Found\""}
{"code":"def gcd_recursive(a, b):\n    if a == 0:\n        return b\n    if b == 0:\n        return a\n    if a > b:\n        return gcd_recursive(a % b, b)\n    else:\n        return gcd_recursive(a, b % a)\n","entry_point":"gcd_recursive","input":"12, 18","output":"6"}
{"code":"def gcd_recursive(a, b):\n    if a == 0:\n        return b\n    if b == 0:\n        return a\n    if a > b:\n        return gcd_recursive(a % b, b)\n    else:\n        return gcd_recursive(a, b % a)\n","entry_point":"gcd_recursive","input":"25, 5","output":"5"}
{"code":"def gcd_recursive(a, b):\n    if a == 0:\n        return b\n    if b == 0:\n        return a\n    if a > b:\n        return gcd_recursive(a % b, b)\n    else:\n        return gcd_recursive(a, b % a)\n","entry_point":"gcd_recursive","input":"81, 27","output":"27"}
{"code":"def categorize_config_files(file_paths):\n    outages_config_files = set()\n    generated_config_files = set()\n    other_config_files = set()\n    for file_path in file_paths:\n        if file_path.startswith(\"infra\/config\/outages\"):\n            outages_config_files.add(file_path)\n        elif file_path.startswith(\"infra\/config\/generated\"):\n            generated_config_files.add(file_path)\n        else:\n            other_config_files.add(file_path)\n    return outages_config_files, generated_config_files, other_config_files\n","entry_point":"categorize_config_files","input":"[\"infra\/config\/outages\/file1\", \"infra\/config\/generated\/file2\", \"infra\/config\/other\/file3\"]","output":"({\"infra\/config\/outages\/file1\"}, {\"infra\/config\/generated\/file2\"}, {\"infra\/config\/other\/file3\"})"}
{"code":"def categorize_config_files(file_paths):\n    outages_config_files = set()\n    generated_config_files = set()\n    other_config_files = set()\n    for file_path in file_paths:\n        if file_path.startswith(\"infra\/config\/outages\"):\n            outages_config_files.add(file_path)\n        elif file_path.startswith(\"infra\/config\/generated\"):\n            generated_config_files.add(file_path)\n        else:\n            other_config_files.add(file_path)\n    return outages_config_files, generated_config_files, other_config_files\n","entry_point":"categorize_config_files","input":"[\"infra\/config\/outages\/file1\", \"infra\/config\/outages\/file2\", \"infra\/config\/other\/file3\"]","output":"({\"infra\/config\/outages\/file1\", \"infra\/config\/outages\/file2\"}, set(), {\"infra\/config\/other\/file3\"})"}
{"code":"def categorize_config_files(file_paths):\n    outages_config_files = set()\n    generated_config_files = set()\n    other_config_files = set()\n    for file_path in file_paths:\n        if file_path.startswith(\"infra\/config\/outages\"):\n            outages_config_files.add(file_path)\n        elif file_path.startswith(\"infra\/config\/generated\"):\n            generated_config_files.add(file_path)\n        else:\n            other_config_files.add(file_path)\n    return outages_config_files, generated_config_files, other_config_files\n","entry_point":"categorize_config_files","input":"[\"infra\/config\/generated\/file1\", \"infra\/config\/generated\/file2\", \"infra\/config\/other\/file3\"]","output":"(set(), {\"infra\/config\/generated\/file1\", \"infra\/config\/generated\/file2\"}, {\"infra\/config\/other\/file3\"})"}
{"code":"def median_of_five(a, b, c, d, e):\n    numbers = [a, b, c, d, e]\n    numbers.sort()\n\n    return numbers[2]\n","entry_point":"median_of_five","input":"1, 2, 3, 4, 5","output":"3"}
{"code":"def median_of_five(a, b, c, d, e):\n    numbers = [a, b, c, d, e]\n    numbers.sort()\n\n    return numbers[2]\n","entry_point":"median_of_five","input":"5, 4, 3, 2, 1","output":"3"}
{"code":"def median_of_five(a, b, c, d, e):\n    numbers = [a, b, c, d, e]\n    numbers.sort()\n\n    return numbers[2]\n","entry_point":"median_of_five","input":"2, 2, 2, 2, 2","output":"2"}
{"code":"def check_unique_list(my_list):\n    unique_list = []\n    for i in my_list:\n        if i not in unique_list:\n            unique_list.append(i)\n    if len(unique_list) == len(my_list):\n        return True\n    else:\n        return False\n","entry_point":"check_unique_list","input":"['apple', 'banana', 'cherry']","output":"True"}
{"code":"def check_unique_list(my_list):\n    unique_list = []\n    for i in my_list:\n        if i not in unique_list:\n            unique_list.append(i)\n    if len(unique_list) == len(my_list):\n        return True\n    else:\n        return False\n","entry_point":"check_unique_list","input":"['apple', 'banana', 'apple']","output":"False"}
{"code":"def check_unique_list(my_list):\n    unique_list = []\n    for i in my_list:\n        if i not in unique_list:\n            unique_list.append(i)\n    if len(unique_list) == len(my_list):\n        return True\n    else:\n        return False\n","entry_point":"check_unique_list","input":"['cat', 'dog', 'elephant']","output":"True"}
{"code":"def calculateTimeDifference(timeStart, timeEnd):\n    return timeEnd - timeStart\n","entry_point":"calculateTimeDifference","input":"0, 10","output":"10"}
{"code":"def calculateTimeDifference(timeStart, timeEnd):\n    return timeEnd - timeStart\n","entry_point":"calculateTimeDifference","input":"100, 200","output":"100"}
{"code":"def calculateTimeDifference(timeStart, timeEnd):\n    return timeEnd - timeStart\n","entry_point":"calculateTimeDifference","input":"500, 1000","output":"500"}
{"code":"def binary_search_recursive(array, target, start, end):\n    if start > end:\n        return -1\n\n    mid = (start + end) \/\/ 2\n    mid_element = array[mid]\n\n    if mid_element == target:\n        return mid\n    elif target < mid_element:\n        return binary_search_recursive(array, target, start, mid - 1)\n    else:\n        return binary_search_recursive(array, target, mid + 1, end)\n","entry_point":"binary_search_recursive","input":"[1, 2, 3, 4, 5], 4, 0, 4","output":"3"}
{"code":"def binary_search_recursive(array, target, start, end):\n    if start > end:\n        return -1\n\n    mid = (start + end) \/\/ 2\n    mid_element = array[mid]\n\n    if mid_element == target:\n        return mid\n    elif target < mid_element:\n        return binary_search_recursive(array, target, start, mid - 1)\n    else:\n        return binary_search_recursive(array, target, mid + 1, end)\n","entry_point":"binary_search_recursive","input":"[10, 20, 30, 40, 50], 10, 0, 4","output":"0"}
{"code":"def binary_search_recursive(array, target, start, end):\n    if start > end:\n        return -1\n\n    mid = (start + end) \/\/ 2\n    mid_element = array[mid]\n\n    if mid_element == target:\n        return mid\n    elif target < mid_element:\n        return binary_search_recursive(array, target, start, mid - 1)\n    else:\n        return binary_search_recursive(array, target, mid + 1, end)\n","entry_point":"binary_search_recursive","input":"[1, 3, 5, 7, 9], 6, 0, 4","output":"-1"}
{"code":"def next_color(color):\n    color_sequence = [\"WHITE\", \"RED\", \"GREEN\", \"BLUE\", \"WHITE\"]\n    current_index = color_sequence.index(color)\n    next_index = (current_index + 1) % len(color_sequence)\n    return color_sequence[next_index]\n","entry_point":"next_color","input":"\"WHITE\"","output":"\"RED\""}
{"code":"def next_color(color):\n    color_sequence = [\"WHITE\", \"RED\", \"GREEN\", \"BLUE\", \"WHITE\"]\n    current_index = color_sequence.index(color)\n    next_index = (current_index + 1) % len(color_sequence)\n    return color_sequence[next_index]\n","entry_point":"next_color","input":"\"RED\"","output":"\"GREEN\""}
{"code":"def next_color(color):\n    color_sequence = [\"WHITE\", \"RED\", \"GREEN\", \"BLUE\", \"WHITE\"]\n    current_index = color_sequence.index(color)\n    next_index = (current_index + 1) % len(color_sequence)\n    return color_sequence[next_index]\n","entry_point":"next_color","input":"\"BLUE\"","output":"\"WHITE\""}
{"code":"def increment_list_values(list):\n    return [elem + 1 for elem in list]\n","entry_point":"increment_list_values","input":"[1, 2, 3]","output":"[2, 3, 4]"}
{"code":"def increment_list_values(list):\n    return [elem + 1 for elem in list]\n","entry_point":"increment_list_values","input":"[0, 0, 0]","output":"[1, 1, 1]"}
{"code":"def increment_list_values(list):\n    return [elem + 1 for elem in list]\n","entry_point":"increment_list_values","input":"[-1, -2, -3]","output":"[0, -1, -2]"}
{"code":"def contains_perfect_squares(start, end):\n    for num in range(start, end + 1):\n        if int(num**0.5) ** 2 == num:\n            return True\n    return False\n","entry_point":"contains_perfect_squares","input":"1, 10","output":"True"}
{"code":"def contains_perfect_squares(start, end):\n    for num in range(start, end + 1):\n        if int(num**0.5) ** 2 == num:\n            return True\n    return False\n","entry_point":"contains_perfect_squares","input":"5, 8","output":"False"}
{"code":"def contains_perfect_squares(start, end):\n    for num in range(start, end + 1):\n        if int(num**0.5) ** 2 == num:\n            return True\n    return False\n","entry_point":"contains_perfect_squares","input":"16, 25","output":"True"}
{"code":"def find_symbol(words, target):\n    index_of_target = -1\n\n    for i in range(len(words)):\n        if words[i] == target:\n            index_of_target = i\n            break\n\n    return index_of_target\n","entry_point":"find_symbol","input":"[\"apple\", \"banana\", \"cherry\"], \"banana\"","output":"1"}
{"code":"def find_symbol(words, target):\n    index_of_target = -1\n\n    for i in range(len(words)):\n        if words[i] == target:\n            index_of_target = i\n            break\n\n    return index_of_target\n","entry_point":"find_symbol","input":"[\"cat\", \"dog\", \"elephant\"], \"elephant\"","output":"2"}
{"code":"def find_symbol(words, target):\n    index_of_target = -1\n\n    for i in range(len(words)):\n        if words[i] == target:\n            index_of_target = i\n            break\n\n    return index_of_target\n","entry_point":"find_symbol","input":"[\"red\", \"green\", \"blue\"], \"yellow\"","output":"-1"}
{"code":"def sentence_to_words(sentence):\n    return sentence.split()\n","entry_point":"sentence_to_words","input":"\"Hello world\"","output":"[\"Hello\", \"world\"]"}
{"code":"def sentence_to_words(sentence):\n    return sentence.split()\n","entry_point":"sentence_to_words","input":"\"This is a test\"","output":"[\"This\", \"is\", \"a\", \"test\"]"}
{"code":"def sentence_to_words(sentence):\n    return sentence.split()\n","entry_point":"sentence_to_words","input":"\"Python is fun\"","output":"[\"Python\", \"is\", \"fun\"]"}
{"code":"def print_fruits_keys(dict):\n    print(\"The keys in the given dictionary are:\")\n    for key in dict.keys():\n        print(key)\n","entry_point":"print_fruits_keys","input":"fruits","output":"None"}
{"code":"def print_fruits_keys(dict):\n    print(\"The keys in the given dictionary are:\")\n    for key in dict.keys():\n        print(key)\n","entry_point":"print_fruits_keys","input":"{'a': 1, 'b': 2, 'c': 3}","output":"None"}
{"code":"def print_fruits_keys(dict):\n    print(\"The keys in the given dictionary are:\")\n    for key in dict.keys():\n        print(key)\n","entry_point":"print_fruits_keys","input":"{'x': 10, 'y': 20, 'z': 30}","output":"None"}
{"code":"def concatenate_string_with_phrase_fstrings():\n    string = \"Hello\"\n    phrase = \"to the world\"\n    concatenated_string = f\"{string} {phrase}\"\n    return concatenated_string\n","entry_point":"concatenate_string_with_phrase_fstrings","input":"","output":"\"Hello to the world\""}
{"code":"def concatenate_string_with_phrase_fstrings():\n    string = \"Hello\"\n    phrase = \"to the world\"\n    concatenated_string = f\"{string} {phrase}\"\n    return concatenated_string\n","entry_point":"concatenate_string_with_phrase_fstrings","input":"","output":"\"Hello to the world\""}
{"code":"def concatenate_string_with_phrase_fstrings():\n    string = \"Hello\"\n    phrase = \"to the world\"\n    concatenated_string = f\"{string} {phrase}\"\n    return concatenated_string\n","entry_point":"concatenate_string_with_phrase_fstrings","input":"","output":"\"Hello to the world\""}
{"code":"import re\n\n\ndef capitalize_and_remove_special(strings):\n    result = []\n    for string in strings:\n        if not re.match(\"^[a-zA-Z0-9\\s]*$\", string):\n            continue\n        result.append(string.upper())\n    return result\n","entry_point":"capitalize_and_remove_special","input":"[\"Hello\", \"World\"]","output":"[\"HELLO\", \"WORLD\"]"}
{"code":"import re\n\n\ndef capitalize_and_remove_special(strings):\n    result = []\n    for string in strings:\n        if not re.match(\"^[a-zA-Z0-9\\s]*$\", string):\n            continue\n        result.append(string.upper())\n    return result\n","entry_point":"capitalize_and_remove_special","input":"[\"123\", \"abc\"]","output":"[\"123\", \"ABC\"]"}
{"code":"import re\n\n\ndef capitalize_and_remove_special(strings):\n    result = []\n    for string in strings:\n        if not re.match(\"^[a-zA-Z0-9\\s]*$\", string):\n            continue\n        result.append(string.upper())\n    return result\n","entry_point":"capitalize_and_remove_special","input":"[\"Special!\", \"Characters\"]","output":"[\"CHARACTERS\"]"}
{"code":"def position_of_char(string, char):\n    return string.index(char)\n","entry_point":"position_of_char","input":"\"hello\", \"e\"","output":"1"}
{"code":"def position_of_char(string, char):\n    return string.index(char)\n","entry_point":"position_of_char","input":"\"world\", \"r\"","output":"2"}
{"code":"def position_of_char(string, char):\n    return string.index(char)\n","entry_point":"position_of_char","input":"\"programming\", \"g\"","output":"3"}
{"code":"def extract_bold_text(html_code):\n    bold_texts = []\n    start_tag = \"<b>\"\n    end_tag = \"<\/b>\"\n    start_index = 0\n    while True:\n        start = html_code.find(start_tag, start_index)\n        end = html_code.find(end_tag, start_index)\n        if start == -1 or end == -1:\n            break\n        start_index = end + len(end_tag)\n        bold_text = html_code[start + len(start_tag) : end]\n        bold_texts.append(bold_text)\n    return bold_texts\n","entry_point":"extract_bold_text","input":"\"<b>hello<\/b>\"","output":"[\"hello\"]"}
{"code":"def extract_bold_text(html_code):\n    bold_texts = []\n    start_tag = \"<b>\"\n    end_tag = \"<\/b>\"\n    start_index = 0\n    while True:\n        start = html_code.find(start_tag, start_index)\n        end = html_code.find(end_tag, start_index)\n        if start == -1 or end == -1:\n            break\n        start_index = end + len(end_tag)\n        bold_text = html_code[start + len(start_tag) : end]\n        bold_texts.append(bold_text)\n    return bold_texts\n","entry_point":"extract_bold_text","input":"\"<b>bold<\/b> text <b>example<\/b>\"","output":"[\"bold\", \"example\"]"}
{"code":"def extract_bold_text(html_code):\n    bold_texts = []\n    start_tag = \"<b>\"\n    end_tag = \"<\/b>\"\n    start_index = 0\n    while True:\n        start = html_code.find(start_tag, start_index)\n        end = html_code.find(end_tag, start_index)\n        if start == -1 or end == -1:\n            break\n        start_index = end + len(end_tag)\n        bold_text = html_code[start + len(start_tag) : end]\n        bold_texts.append(bold_text)\n    return bold_texts\n","entry_point":"extract_bold_text","input":"\"No bold text here\"","output":"[]"}
{"code":"def vending_machine(item, money_inserted):\n    items = {\"cola\": 1.50, \"chips\": 1.00, \"candy\": 0.75}\n    stock = {\"cola\": 5, \"chips\": 3, \"candy\": 7}\n    if item not in items:\n        return \"Item unavailable\"\n\n    if stock[item] == 0:\n        return \"Item unavailable\"\n\n    if money_inserted < items[item]:\n        return \"Insufficient money inserted\"\n\n    change = round(money_inserted - items[item], 2)\n    stock[item] -= 1\n    return f\"Transaction successful. Change: {change}\"\n","entry_point":"vending_machine","input":"\"cola\", 2.00","output":"\"Transaction successful. Change: 0.5\""}
{"code":"def vending_machine(item, money_inserted):\n    items = {\"cola\": 1.50, \"chips\": 1.00, \"candy\": 0.75}\n    stock = {\"cola\": 5, \"chips\": 3, \"candy\": 7}\n    if item not in items:\n        return \"Item unavailable\"\n\n    if stock[item] == 0:\n        return \"Item unavailable\"\n\n    if money_inserted < items[item]:\n        return \"Insufficient money inserted\"\n\n    change = round(money_inserted - items[item], 2)\n    stock[item] -= 1\n    return f\"Transaction successful. Change: {change}\"\n","entry_point":"vending_machine","input":"\"chips\", 1.50","output":"\"Transaction successful. Change: 0.5\""}
{"code":"def vending_machine(item, money_inserted):\n    items = {\"cola\": 1.50, \"chips\": 1.00, \"candy\": 0.75}\n    stock = {\"cola\": 5, \"chips\": 3, \"candy\": 7}\n    if item not in items:\n        return \"Item unavailable\"\n\n    if stock[item] == 0:\n        return \"Item unavailable\"\n\n    if money_inserted < items[item]:\n        return \"Insufficient money inserted\"\n\n    change = round(money_inserted - items[item], 2)\n    stock[item] -= 1\n    return f\"Transaction successful. Change: {change}\"\n","entry_point":"vending_machine","input":"\"candy\", 0.75","output":"\"Transaction successful. Change: 0.0\""}
{"code":"def merge_and_remove_duplicates(list1, list2):\n    merged_list = list1 + list2\n    merged_list = list(set(merged_list))\n    return merged_list\n","entry_point":"merge_and_remove_duplicates","input":"[1, 2, 3], [3, 4, 5]","output":"[1, 2, 3, 4, 5]"}
{"code":"def merge_and_remove_duplicates(list1, list2):\n    merged_list = list1 + list2\n    merged_list = list(set(merged_list))\n    return merged_list\n","entry_point":"merge_and_remove_duplicates","input":"[1, 2, 3], [3, 4, 5, 5]","output":"[1, 2, 3, 4, 5]"}
{"code":"def merge_and_remove_duplicates(list1, list2):\n    merged_list = list1 + list2\n    merged_list = list(set(merged_list))\n    return merged_list\n","entry_point":"merge_and_remove_duplicates","input":"[1, 2, 3], [4, 5, 6]","output":"[1, 2, 3, 4, 5, 6]"}
{"code":"def count_occurances(list, target):\n    count = 0\n    for element in list:\n        if element == target:\n            count += 1\n    return count\n","entry_point":"count_occurances","input":"[1, 2, 3, 4, 2, 2], 2","output":"3"}
{"code":"def count_occurances(list, target):\n    count = 0\n    for element in list:\n        if element == target:\n            count += 1\n    return count\n","entry_point":"count_occurances","input":"[5, 5, 5, 5, 5], 5","output":"5"}
{"code":"def count_occurances(list, target):\n    count = 0\n    for element in list:\n        if element == target:\n            count += 1\n    return count\n","entry_point":"count_occurances","input":"[1, 2, 3, 4, 5], 6","output":"0"}
{"code":"import base64\n\n\ndef encode_to_base64(string):\n    encoded_string = base64.b64encode(string.encode())\n    return encoded_string\n","entry_point":"encode_to_base64","input":"\"Hello, World!\"","output":"b'SGVsbG8sIFdvcmxkIQ=='"}
{"code":"import base64\n\n\ndef encode_to_base64(string):\n    encoded_string = base64.b64encode(string.encode())\n    return encoded_string\n","entry_point":"encode_to_base64","input":"\"Python is fun\"","output":"b'UHl0aG9uIGlzIGZ1bg=='"}
{"code":"import base64\n\n\ndef encode_to_base64(string):\n    encoded_string = base64.b64encode(string.encode())\n    return encoded_string\n","entry_point":"encode_to_base64","input":"\"12345\"","output":"b'MTIzNDU='"}
{"code":"def non_zero_indices(vector):\n    non_zero_indices = [index for index, value in enumerate(vector) if value != 0]\n    return non_zero_indices\n","entry_point":"non_zero_indices","input":"[1, 0, 3, 0, 5]","output":"[0, 2, 4]"}
{"code":"def non_zero_indices(vector):\n    non_zero_indices = [index for index, value in enumerate(vector) if value != 0]\n    return non_zero_indices\n","entry_point":"non_zero_indices","input":"[0, 0, 0, 0, 0]","output":"[]"}
{"code":"def non_zero_indices(vector):\n    non_zero_indices = [index for index, value in enumerate(vector) if value != 0]\n    return non_zero_indices\n","entry_point":"non_zero_indices","input":"[1, 2, 3, 4, 5]","output":"[0, 1, 2, 3, 4]"}
{"code":"def assign_and_validate():\n    my_binary = format(5, \"016b\")\n\n    if int(my_binary, 2) != 5:\n        raise ValueError(\n            f\"{my_binary} is not a valid 16-bit binary representation of 5.\"\n        )\n\n    return my_binary\n","entry_point":"assign_and_validate","input":"","output":"'0000000000000101'"}
{"code":"def assign_and_validate():\n    my_binary = format(5, \"016b\")\n\n    if int(my_binary, 2) != 5:\n        raise ValueError(\n            f\"{my_binary} is not a valid 16-bit binary representation of 5.\"\n        )\n\n    return my_binary\n","entry_point":"assign_and_validate","input":"","output":"'0000000000000101'"}
{"code":"def assign_and_validate():\n    my_binary = format(5, \"016b\")\n\n    if int(my_binary, 2) != 5:\n        raise ValueError(\n            f\"{my_binary} is not a valid 16-bit binary representation of 5.\"\n        )\n\n    return my_binary\n","entry_point":"assign_and_validate","input":"","output":"'0000000000000101'"}
{"code":"def classify_element(element):\n    if isinstance(element, int):\n        return \"integer\"\n    elif isinstance(element, float):\n        return \"float\"\n    elif isinstance(element, str):\n        return \"string\"\n    elif isinstance(element, list):\n        return \"list\"\n    elif isinstance(element, dict):\n        return \"dictionary\"\n    else:\n        return \"unknown\"\n","entry_point":"classify_element","input":"5","output":"\"integer\""}
{"code":"def classify_element(element):\n    if isinstance(element, int):\n        return \"integer\"\n    elif isinstance(element, float):\n        return \"float\"\n    elif isinstance(element, str):\n        return \"string\"\n    elif isinstance(element, list):\n        return \"list\"\n    elif isinstance(element, dict):\n        return \"dictionary\"\n    else:\n        return \"unknown\"\n","entry_point":"classify_element","input":"3.14","output":"\"float\""}
{"code":"def classify_element(element):\n    if isinstance(element, int):\n        return \"integer\"\n    elif isinstance(element, float):\n        return \"float\"\n    elif isinstance(element, str):\n        return \"string\"\n    elif isinstance(element, list):\n        return \"list\"\n    elif isinstance(element, dict):\n        return \"dictionary\"\n    else:\n        return \"unknown\"\n","entry_point":"classify_element","input":"\"Hello\"","output":"\"string\""}
{"code":"def merge_duplicates(arr):\n    new_arr = [arr[0]]\n    for element in arr:\n        if element != new_arr[-1]:\n            new_arr.append(element)\n    return new_arr\n","entry_point":"merge_duplicates","input":"[1, 2, 2, 3, 4, 4, 4, 5]","output":"[1, 2, 3, 4, 5]"}
{"code":"def merge_duplicates(arr):\n    new_arr = [arr[0]]\n    for element in arr:\n        if element != new_arr[-1]:\n            new_arr.append(element)\n    return new_arr\n","entry_point":"merge_duplicates","input":"[1, 1, 1, 2, 3, 3, 4, 4, 4]","output":"[1, 2, 3, 4]"}
{"code":"def merge_duplicates(arr):\n    new_arr = [arr[0]]\n    for element in arr:\n        if element != new_arr[-1]:\n            new_arr.append(element)\n    return new_arr\n","entry_point":"merge_duplicates","input":"[1, 1, 1, 1, 1]","output":"[1]"}
{"code":"import re\n\n\ndef tokenizeText(text):\n    tokens = re.findall(r\"\\w+\", text)\n    return tokens\n","entry_point":"tokenizeText","input":"\"Hello, World!\"","output":"[\"Hello\", \"World\"]"}
{"code":"import re\n\n\ndef tokenizeText(text):\n    tokens = re.findall(r\"\\w+\", text)\n    return tokens\n","entry_point":"tokenizeText","input":"\"123 456 789\"","output":"[\"123\", \"456\", \"789\"]"}
{"code":"import re\n\n\ndef tokenizeText(text):\n    tokens = re.findall(r\"\\w+\", text)\n    return tokens\n","entry_point":"tokenizeText","input":"\"Python is fun!\"","output":"[\"Python\", \"is\", \"fun\"]"}
{"code":"def find_divisible_numbers(numbers):\n    count = {}\n    divisible_nums = []\n    for num in numbers:\n        if num % 3 == 0 and num % 7 == 0:\n            divisible_nums.append(num)\n            if num not in count:\n                count[num] = 1\n            else:\n                count[num] += 1\n    divisible_nums = sorted(divisible_nums)\n    average = sum(divisible_nums) \/ len(divisible_nums)\n    minimum = min(divisible_nums)\n    maximum = max(divisible_nums)\n    print(\"Average:\", average)\n    print(\"Minimum:\", minimum)\n    print(\"Maximum:\", maximum)\n    for num, occurrences in count.items():\n        print(\"Number\", num, \"occurs\", occurrences, \"time(s)\")\n","entry_point":"find_divisible_numbers","input":"[21, 42, 63, 84, 105]","output":"None"}
{"code":"def find_divisible_numbers(numbers):\n    count = {}\n    divisible_nums = []\n    for num in numbers:\n        if num % 3 == 0 and num % 7 == 0:\n            divisible_nums.append(num)\n            if num not in count:\n                count[num] = 1\n            else:\n                count[num] += 1\n    divisible_nums = sorted(divisible_nums)\n    average = sum(divisible_nums) \/ len(divisible_nums)\n    minimum = min(divisible_nums)\n    maximum = max(divisible_nums)\n    print(\"Average:\", average)\n    print(\"Minimum:\", minimum)\n    print(\"Maximum:\", maximum)\n    for num, occurrences in count.items():\n        print(\"Number\", num, \"occurs\", occurrences, \"time(s)\")\n","entry_point":"find_divisible_numbers","input":"[7, 14, 21, 28, 35, 42, 49, 56, 63, 70]","output":"None"}
{"code":"def find_divisible_numbers(numbers):\n    count = {}\n    divisible_nums = []\n    for num in numbers:\n        if num % 3 == 0 and num % 7 == 0:\n            divisible_nums.append(num)\n            if num not in count:\n                count[num] = 1\n            else:\n                count[num] += 1\n    divisible_nums = sorted(divisible_nums)\n    average = sum(divisible_nums) \/ len(divisible_nums)\n    minimum = min(divisible_nums)\n    maximum = max(divisible_nums)\n    print(\"Average:\", average)\n    print(\"Minimum:\", minimum)\n    print(\"Maximum:\", maximum)\n    for num, occurrences in count.items():\n        print(\"Number\", num, \"occurs\", occurrences, \"time(s)\")\n","entry_point":"find_divisible_numbers","input":"[3, 6, 9, 12, 15, 18, 21, 24, 27, 30]","output":"None"}
{"code":"def find_highest_frequency(sentence):\n    words = sentence.split()\n    frequency = {}\n    for word in words:\n        if word not in frequency:\n            frequency[word] = 1\n        else:\n            frequency[word] += 1\n    return max(frequency, key=frequency.get)\n","entry_point":"find_highest_frequency","input":"\"hello world hello\"","output":"\"hello\""}
{"code":"def find_highest_frequency(sentence):\n    words = sentence.split()\n    frequency = {}\n    for word in words:\n        if word not in frequency:\n            frequency[word] = 1\n        else:\n            frequency[word] += 1\n    return max(frequency, key=frequency.get)\n","entry_point":"find_highest_frequency","input":"\"apple orange banana apple banana\"","output":"\"apple\""}
{"code":"def find_highest_frequency(sentence):\n    words = sentence.split()\n    frequency = {}\n    for word in words:\n        if word not in frequency:\n            frequency[word] = 1\n        else:\n            frequency[word] += 1\n    return max(frequency, key=frequency.get)\n","entry_point":"find_highest_frequency","input":"\"a a a b b c\"","output":"\"a\""}
{"code":"import math\n\n\ndef calculate_euler(decimal_places):\n    n = decimal_places + 2\n\n    euler_number = math.exp(1)\n\n    rounded_euler = round(euler_number, n)\n\n    formatted_euler = \"{:.{}f}\".format(rounded_euler, decimal_places)\n\n    return float(formatted_euler)\n","entry_point":"calculate_euler","input":"2","output":"2.72"}
{"code":"import math\n\n\ndef calculate_euler(decimal_places):\n    n = decimal_places + 2\n\n    euler_number = math.exp(1)\n\n    rounded_euler = round(euler_number, n)\n\n    formatted_euler = \"{:.{}f}\".format(rounded_euler, decimal_places)\n\n    return float(formatted_euler)\n","entry_point":"calculate_euler","input":"3","output":"2.718"}
{"code":"import math\n\n\ndef calculate_euler(decimal_places):\n    n = decimal_places + 2\n\n    euler_number = math.exp(1)\n\n    rounded_euler = round(euler_number, n)\n\n    formatted_euler = \"{:.{}f}\".format(rounded_euler, decimal_places)\n\n    return float(formatted_euler)\n","entry_point":"calculate_euler","input":"4","output":"2.7183"}
{"code":"def getAverageAndSum(numbers):\n    total = 0\n    for num in numbers:\n        total += num\n    average = total \/ len(numbers)\n    return average, total\n","entry_point":"getAverageAndSum","input":"[1, 2, 3, 4, 5]","output":"(3.0, 15)"}
{"code":"def getAverageAndSum(numbers):\n    total = 0\n    for num in numbers:\n        total += num\n    average = total \/ len(numbers)\n    return average, total\n","entry_point":"getAverageAndSum","input":"[10, 20, 30, 40, 50]","output":"(30.0, 150)"}
{"code":"def getAverageAndSum(numbers):\n    total = 0\n    for num in numbers:\n        total += num\n    average = total \/ len(numbers)\n    return average, total\n","entry_point":"getAverageAndSum","input":"[0, 0, 0, 0, 0]","output":"(0.0, 0)"}
{"code":"def find_min_max_values(time_series):\n    if len(time_series) == 0:\n        raise ValueError(\"The time series is empty.\")\n    try:\n        min_value = min(time_series)\n        max_value = max(time_series)\n    except TypeError:\n        raise ValueError(\"The time series contains non-numerical values.\")\n    return min_value, max_value\n","entry_point":"find_min_max_values","input":"[1, 2, 3, 4, 5]","output":"(1, 5)"}
{"code":"def find_min_max_values(time_series):\n    if len(time_series) == 0:\n        raise ValueError(\"The time series is empty.\")\n    try:\n        min_value = min(time_series)\n        max_value = max(time_series)\n    except TypeError:\n        raise ValueError(\"The time series contains non-numerical values.\")\n    return min_value, max_value\n","entry_point":"find_min_max_values","input":"[-10, 0, 10, 20, 30]","output":"(-10, 30)"}
{"code":"def find_min_max_values(time_series):\n    if len(time_series) == 0:\n        raise ValueError(\"The time series is empty.\")\n    try:\n        min_value = min(time_series)\n        max_value = max(time_series)\n    except TypeError:\n        raise ValueError(\"The time series contains non-numerical values.\")\n    return min_value, max_value\n","entry_point":"find_min_max_values","input":"[5]","output":"(5, 5)"}
{"code":"def relatedArticles_count(encyclopedia):\n    counts = {}\n    for key, values in encyclopedia.items():\n        counts[key] = len(values)\n    return counts\n","entry_point":"relatedArticles_count","input":"encyclopedia","output":"{"}
{"code":"def relatedArticles_count(encyclopedia):\n    counts = {}\n    for key, values in encyclopedia.items():\n        counts[key] = len(values)\n    return counts\n","entry_point":"relatedArticles_count","input":"encyclopedia","output":"{"}
{"code":"def relatedArticles_count(encyclopedia):\n    counts = {}\n    for key, values in encyclopedia.items():\n        counts[key] = len(values)\n    return counts\n","entry_point":"relatedArticles_count","input":"encyclopedia","output":"{"}
{"code":"def find_largest_index(lst):\n    largest = max(lst)\n    index_of_largest = lst.index(largest)\n    return index_of_largest\n","entry_point":"find_largest_index","input":"[1, 5, 3, 9, 2]","output":"3"}
{"code":"def find_largest_index(lst):\n    largest = max(lst)\n    index_of_largest = lst.index(largest)\n    return index_of_largest\n","entry_point":"find_largest_index","input":"[10, 20, 30, 40, 50]","output":"4"}
{"code":"def find_largest_index(lst):\n    largest = max(lst)\n    index_of_largest = lst.index(largest)\n    return index_of_largest\n","entry_point":"find_largest_index","input":"[5, 5, 5, 5, 5]","output":"0"}
{"code":"def have_common_element(list1, list2):\n    set1 = set(list1)\n    set2 = set(list2)\n\n    return len(set1.intersection(set2)) > 0\n","entry_point":"have_common_element","input":"[1, 2, 3], [3, 4, 5]","output":"True"}
{"code":"def have_common_element(list1, list2):\n    set1 = set(list1)\n    set2 = set(list2)\n\n    return len(set1.intersection(set2)) > 0\n","entry_point":"have_common_element","input":"[7, 8, 9], [4, 5, 6]","output":"False"}
{"code":"def have_common_element(list1, list2):\n    set1 = set(list1)\n    set2 = set(list2)\n\n    return len(set1.intersection(set2)) > 0\n","entry_point":"have_common_element","input":"[1, 2, 3], [4, 5, 6]","output":"False"}
{"code":"from xml.etree.ElementTree import Element, tostring\n\n\ndef dict_to_xml(dictionary):\n    root = Element(\"data\")\n    for key, value in dictionary.items():\n        tag = Element(key)\n        tag.text = str(value)\n        root.append(tag)\n    return tostring(root, \"utf-8\").decode()\n","entry_point":"dict_to_xml","input":"{'name': 'John', 'age': 30, 'city': 'New York'}","output":"'<data><name>John<\/name><age>30<\/age><city>New York<\/city><\/data>'"}
{"code":"from xml.etree.ElementTree import Element, tostring\n\n\ndef dict_to_xml(dictionary):\n    root = Element(\"data\")\n    for key, value in dictionary.items():\n        tag = Element(key)\n        tag.text = str(value)\n        root.append(tag)\n    return tostring(root, \"utf-8\").decode()\n","entry_point":"dict_to_xml","input":"{'a': 1, 'b': 2, 'c': 3}","output":"'<data><a>1<\/a><b>2<\/b><c>3<\/c><\/data>'"}
{"code":"from xml.etree.ElementTree import Element, tostring\n\n\ndef dict_to_xml(dictionary):\n    root = Element(\"data\")\n    for key, value in dictionary.items():\n        tag = Element(key)\n        tag.text = str(value)\n        root.append(tag)\n    return tostring(root, \"utf-8\").decode()\n","entry_point":"dict_to_xml","input":"{'key1': 'value1', 'key2': 'value2'}","output":"'<data><key1>value1<\/key1><key2>value2<\/key2><\/data>'"}
{"code":"def searchInMatrix(matrix, target):\n    rows = len(matrix)\n    cols = len(matrix[0])\n    low = 0\n    high = rows * cols - 1\n    while low <= high:\n        mid = (low + high) \/\/ 2\n        mid_val = matrix[mid \/\/ cols][mid % cols]\n        if mid_val == target:\n            return True\n        elif mid_val < target:\n            low = mid + 1\n        else:\n            high = mid - 1\n    return False\n","entry_point":"searchInMatrix","input":"[[1, 3, 5], [7, 9, 11], [13, 15, 17]], 9","output":"True"}
{"code":"def searchInMatrix(matrix, target):\n    rows = len(matrix)\n    cols = len(matrix[0])\n    low = 0\n    high = rows * cols - 1\n    while low <= high:\n        mid = (low + high) \/\/ 2\n        mid_val = matrix[mid \/\/ cols][mid % cols]\n        if mid_val == target:\n            return True\n        elif mid_val < target:\n            low = mid + 1\n        else:\n            high = mid - 1\n    return False\n","entry_point":"searchInMatrix","input":"[[1, 3, 5], [7, 9, 11], [13, 15, 17]], 8","output":"False"}
{"code":"def searchInMatrix(matrix, target):\n    rows = len(matrix)\n    cols = len(matrix[0])\n    low = 0\n    high = rows * cols - 1\n    while low <= high:\n        mid = (low + high) \/\/ 2\n        mid_val = matrix[mid \/\/ cols][mid % cols]\n        if mid_val == target:\n            return True\n        elif mid_val < target:\n            low = mid + 1\n        else:\n            high = mid - 1\n    return False\n","entry_point":"searchInMatrix","input":"[[1, 3, 5], [7, 9, 11], [13, 15, 17]], 13","output":"True"}
{"code":"def sum_and_average_odd_elements(lst):\n    odd_sum = 0\n    odd_count = 0\n    for num in lst:\n        odd_sum += num * (num & 1)\n        odd_count += num & 1\n    average = odd_sum \/ odd_count if odd_count != 0 else 0\n    return average\n","entry_point":"sum_and_average_odd_elements","input":"[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]","output":"5.0"}
{"code":"def sum_and_average_odd_elements(lst):\n    odd_sum = 0\n    odd_count = 0\n    for num in lst:\n        odd_sum += num * (num & 1)\n        odd_count += num & 1\n    average = odd_sum \/ odd_count if odd_count != 0 else 0\n    return average\n","entry_point":"sum_and_average_odd_elements","input":"[11, 12, 13, 14, 15, 16, 17, 18, 19, 20]","output":"15.0"}
{"code":"def sum_and_average_odd_elements(lst):\n    odd_sum = 0\n    odd_count = 0\n    for num in lst:\n        odd_sum += num * (num & 1)\n        odd_count += num & 1\n    average = odd_sum \/ odd_count if odd_count != 0 else 0\n    return average\n","entry_point":"sum_and_average_odd_elements","input":"[21, 22, 23, 24, 25, 26, 27, 28, 29, 30]","output":"25.0"}
{"code":"def nth_largest_element(lst, n):\n    if not 1 <= n <= len(lst):\n        return None\n    sorted_lst = sorted(lst, reverse=True)\n    return sorted_lst[n - 1]\n","entry_point":"nth_largest_element","input":"[9, 4, 7, 2, 1, 5], 3","output":"5"}
{"code":"def nth_largest_element(lst, n):\n    if not 1 <= n <= len(lst):\n        return None\n    sorted_lst = sorted(lst, reverse=True)\n    return sorted_lst[n - 1]\n","entry_point":"nth_largest_element","input":"[2, 1, 1, 4, 3, 5], 5","output":"1"}
{"code":"def nth_largest_element(lst, n):\n    if not 1 <= n <= len(lst):\n        return None\n    sorted_lst = sorted(lst, reverse=True)\n    return sorted_lst[n - 1]\n","entry_point":"nth_largest_element","input":"[1, 2, 3, 4, 5], 1","output":"5"}
{"code":"from functools import partial\n\n\ndef sum_list_elements(lst):\n    return sum(lst)\n","entry_point":"sum_list_elements","input":"[1, 2, 3]","output":"6"}
{"code":"from functools import partial\n\n\ndef sum_list_elements(lst):\n    return sum(lst)\n","entry_point":"sum_list_elements","input":"[5, 5, 5, 5]","output":"20"}
{"code":"from functools import partial\n\n\ndef sum_list_elements(lst):\n    return sum(lst)\n","entry_point":"sum_list_elements","input":"[0, 0, 0, 0, 0]","output":"0"}
{"code":"def find_exclusive_elements(set_a, set_b):\n    exclusive_elements = (set_a - set_b) | (set_b - set_a)\n    return exclusive_elements\n","entry_point":"find_exclusive_elements","input":"{1, 2, 3}, {2, 3, 4}","output":"{1, 4}"}
{"code":"def find_exclusive_elements(set_a, set_b):\n    exclusive_elements = (set_a - set_b) | (set_b - set_a)\n    return exclusive_elements\n","entry_point":"find_exclusive_elements","input":"{'apple', 'banana', 'cherry'}, {'banana', 'cherry', 'date'}","output":"{'apple', 'date'}"}
{"code":"def find_exclusive_elements(set_a, set_b):\n    exclusive_elements = (set_a - set_b) | (set_b - set_a)\n    return exclusive_elements\n","entry_point":"find_exclusive_elements","input":"{1, 2, 3, 4}, {1, 2, 3, 4}","output":"set()"}
{"code":"def dec_to_ternary(n):\n    if n < 0:\n        n = abs(n)\n    if n == 0:\n        return \"0\"\n    elif n == 1:\n        return \"1\"\n    elif n == 2:\n        return \"2\"\n    else:\n        return dec_to_ternary(n \/\/ 3) + dec_to_ternary(n % 3)\n","entry_point":"dec_to_ternary","input":"10","output":"\"101\""}
{"code":"def dec_to_ternary(n):\n    if n < 0:\n        n = abs(n)\n    if n == 0:\n        return \"0\"\n    elif n == 1:\n        return \"1\"\n    elif n == 2:\n        return \"2\"\n    else:\n        return dec_to_ternary(n \/\/ 3) + dec_to_ternary(n % 3)\n","entry_point":"dec_to_ternary","input":"15","output":"\"120\""}
{"code":"def dec_to_ternary(n):\n    if n < 0:\n        n = abs(n)\n    if n == 0:\n        return \"0\"\n    elif n == 1:\n        return \"1\"\n    elif n == 2:\n        return \"2\"\n    else:\n        return dec_to_ternary(n \/\/ 3) + dec_to_ternary(n % 3)\n","entry_point":"dec_to_ternary","input":"-7","output":"\"21\""}
{"code":"def get_file_extensions(*file_names):\n    extensions = ()\n\n    for name in file_names:\n        name_parts = name.split(\".\")\n\n        extension = name_parts[-1]\n\n        extensions += (extension,)\n\n    return extensions\n","entry_point":"get_file_extensions","input":"'file1.txt', 'file2.py', 'file3.jpg', 'file4.docx'","output":"('txt', 'py', 'jpg', 'docx')"}
{"code":"def get_file_extensions(*file_names):\n    extensions = ()\n\n    for name in file_names:\n        name_parts = name.split(\".\")\n\n        extension = name_parts[-1]\n\n        extensions += (extension,)\n\n    return extensions\n","entry_point":"get_file_extensions","input":"'file5.csv', 'file6.pdf'","output":"('csv', 'pdf')"}
{"code":"def get_file_extensions(*file_names):\n    extensions = ()\n\n    for name in file_names:\n        name_parts = name.split(\".\")\n\n        extension = name_parts[-1]\n\n        extensions += (extension,)\n\n    return extensions\n","entry_point":"get_file_extensions","input":"'file7', 'file8'","output":"('file7', 'file8')"}
{"code":"def ageClassifier(age):\n    if age < 13:\n        return \"child\"\n    elif 13 <= age <= 19:\n        return \"teenager\"\n    elif 20 <= age <= 64:\n        return \"adult\"\n    else:\n        return \"senior citizen\"\n","entry_point":"ageClassifier","input":"5","output":"\"child\""}
{"code":"def ageClassifier(age):\n    if age < 13:\n        return \"child\"\n    elif 13 <= age <= 19:\n        return \"teenager\"\n    elif 20 <= age <= 64:\n        return \"adult\"\n    else:\n        return \"senior citizen\"\n","entry_point":"ageClassifier","input":"16","output":"\"teenager\""}
{"code":"def ageClassifier(age):\n    if age < 13:\n        return \"child\"\n    elif 13 <= age <= 19:\n        return \"teenager\"\n    elif 20 <= age <= 64:\n        return \"adult\"\n    else:\n        return \"senior citizen\"\n","entry_point":"ageClassifier","input":"30","output":"\"adult\""}
{"code":"def calculate_grade_and_gpa(numerical_grade):\n    if numerical_grade >= 90:\n        letter_grade = \"A\"\n        gpa = 4.0\n    elif 80 <= numerical_grade < 90:\n        letter_grade = \"B\"\n        gpa = 3.0 + (numerical_grade - 80) \/ 10\n    elif 70 <= numerical_grade < 80:\n        letter_grade = \"C\"\n        gpa = 2.0 + (numerical_grade - 70) \/ 10\n    elif 60 <= numerical_grade < 70:\n        letter_grade = \"D\"\n        gpa = 1.0 + (numerical_grade - 60) \/ 10\n    else:\n        letter_grade = \"F\"\n        gpa = 0.0\n    return letter_grade, round(gpa, 2)\n","entry_point":"calculate_grade_and_gpa","input":"95","output":"(\"A\", 4.0)"}
{"code":"def calculate_grade_and_gpa(numerical_grade):\n    if numerical_grade >= 90:\n        letter_grade = \"A\"\n        gpa = 4.0\n    elif 80 <= numerical_grade < 90:\n        letter_grade = \"B\"\n        gpa = 3.0 + (numerical_grade - 80) \/ 10\n    elif 70 <= numerical_grade < 80:\n        letter_grade = \"C\"\n        gpa = 2.0 + (numerical_grade - 70) \/ 10\n    elif 60 <= numerical_grade < 70:\n        letter_grade = \"D\"\n        gpa = 1.0 + (numerical_grade - 60) \/ 10\n    else:\n        letter_grade = \"F\"\n        gpa = 0.0\n    return letter_grade, round(gpa, 2)\n","entry_point":"calculate_grade_and_gpa","input":"85","output":"(\"B\", 3.5)"}
{"code":"def calculate_grade_and_gpa(numerical_grade):\n    if numerical_grade >= 90:\n        letter_grade = \"A\"\n        gpa = 4.0\n    elif 80 <= numerical_grade < 90:\n        letter_grade = \"B\"\n        gpa = 3.0 + (numerical_grade - 80) \/ 10\n    elif 70 <= numerical_grade < 80:\n        letter_grade = \"C\"\n        gpa = 2.0 + (numerical_grade - 70) \/ 10\n    elif 60 <= numerical_grade < 70:\n        letter_grade = \"D\"\n        gpa = 1.0 + (numerical_grade - 60) \/ 10\n    else:\n        letter_grade = \"F\"\n        gpa = 0.0\n    return letter_grade, round(gpa, 2)\n","entry_point":"calculate_grade_and_gpa","input":"65","output":"(\"D\", 1.5)"}
{"code":"def total_price(listing):\n    total_price = 0\n    for entry in listing:\n        item_price = entry[\"price\"]\n        total_price += item_price\n    return total_price\n","entry_point":"total_price","input":"[{\"item\": \"apple\", \"price\": 2}, {\"item\": \"banana\", \"price\": 1}]","output":"3"}
{"code":"def total_price(listing):\n    total_price = 0\n    for entry in listing:\n        item_price = entry[\"price\"]\n        total_price += item_price\n    return total_price\n","entry_point":"total_price","input":"[{\"item\": \"milk\", \"price\": 3}, {\"item\": \"bread\", \"price\": 2}, {\"item\": \"eggs\", \"price\": 1}]","output":"6"}
{"code":"def total_price(listing):\n    total_price = 0\n    for entry in listing:\n        item_price = entry[\"price\"]\n        total_price += item_price\n    return total_price\n","entry_point":"total_price","input":"[{\"item\": \"chocolate\", \"price\": 5}, {\"item\": \"chips\", \"price\": 4}, {\"item\": \"soda\", \"price\": 2}]","output":"11"}
{"code":"def count_vowels_in_palindromes(palindrome_tuples):\n    vowels = {\"a\", \"e\", \"i\", \"o\", \"u\"}\n    result = {}\n    for word in palindrome_tuples:\n        if word == word[::-1]:\n            vowel_count = sum(1 for char in word if char in vowels)\n            result[word] = vowel_count\n\n    return result\n","entry_point":"count_vowels_in_palindromes","input":"(\"racecar\", \"level\", \"deed\"","output":"{\"racecar\": 3, \"level\": 2, \"deed\": 2}"}
{"code":"def count_vowels_in_palindromes(palindrome_tuples):\n    vowels = {\"a\", \"e\", \"i\", \"o\", \"u\"}\n    result = {}\n    for word in palindrome_tuples:\n        if word == word[::-1]:\n            vowel_count = sum(1 for char in word if char in vowels)\n            result[word] = vowel_count\n\n    return result\n","entry_point":"count_vowels_in_palindromes","input":"(\"madam\", \"noon\", \"radar\"","output":"{\"madam\": 2, \"noon\": 2, \"radar\": 2}"}
{"code":"def count_vowels_in_palindromes(palindrome_tuples):\n    vowels = {\"a\", \"e\", \"i\", \"o\", \"u\"}\n    result = {}\n    for word in palindrome_tuples:\n        if word == word[::-1]:\n            vowel_count = sum(1 for char in word if char in vowels)\n            result[word] = vowel_count\n\n    return result\n","entry_point":"count_vowels_in_palindromes","input":"(\"stats\", \"wow\", \"pop\"","output":"{\"stats\": 1, \"wow\": 1, \"pop\": 1}"}
{"code":"def stringmethod(s):\n    if s.islower():\n        return s.upper()\n    elif s.isupper():\n        return s.lower()\n    else:\n        result = \"\"\n        for i, char in enumerate(s):\n            if i % 2 == 0:\n                result += char.upper()\n            else:\n                result += char.lower()\n        return result\n","entry_point":"stringmethod","input":"\"hello\"","output":"\"HELLO\""}
{"code":"def stringmethod(s):\n    if s.islower():\n        return s.upper()\n    elif s.isupper():\n        return s.lower()\n    else:\n        result = \"\"\n        for i, char in enumerate(s):\n            if i % 2 == 0:\n                result += char.upper()\n            else:\n                result += char.lower()\n        return result\n","entry_point":"stringmethod","input":"\"WORLD\"","output":"\"world\""}
{"code":"def stringmethod(s):\n    if s.islower():\n        return s.upper()\n    elif s.isupper():\n        return s.lower()\n    else:\n        result = \"\"\n        for i, char in enumerate(s):\n            if i % 2 == 0:\n                result += char.upper()\n            else:\n                result += char.lower()\n        return result\n","entry_point":"stringmethod","input":"\"Python\"","output":"\"PyThOn\""}
{"code":"def has_zero_sum(arr):\n    seen_numbers = set()\n    for num in arr:\n        if -num in seen_numbers:\n            return True\n        seen_numbers.add(num)\n    return False\n","entry_point":"has_zero_sum","input":"[1, 2, 3, -3]","output":"True"}
{"code":"def has_zero_sum(arr):\n    seen_numbers = set()\n    for num in arr:\n        if -num in seen_numbers:\n            return True\n        seen_numbers.add(num)\n    return False\n","entry_point":"has_zero_sum","input":"[4, 5, 6, 7]","output":"False"}
{"code":"def has_zero_sum(arr):\n    seen_numbers = set()\n    for num in arr:\n        if -num in seen_numbers:\n            return True\n        seen_numbers.add(num)\n    return False\n","entry_point":"has_zero_sum","input":"[0, 0, 0, 0]","output":"True"}
{"code":"def extract_latest_versions(dependencies):\n    latest_versions = {}\n    for package, version in dependencies:\n        if package in latest_versions:\n            if int(version.split(\"_\")[0]) > int(latest_versions[package].split(\"_\")[0]):\n                latest_versions[package] = version\n        else:\n            latest_versions[package] = version\n    return latest_versions\n","entry_point":"extract_latest_versions","input":"[('package1', '0001_auto_20220101_1200'","output":"{'package1': '0003_auto_20220103_1400', 'package2': '0002_auto_20220102_1300'}"}
{"code":"def extract_latest_versions(dependencies):\n    latest_versions = {}\n    for package, version in dependencies:\n        if package in latest_versions:\n            if int(version.split(\"_\")[0]) > int(latest_versions[package].split(\"_\")[0]):\n                latest_versions[package] = version\n        else:\n            latest_versions[package] = version\n    return latest_versions\n","entry_point":"extract_latest_versions","input":"[('package1', '0001_auto_20220101_1200'","output":"{'package1': '0001_auto_20220101_1200', 'package2': '0002_auto_20220102_1300', 'package3': '0003_auto_20220103_1400'}"}
{"code":"def extract_latest_versions(dependencies):\n    latest_versions = {}\n    for package, version in dependencies:\n        if package in latest_versions:\n            if int(version.split(\"_\")[0]) > int(latest_versions[package].split(\"_\")[0]):\n                latest_versions[package] = version\n        else:\n            latest_versions[package] = version\n    return latest_versions\n","entry_point":"extract_latest_versions","input":"[('package1', '0001_auto_20220101_1200'","output":"{'package1': '0003_auto_20220103_1400'}"}
{"code":"def categorize_causes_of_death(causes):\n    categorized_causes = {}\n    for cause in causes:\n        action, result = cause.split(\" \", 1)\n        action = action.rstrip(\".,\")\n        if action in categorized_causes:\n            categorized_causes[action].append(result)\n        else:\n            categorized_causes[action] = [result]\n    return categorized_causes\n","entry_point":"categorize_causes_of_death","input":"[\"Swimming drowned\", \"Eating poisoned\", \"Sleeping suffocated\"]","output":"{'Swimming': ['drowned'], 'Eating': ['poisoned'], 'Sleeping': ['suffocated']}"}
{"code":"def categorize_causes_of_death(causes):\n    categorized_causes = {}\n    for cause in causes:\n        action, result = cause.split(\" \", 1)\n        action = action.rstrip(\".,\")\n        if action in categorized_causes:\n            categorized_causes[action].append(result)\n        else:\n            categorized_causes[action] = [result]\n    return categorized_causes\n","entry_point":"categorize_causes_of_death","input":"[\"Running fell\", \"Reading electrocuted\", \"Cooking burned\"]","output":"{'Running': ['fell'], 'Reading': ['electrocuted'], 'Cooking': ['burned']}"}
{"code":"def categorize_causes_of_death(causes):\n    categorized_causes = {}\n    for cause in causes:\n        action, result = cause.split(\" \", 1)\n        action = action.rstrip(\".,\")\n        if action in categorized_causes:\n            categorized_causes[action].append(result)\n        else:\n            categorized_causes[action] = [result]\n    return categorized_causes\n","entry_point":"categorize_causes_of_death","input":"[\"Dancing slipped\", \"Driving crashed\", \"Playing electrocuted\"]","output":"{'Dancing': ['slipped'], 'Driving': ['crashed'], 'Playing': ['electrocuted']}"}
{"code":"def generate_code_name(name):\n    return name.lower().replace(\" \", \"-\")\n","entry_point":"generate_code_name","input":"\"John Doe\"","output":"\"john-doe\""}
{"code":"def generate_code_name(name):\n    return name.lower().replace(\" \", \"-\")\n","entry_point":"generate_code_name","input":"\"Alice Smith\"","output":"\"alice-smith\""}
{"code":"def generate_code_name(name):\n    return name.lower().replace(\" \", \"-\")\n","entry_point":"generate_code_name","input":"\"Bob Johnson Jr.\"","output":"\"bob-johnson-jr.\""}
{"code":"def detect_non_ascii(text):\n    non_ascii_chars = [char for char in text if ord(char) > 128]\n    return non_ascii_chars\n","entry_point":"detect_non_ascii","input":"\"Hello, World!\"","output":"[]"}
{"code":"def detect_non_ascii(text):\n    non_ascii_chars = [char for char in text if ord(char) > 128]\n    return non_ascii_chars\n","entry_point":"detect_non_ascii","input":"\"Caf\u00e9\"","output":"['\u00e9']"}
{"code":"def detect_non_ascii(text):\n    non_ascii_chars = [char for char in text if ord(char) > 128]\n    return non_ascii_chars\n","entry_point":"detect_non_ascii","input":"\"12345\"","output":"[]"}
{"code":"def remove_punctuations(string):\n    punc_list = [\",\", \".\", \":\", \";\", \"-\", \"!\", \"?\"]\n    for punc in punc_list:\n        string = string.replace(punc, \"\")\n    return string\n","entry_point":"remove_punctuations","input":"\"Hello, World!\"","output":"\"Hello World\""}
{"code":"def remove_punctuations(string):\n    punc_list = [\",\", \".\", \":\", \";\", \"-\", \"!\", \"?\"]\n    for punc in punc_list:\n        string = string.replace(punc, \"\")\n    return string\n","entry_point":"remove_punctuations","input":"\"How are you?\"","output":"\"How are you\""}
{"code":"def remove_punctuations(string):\n    punc_list = [\",\", \".\", \":\", \";\", \"-\", \"!\", \"?\"]\n    for punc in punc_list:\n        string = string.replace(punc, \"\")\n    return string\n","entry_point":"remove_punctuations","input":"\"No punctuation here\"","output":"\"No punctuation here\""}
{"code":"def raise_power(num_list, exp):\n    output = []\n    for n in num_list:\n        try:\n            output.append(n**exp)\n        except TypeError:\n            print(f\"'{n}' is not a number.\")\n    return output\n","entry_point":"raise_power","input":"[2, 3, 4], 2","output":"[4, 9, 16]"}
{"code":"def raise_power(num_list, exp):\n    output = []\n    for n in num_list:\n        try:\n            output.append(n**exp)\n        except TypeError:\n            print(f\"'{n}' is not a number.\")\n    return output\n","entry_point":"raise_power","input":"[5, 6, 7], 3","output":"[125, 216, 343]"}
{"code":"def raise_power(num_list, exp):\n    output = []\n    for n in num_list:\n        try:\n            output.append(n**exp)\n        except TypeError:\n            print(f\"'{n}' is not a number.\")\n    return output\n","entry_point":"raise_power","input":"[1, 2, 3], 0","output":"[1, 1, 1]"}
{"code":"def print_min_values(grid):\n    for row in grid:\n        print(min(row))\n","entry_point":"print_min_values","input":"[[1, 2, 3], [4, 5, 6], [7, 8, 9]]","output":"None"}
{"code":"def print_min_values(grid):\n    for row in grid:\n        print(min(row))\n","entry_point":"print_min_values","input":"[[10, 5, 8], [3, 12, 6], [9, 7, 11]]","output":"None"}
{"code":"def print_min_values(grid):\n    for row in grid:\n        print(min(row))\n","entry_point":"print_min_values","input":"[[5, 3, 9], [2, 7, 4], [8, 6, 1]]","output":"None"}
{"code":"def print_thank_you(n, current_num=0):\n    if not isinstance(n, int) or n <= 0:\n        print(\"Please enter a positive integer.\")\n    elif n == 0:\n        return\n    else:\n        if current_num % 2 == 0:\n            print(\"Thank you\")\n            print_thank_you(n - 1, current_num + 1)\n        else:\n            print_thank_you(n, current_num + 1)\n","entry_point":"print_thank_you","input":"3","output":"None"}
{"code":"def print_thank_you(n, current_num=0):\n    if not isinstance(n, int) or n <= 0:\n        print(\"Please enter a positive integer.\")\n    elif n == 0:\n        return\n    else:\n        if current_num % 2 == 0:\n            print(\"Thank you\")\n            print_thank_you(n - 1, current_num + 1)\n        else:\n            print_thank_you(n, current_num + 1)\n","entry_point":"print_thank_you","input":"5","output":"None"}
{"code":"def print_thank_you(n, current_num=0):\n    if not isinstance(n, int) or n <= 0:\n        print(\"Please enter a positive integer.\")\n    elif n == 0:\n        return\n    else:\n        if current_num % 2 == 0:\n            print(\"Thank you\")\n            print_thank_you(n - 1, current_num + 1)\n        else:\n            print_thank_you(n, current_num + 1)\n","entry_point":"print_thank_you","input":"0","output":"None"}
{"code":"def count_consecutive_occurrences(lst, element):\n    count = 0\n    result = 0\n    for item in lst:\n        if item == element:\n            count += 1\n        else:\n            count = 0\n        if count > result:\n            result = count\n    return result\n","entry_point":"count_consecutive_occurrences","input":"[1, 2, 2, 3, 3, 3, 4, 4, 4, 4], 3","output":"3"}
{"code":"def count_consecutive_occurrences(lst, element):\n    count = 0\n    result = 0\n    for item in lst:\n        if item == element:\n            count += 1\n        else:\n            count = 0\n        if count > result:\n            result = count\n    return result\n","entry_point":"count_consecutive_occurrences","input":"[5, 5, 5, 5, 5], 5","output":"5"}
{"code":"def count_consecutive_occurrences(lst, element):\n    count = 0\n    result = 0\n    for item in lst:\n        if item == element:\n            count += 1\n        else:\n            count = 0\n        if count > result:\n            result = count\n    return result\n","entry_point":"count_consecutive_occurrences","input":"[1, 1, 2, 2, 2, 2, 3, 3], 2","output":"4"}
{"code":"from functools import partial\n\n\ndef check_repdigit(num, base=10):\n    digits = set()\n    while num > 0:\n        digit = num % base\n        digits.add(digit)\n        num \/\/= base\n    return len(digits) == 1\n","entry_point":"check_repdigit","input":"1111","output":"True"}
{"code":"from functools import partial\n\n\ndef check_repdigit(num, base=10):\n    digits = set()\n    while num > 0:\n        digit = num % base\n        digits.add(digit)\n        num \/\/= base\n    return len(digits) == 1\n","entry_point":"check_repdigit","input":"222","output":"True"}
{"code":"from functools import partial\n\n\ndef check_repdigit(num, base=10):\n    digits = set()\n    while num > 0:\n        digit = num % base\n        digits.add(digit)\n        num \/\/= base\n    return len(digits) == 1\n","entry_point":"check_repdigit","input":"1234","output":"False"}
{"code":"def remove_vowels_recursive(s):\n    if len(s) == 0:\n        return \"\"\n    elif s[0].lower() in \"aeiou\":\n        return remove_vowels_recursive(s[1:])\n    else:\n        return s[0] + remove_vowels_recursive(s[1:])\n","entry_point":"remove_vowels_recursive","input":"\"Hello\"","output":"\"Hll\""}
{"code":"def remove_vowels_recursive(s):\n    if len(s) == 0:\n        return \"\"\n    elif s[0].lower() in \"aeiou\":\n        return remove_vowels_recursive(s[1:])\n    else:\n        return s[0] + remove_vowels_recursive(s[1:])\n","entry_point":"remove_vowels_recursive","input":"\"Python\"","output":"\"Pythn\""}
{"code":"def remove_vowels_recursive(s):\n    if len(s) == 0:\n        return \"\"\n    elif s[0].lower() in \"aeiou\":\n        return remove_vowels_recursive(s[1:])\n    else:\n        return s[0] + remove_vowels_recursive(s[1:])\n","entry_point":"remove_vowels_recursive","input":"\"algorithm\"","output":"\"lgrthm\""}
{"code":"def generate_cli_help(options):\n    help_message = \"Usage: app_name [OPTIONS]\\n\\nOptions:\\n\"\n    for option in options:\n        help_message += f\"  {option[0]:<12}{option[1]}\\n\"\n    return help_message\n","entry_point":"generate_cli_help","input":"[(\"h\", \"Display help message\"","output":"\"Usage: app_name [OPTIONS]\\n\\nOptions:\\n  h           Display help message\\n  v           Enable verbose mode\\n\""}
{"code":"def generate_cli_help(options):\n    help_message = \"Usage: app_name [OPTIONS]\\n\\nOptions:\\n\"\n    for option in options:\n        help_message += f\"  {option[0]:<12}{option[1]}\\n\"\n    return help_message\n","entry_point":"generate_cli_help","input":"[]","output":"\"Usage: app_name [OPTIONS]\\n\\nOptions:\\n\""}
{"code":"def generate_cli_help(options):\n    help_message = \"Usage: app_name [OPTIONS]\\n\\nOptions:\\n\"\n    for option in options:\n        help_message += f\"  {option[0]:<12}{option[1]}\\n\"\n    return help_message\n","entry_point":"generate_cli_help","input":"[(\"o\", \"Specify output file\"","output":"\"Usage: app_name [OPTIONS]\\n\\nOptions:\\n  o           Specify output file\\n  f           Force overwrite\\n\""}
{"code":"def get_first_character(input_string):\n    return input_string[0]\n","entry_point":"get_first_character","input":"\"hello\"","output":"\"h\""}
{"code":"def get_first_character(input_string):\n    return input_string[0]\n","entry_point":"get_first_character","input":"\"apple\"","output":"\"a\""}
{"code":"def get_first_character(input_string):\n    return input_string[0]\n","entry_point":"get_first_character","input":"\"python\"","output":"\"p\""}
{"code":"def count_val(Val):\n    result = {}\n    for i in Val:\n        if i in result:\n            result[i] += 1\n        else:\n            result[i] = 1\n    return result\n","entry_point":"count_val","input":"[1, 2, 2, 3, 3, 3, 4, 4, 4, 4]","output":"{1: 1, 2: 2, 3: 3, 4: 4}"}
{"code":"def count_val(Val):\n    result = {}\n    for i in Val:\n        if i in result:\n            result[i] += 1\n        else:\n            result[i] = 1\n    return result\n","entry_point":"count_val","input":"[5, 5, 5, 5, 5]","output":"{5: 5}"}
{"code":"def count_val(Val):\n    result = {}\n    for i in Val:\n        if i in result:\n            result[i] += 1\n        else:\n            result[i] = 1\n    return result\n","entry_point":"count_val","input":"[1, 2, 3, 4]","output":"{1: 1, 2: 1, 3: 1, 4: 1}"}
{"code":"def invert_bitset(sample_bitset):\n    for i in range(len(sample_bitset)):\n        sample_bitset[i] = not sample_bitset[i]\n    return sample_bitset\n","entry_point":"invert_bitset","input":"[0, 1, 1, 0]","output":"[1, 0, 0, 1]"}
{"code":"def invert_bitset(sample_bitset):\n    for i in range(len(sample_bitset)):\n        sample_bitset[i] = not sample_bitset[i]\n    return sample_bitset\n","entry_point":"invert_bitset","input":"[1, 0, 1]","output":"[0, 1, 0]"}
{"code":"def invert_bitset(sample_bitset):\n    for i in range(len(sample_bitset)):\n        sample_bitset[i] = not sample_bitset[i]\n    return sample_bitset\n","entry_point":"invert_bitset","input":"[1, 1, 1, 1]","output":"[0, 0, 0, 0]"}
{"code":"def is_vowel_string(s):\n    vowels = [\"a\", \"e\", \"i\", \"o\", \"u\", \"A\", \"E\", \"I\", \"O\", \"U\"]\n\n    s_list = list(s)\n\n    for char in s_list:\n        if char not in vowels:\n            return False\n\n    return True\n","entry_point":"is_vowel_string","input":"\"aeiou\"","output":"True"}
{"code":"def is_vowel_string(s):\n    vowels = [\"a\", \"e\", \"i\", \"o\", \"u\", \"A\", \"E\", \"I\", \"O\", \"U\"]\n\n    s_list = list(s)\n\n    for char in s_list:\n        if char not in vowels:\n            return False\n\n    return True\n","entry_point":"is_vowel_string","input":"\"hello\"","output":"False"}
{"code":"def is_vowel_string(s):\n    vowels = [\"a\", \"e\", \"i\", \"o\", \"u\", \"A\", \"E\", \"I\", \"O\", \"U\"]\n\n    s_list = list(s)\n\n    for char in s_list:\n        if char not in vowels:\n            return False\n\n    return True\n","entry_point":"is_vowel_string","input":"\"AEIOU\"","output":"True"}
{"code":"def count_subsequence(sequence, subsequence):\n    return sequence.count(subsequence)\n","entry_point":"count_subsequence","input":"\"ababababab\", \"ab\"","output":"5"}
{"code":"def count_subsequence(sequence, subsequence):\n    return sequence.count(subsequence)\n","entry_point":"count_subsequence","input":"\"hellohellohello\", \"hello\"","output":"3"}
{"code":"def count_subsequence(sequence, subsequence):\n    return sequence.count(subsequence)\n","entry_point":"count_subsequence","input":"\"programmingprogramming\", \"gram\"","output":"2"}
{"code":"def dividir(h, t):\n    if t == 0:\n        raise ValueError(\"Division by zero is not allowed\")\n\n    result = 0\n\n    negative = (h < 0) ^ (t < 0)\n\n    h = abs(h)\n    t = abs(t)\n\n    while h >= t:\n        h -= t\n        result += 1\n\n    if negative:\n        result = -result\n\n    return result\n","entry_point":"dividir","input":"10, 2","output":"5"}
{"code":"def dividir(h, t):\n    if t == 0:\n        raise ValueError(\"Division by zero is not allowed\")\n\n    result = 0\n\n    negative = (h < 0) ^ (t < 0)\n\n    h = abs(h)\n    t = abs(t)\n\n    while h >= t:\n        h -= t\n        result += 1\n\n    if negative:\n        result = -result\n\n    return result\n","entry_point":"dividir","input":"20, 4","output":"5"}
{"code":"def dividir(h, t):\n    if t == 0:\n        raise ValueError(\"Division by zero is not allowed\")\n\n    result = 0\n\n    negative = (h < 0) ^ (t < 0)\n\n    h = abs(h)\n    t = abs(t)\n\n    while h >= t:\n        h -= t\n        result += 1\n\n    if negative:\n        result = -result\n\n    return result\n","entry_point":"dividir","input":"15, 3","output":"5"}
{"code":"def sum_odd(input_list):\n    total = 0\n    for num in input_list:\n        if num % 2 != 0:\n            total += num\n    return total\n","entry_point":"sum_odd","input":"[1, 2, 3, 4, 5]","output":"9"}
{"code":"def sum_odd(input_list):\n    total = 0\n    for num in input_list:\n        if num % 2 != 0:\n            total += num\n    return total\n","entry_point":"sum_odd","input":"[10, 20, 30, 40, 50]","output":"0"}
{"code":"def sum_odd(input_list):\n    total = 0\n    for num in input_list:\n        if num % 2 != 0:\n            total += num\n    return total\n","entry_point":"sum_odd","input":"[11, 22, 33, 44, 55]","output":"99"}
{"code":"def count_consonants(string=\"\"):\n    vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n\n    string = string.lower()\n\n    count = 0\n\n    for char in string:\n        if char.isalpha() and char not in vowels:\n            count += 1\n\n    return count\n","entry_point":"count_consonants","input":"\"Hello World\"","output":"7"}
{"code":"def count_consonants(string=\"\"):\n    vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n\n    string = string.lower()\n\n    count = 0\n\n    for char in string:\n        if char.isalpha() and char not in vowels:\n            count += 1\n\n    return count\n","entry_point":"count_consonants","input":"\"Python Programming\"","output":"13"}
{"code":"def count_consonants(string=\"\"):\n    vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n\n    string = string.lower()\n\n    count = 0\n\n    for char in string:\n        if char.isalpha() and char not in vowels:\n            count += 1\n\n    return count\n","entry_point":"count_consonants","input":"\"AEIOUaeiou\"","output":"0"}
{"code":"def simulate_electron_behavior(grid_energies, ados, dope, dos_grid_size):\n    n_electrons = 0.0\n    for i in range(dos_grid_size - 1):\n        if grid_energies[i] * grid_energies[i + 1] <= 0.0:\n            n_electrons = ados[i] - grid_energies[i] \/ (\n                grid_energies[i + 1] - grid_energies[i]\n            ) * (ados[i + 1] - ados[i])\n            break\n    if dope != 0.0:\n        n_electrons += dope\n        for i in range(dos_grid_size - 1):\n            if (ados[i] - n_electrons) * (ados[i + 1] - n_electrons) < 0.0:\n                if i == (dos_grid_size - 1) or ados[i] == ados[i + 1]:\n                    raise ValueError(\"Too much doping\")\n    return n_electrons\n","entry_point":"simulate_electron_behavior","input":"[1, 2, 3, 4, 5], [10, 20, 30, 40, 50], 0, 5","output":"0.0"}
{"code":"def simulate_electron_behavior(grid_energies, ados, dope, dos_grid_size):\n    n_electrons = 0.0\n    for i in range(dos_grid_size - 1):\n        if grid_energies[i] * grid_energies[i + 1] <= 0.0:\n            n_electrons = ados[i] - grid_energies[i] \/ (\n                grid_energies[i + 1] - grid_energies[i]\n            ) * (ados[i + 1] - ados[i])\n            break\n    if dope != 0.0:\n        n_electrons += dope\n        for i in range(dos_grid_size - 1):\n            if (ados[i] - n_electrons) * (ados[i + 1] - n_electrons) < 0.0:\n                if i == (dos_grid_size - 1) or ados[i] == ados[i + 1]:\n                    raise ValueError(\"Too much doping\")\n    return n_electrons\n","entry_point":"simulate_electron_behavior","input":"[-1, -2, -3, -4, -5], [-10, -20, -30, -40, -50], 0, 5","output":"0.0"}
{"code":"def simulate_electron_behavior(grid_energies, ados, dope, dos_grid_size):\n    n_electrons = 0.0\n    for i in range(dos_grid_size - 1):\n        if grid_energies[i] * grid_energies[i + 1] <= 0.0:\n            n_electrons = ados[i] - grid_energies[i] \/ (\n                grid_energies[i + 1] - grid_energies[i]\n            ) * (ados[i + 1] - ados[i])\n            break\n    if dope != 0.0:\n        n_electrons += dope\n        for i in range(dos_grid_size - 1):\n            if (ados[i] - n_electrons) * (ados[i + 1] - n_electrons) < 0.0:\n                if i == (dos_grid_size - 1) or ados[i] == ados[i + 1]:\n                    raise ValueError(\"Too much doping\")\n    return n_electrons\n","entry_point":"simulate_electron_behavior","input":"[1, 2, 3, 4, 5], [10, 20, 30, 40, 50], 10, 5","output":"10.0"}
{"code":"def remove_duplicates_from_tuple(tuple_to_process):\n    return tuple(set(tuple_to_process))\n","entry_point":"remove_duplicates_from_tuple","input":"(1, 2, 3, 2, 1","output":"(1, 2, 3)"}
{"code":"def remove_duplicates_from_tuple(tuple_to_process):\n    return tuple(set(tuple_to_process))\n","entry_point":"remove_duplicates_from_tuple","input":"(4, 4, 4, 4","output":"(4,)"}
{"code":"def remove_duplicates_from_tuple(tuple_to_process):\n    return tuple(set(tuple_to_process))\n","entry_point":"remove_duplicates_from_tuple","input":"(1, 2, 3, 4","output":"(1, 2, 3, 4)"}
{"code":"def maximize_consecutive_difference(arr):\n    arr.sort()\n    rearranged_arr = []\n    left = 0\n    right = len(arr) - 1\n    while left < right:\n        rearranged_arr.append(arr[right])\n        right -= 1\n        rearranged_arr.append(arr[left])\n        left += 1\n    if left == right:\n        rearranged_arr.append(arr[left])\n    return rearranged_arr\n","entry_point":"maximize_consecutive_difference","input":"[1, 2, 3, 4, 5]","output":"[5, 1, 4, 2, 3]"}
{"code":"def maximize_consecutive_difference(arr):\n    arr.sort()\n    rearranged_arr = []\n    left = 0\n    right = len(arr) - 1\n    while left < right:\n        rearranged_arr.append(arr[right])\n        right -= 1\n        rearranged_arr.append(arr[left])\n        left += 1\n    if left == right:\n        rearranged_arr.append(arr[left])\n    return rearranged_arr\n","entry_point":"maximize_consecutive_difference","input":"[5, 4, 3, 2, 1]","output":"[5, 1, 4, 2, 3]"}
{"code":"def maximize_consecutive_difference(arr):\n    arr.sort()\n    rearranged_arr = []\n    left = 0\n    right = len(arr) - 1\n    while left < right:\n        rearranged_arr.append(arr[right])\n        right -= 1\n        rearranged_arr.append(arr[left])\n        left += 1\n    if left == right:\n        rearranged_arr.append(arr[left])\n    return rearranged_arr\n","entry_point":"maximize_consecutive_difference","input":"[10, 20, 30, 40, 50]","output":"[50, 10, 40, 20, 30]"}
{"code":"def create_color_dictionary(color_list):\n    color_dict = {}\n    color_names = set()\n    color_values = set()\n\n    for color_name, color_value in color_list:\n        if color_name in color_names:\n            raise ValueError(f\"Duplicate color name: {color_name}\")\n        if color_value in color_values:\n            raise ValueError(f\"Duplicate color value: {color_value}\")\n\n        color_dict[color_name] = color_value\n        color_names.add(color_name)\n        color_values.add(color_value)\n\n    return color_dict\n","entry_point":"create_color_dictionary","input":"[('red', 1","output":"{'red': 1, 'blue': 2, 'green': 3}"}
{"code":"def create_color_dictionary(color_list):\n    color_dict = {}\n    color_names = set()\n    color_values = set()\n\n    for color_name, color_value in color_list:\n        if color_name in color_names:\n            raise ValueError(f\"Duplicate color name: {color_name}\")\n        if color_value in color_values:\n            raise ValueError(f\"Duplicate color value: {color_value}\")\n\n        color_dict[color_name] = color_value\n        color_names.add(color_name)\n        color_values.add(color_value)\n\n    return color_dict\n","entry_point":"create_color_dictionary","input":"[('black', 5","output":"{'black': 5, 'white': 6}"}
{"code":"def create_color_dictionary(color_list):\n    color_dict = {}\n    color_names = set()\n    color_values = set()\n\n    for color_name, color_value in color_list:\n        if color_name in color_names:\n            raise ValueError(f\"Duplicate color name: {color_name}\")\n        if color_value in color_values:\n            raise ValueError(f\"Duplicate color value: {color_value}\")\n\n        color_dict[color_name] = color_value\n        color_names.add(color_name)\n        color_values.add(color_value)\n\n    return color_dict\n","entry_point":"create_color_dictionary","input":"[('yellow', 4","output":"{'yellow': 4}"}
{"code":"def check_balanced_parentheses(string):\n    stack = []\n    for char in string:\n        if char == \"(\":\n            stack.append(\"(\")\n        elif char == \")\":\n            if len(stack) == 0:\n                return False\n            else:\n                stack.pop()\n    return stack == []\n","entry_point":"check_balanced_parentheses","input":"\"(((","output":"True"}
{"code":"def check_balanced_parentheses(string):\n    stack = []\n    for char in string:\n        if char == \"(\":\n            stack.append(\"(\")\n        elif char == \")\":\n            if len(stack) == 0:\n                return False\n            else:\n                stack.pop()\n    return stack == []\n","entry_point":"check_balanced_parentheses","input":"\"(","output":"True"}
{"code":"def check_balanced_parentheses(string):\n    stack = []\n    for char in string:\n        if char == \"(\":\n            stack.append(\"(\")\n        elif char == \")\":\n            if len(stack) == 0:\n                return False\n            else:\n                stack.pop()\n    return stack == []\n","entry_point":"check_balanced_parentheses","input":"\"((","output":"False"}
{"code":"def extract_first_three_unique_elements(lst):\n    extracted = []\n    unique_elements = set()\n\n    for element in lst:\n        if element not in unique_elements:\n            extracted.append(element)\n            unique_elements.add(element)\n\n        if len(extracted) == 3:\n            break\n\n    return extracted\n","entry_point":"extract_first_three_unique_elements","input":"[1, 2, 3, 4, 5, 6]","output":"[1, 2, 3]"}
{"code":"def extract_first_three_unique_elements(lst):\n    extracted = []\n    unique_elements = set()\n\n    for element in lst:\n        if element not in unique_elements:\n            extracted.append(element)\n            unique_elements.add(element)\n\n        if len(extracted) == 3:\n            break\n\n    return extracted\n","entry_point":"extract_first_three_unique_elements","input":"[1, 1, 2, 2, 3, 3, 4, 4, 5, 5]","output":"[1, 2, 3]"}
{"code":"def extract_first_three_unique_elements(lst):\n    extracted = []\n    unique_elements = set()\n\n    for element in lst:\n        if element not in unique_elements:\n            extracted.append(element)\n            unique_elements.add(element)\n\n        if len(extracted) == 3:\n            break\n\n    return extracted\n","entry_point":"extract_first_three_unique_elements","input":"[5, 4, 3, 2, 1]","output":"[5, 4, 3]"}
{"code":"def sorted_fruit_list(fruit_list):\n    fruit_list.sort()\n\n    output_string = \", \".join(fruit_list)\n\n    return output_string\n","entry_point":"sorted_fruit_list","input":"[\"apple\", \"banana\", \"cherry\"]","output":"\"apple, banana, cherry\""}
{"code":"def sorted_fruit_list(fruit_list):\n    fruit_list.sort()\n\n    output_string = \", \".join(fruit_list)\n\n    return output_string\n","entry_point":"sorted_fruit_list","input":"[\"grape\", \"kiwi\", \"mango\"]","output":"\"grape, kiwi, mango\""}
{"code":"def sorted_fruit_list(fruit_list):\n    fruit_list.sort()\n\n    output_string = \", \".join(fruit_list)\n\n    return output_string\n","entry_point":"sorted_fruit_list","input":"[\"orange\", \"pear\", \"strawberry\"]","output":"\"orange, pear, strawberry\""}
{"code":"def generate_sublists(lst):\n    n = len(lst)\n    sublists = []\n    for i in range(n):\n        for j in range(i + 1, n + 1):\n            sublists.append(lst[i:j])\n    return sublists\n","entry_point":"generate_sublists","input":"[1, 2, 3]","output":"[[1], [1, 2], [1, 2, 3], [2], [2, 3], [3]]"}
{"code":"def generate_sublists(lst):\n    n = len(lst)\n    sublists = []\n    for i in range(n):\n        for j in range(i + 1, n + 1):\n            sublists.append(lst[i:j])\n    return sublists\n","entry_point":"generate_sublists","input":"['a', 'b', 'c']","output":"[['a'], ['a', 'b'], ['a', 'b', 'c'], ['b'], ['b', 'c'], ['c']]"}
{"code":"def generate_sublists(lst):\n    n = len(lst)\n    sublists = []\n    for i in range(n):\n        for j in range(i + 1, n + 1):\n            sublists.append(lst[i:j])\n    return sublists\n","entry_point":"generate_sublists","input":"[]","output":"[]"}
{"code":"import re\n\n\ndef match_digit_dot_digit(string):\n    pattern = r\"\\d\\.\\d\"\n    return bool(re.search(pattern, string))\n","entry_point":"match_digit_dot_digit","input":"\"abc\"","output":"False"}
{"code":"import re\n\n\ndef match_digit_dot_digit(string):\n    pattern = r\"\\d\\.\\d\"\n    return bool(re.search(pattern, string))\n","entry_point":"match_digit_dot_digit","input":"\"123.4\"","output":"True"}
{"code":"import re\n\n\ndef match_digit_dot_digit(string):\n    pattern = r\"\\d\\.\\d\"\n    return bool(re.search(pattern, string))\n","entry_point":"match_digit_dot_digit","input":"\"5.678\"","output":"True"}
{"code":"def generate_migration_operation(app_name, model_name, field_name):\n    migration_operation = (\n        f\"migrations.AlterField(\"\n        f\"model_name='{model_name}', \"\n        f\"name='{field_name}', \"\n        f\"field=models.CharField(max_length=100), \"\n        f\"preserve_default=True\"\n        f\")\"\n    )\n    return migration_operation\n","entry_point":"generate_migration_operation","input":"'history', 'CommitteeMember', 'name'","output":"\"migrations.AlterField(model_name='CommitteeMember', name='name', field=models.CharField(max_length=100), preserve_default=True)\""}
{"code":"def generate_migration_operation(app_name, model_name, field_name):\n    migration_operation = (\n        f\"migrations.AlterField(\"\n        f\"model_name='{model_name}', \"\n        f\"name='{field_name}', \"\n        f\"field=models.CharField(max_length=100), \"\n        f\"preserve_default=True\"\n        f\")\"\n    )\n    return migration_operation\n","entry_point":"generate_migration_operation","input":"'app1', 'Model1', 'field1'","output":"\"migrations.AlterField(model_name='Model1', name='field1', field=models.CharField(max_length=100), preserve_default=True)\""}
{"code":"def generate_migration_operation(app_name, model_name, field_name):\n    migration_operation = (\n        f\"migrations.AlterField(\"\n        f\"model_name='{model_name}', \"\n        f\"name='{field_name}', \"\n        f\"field=models.CharField(max_length=100), \"\n        f\"preserve_default=True\"\n        f\")\"\n    )\n    return migration_operation\n","entry_point":"generate_migration_operation","input":"'app2', 'Model2', 'field2'","output":"\"migrations.AlterField(model_name='Model2', name='field2', field=models.CharField(max_length=100), preserve_default=True)\""}
{"code":"def find_common_elements_sum(list1, list2):\n    common_elements = set(list1) & set(list2)\n    return sum(common_elements)\n","entry_point":"find_common_elements_sum","input":"[1, 2, 3], [2, 3, 4]","output":"5"}
{"code":"def find_common_elements_sum(list1, list2):\n    common_elements = set(list1) & set(list2)\n    return sum(common_elements)\n","entry_point":"find_common_elements_sum","input":"[5, 6, 7], [7, 8, 9]","output":"7"}
{"code":"def find_common_elements_sum(list1, list2):\n    common_elements = set(list1) & set(list2)\n    return sum(common_elements)\n","entry_point":"find_common_elements_sum","input":"[10, 20, 30], [20, 30, 40]","output":"50"}
{"code":"import math\n\n\ndef calculate_forecast_period(df):\n    forecast_out = int(math.ceil(0.01 * len(df)))\n    return forecast_out\n","entry_point":"calculate_forecast_period","input":"[1, 2, 3, 4, 5]","output":"1"}
{"code":"import math\n\n\ndef calculate_forecast_period(df):\n    forecast_out = int(math.ceil(0.01 * len(df)))\n    return forecast_out\n","entry_point":"calculate_forecast_period","input":"[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]","output":"1"}
{"code":"import math\n\n\ndef calculate_forecast_period(df):\n    forecast_out = int(math.ceil(0.01 * len(df)))\n    return forecast_out\n","entry_point":"calculate_forecast_period","input":"[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]","output":"1"}
{"code":"def sort_by_attribute(array, attr):\n    for q in range(len(array) - 1):\n        for i in range(len(array) - 1 - q):\n            if array[i][attr] > array[i + 1][attr]:\n                array[i], array[i + 1] = array[i + 1], array[i]\n    return array\n","entry_point":"sort_by_attribute","input":"[{'name': 'Alice', 'age': 25}, {'name': 'Bob', 'age': 20}], 'age'","output":"[{'name': 'Bob', 'age': 20}, {'name': 'Alice', 'age': 25}]"}
{"code":"def sort_by_attribute(array, attr):\n    for q in range(len(array) - 1):\n        for i in range(len(array) - 1 - q):\n            if array[i][attr] > array[i + 1][attr]:\n                array[i], array[i + 1] = array[i + 1], array[i]\n    return array\n","entry_point":"sort_by_attribute","input":"[{'name': 'John', 'score': 85}, {'name': 'Emma', 'score': 92}], 'score'","output":"[{'name': 'John', 'score': 85}, {'name': 'Emma', 'score': 92}]"}
{"code":"def sort_by_attribute(array, attr):\n    for q in range(len(array) - 1):\n        for i in range(len(array) - 1 - q):\n            if array[i][attr] > array[i + 1][attr]:\n                array[i], array[i + 1] = array[i + 1], array[i]\n    return array\n","entry_point":"sort_by_attribute","input":"[{'city': 'New York', 'population': 8000000}, {'city': 'Los Angeles', 'population': 4000000}], 'population'","output":"[{'city': 'Los Angeles', 'population': 4000000}, {'city': 'New York', 'population': 8000000}]"}
{"code":"from typing import List\n\n\ndef paginate_items(\n    items: List[str], items_per_page: int, page_number: int\n) -> List[str]:\n    start_index = (page_number - 1) * items_per_page\n    end_index = start_index + items_per_page\n    return items[start_index:end_index]\n","entry_point":"paginate_items","input":"[\"apple\", \"banana\", \"cherry\", \"date\", \"elderberry\"], 2, 1","output":"[\"apple\", \"banana\"]"}
{"code":"from typing import List\n\n\ndef paginate_items(\n    items: List[str], items_per_page: int, page_number: int\n) -> List[str]:\n    start_index = (page_number - 1) * items_per_page\n    end_index = start_index + items_per_page\n    return items[start_index:end_index]\n","entry_point":"paginate_items","input":"[\"apple\", \"banana\", \"cherry\", \"date\", \"elderberry\"], 2, 2","output":"[\"cherry\", \"date\"]"}
{"code":"from typing import List\n\n\ndef paginate_items(\n    items: List[str], items_per_page: int, page_number: int\n) -> List[str]:\n    start_index = (page_number - 1) * items_per_page\n    end_index = start_index + items_per_page\n    return items[start_index:end_index]\n","entry_point":"paginate_items","input":"[\"apple\", \"banana\", \"cherry\", \"date\", \"elderberry\"], 3, 2","output":"[\"date\", \"elderberry\"]"}
{"code":"def long_integer_doubler(n_str):\n    carry = 0\n    result = []\n    for digit in reversed(n_str):\n        temp = int(digit) * 2 + carry\n        if temp >= 10:\n            carry = 1\n            temp -= 10\n        else:\n            carry = 0\n        result.append(str(temp))\n    if carry:\n        result.append(str(carry))\n    return \"\".join(reversed(result))\n","entry_point":"long_integer_doubler","input":"\"123456789\"","output":"\"246913578\""}
{"code":"def long_integer_doubler(n_str):\n    carry = 0\n    result = []\n    for digit in reversed(n_str):\n        temp = int(digit) * 2 + carry\n        if temp >= 10:\n            carry = 1\n            temp -= 10\n        else:\n            carry = 0\n        result.append(str(temp))\n    if carry:\n        result.append(str(carry))\n    return \"\".join(reversed(result))\n","entry_point":"long_integer_doubler","input":"\"999999999\"","output":"\"1999999998\""}
{"code":"def long_integer_doubler(n_str):\n    carry = 0\n    result = []\n    for digit in reversed(n_str):\n        temp = int(digit) * 2 + carry\n        if temp >= 10:\n            carry = 1\n            temp -= 10\n        else:\n            carry = 0\n        result.append(str(temp))\n    if carry:\n        result.append(str(carry))\n    return \"\".join(reversed(result))\n","entry_point":"long_integer_doubler","input":"\"9876543210\"","output":"\"19753086420\""}
{"code":"def get_preset_coordinates(preset_name):\n    presets = {\"o\": (0.0, 0.0, 0.0), \"c\": (3.5, 3.5, 3.5), \"c2\": (3.5, 3.5, 0.0)}\n    if preset_name in presets:\n        return presets[preset_name]\n    else:\n        return \"Preset not available\"\n","entry_point":"get_preset_coordinates","input":"\"o\"","output":"(0.0, 0.0, 0.0)"}
{"code":"def get_preset_coordinates(preset_name):\n    presets = {\"o\": (0.0, 0.0, 0.0), \"c\": (3.5, 3.5, 3.5), \"c2\": (3.5, 3.5, 0.0)}\n    if preset_name in presets:\n        return presets[preset_name]\n    else:\n        return \"Preset not available\"\n","entry_point":"get_preset_coordinates","input":"\"c\"","output":"(3.5, 3.5, 3.5)"}
{"code":"def get_preset_coordinates(preset_name):\n    presets = {\"o\": (0.0, 0.0, 0.0), \"c\": (3.5, 3.5, 3.5), \"c2\": (3.5, 3.5, 0.0)}\n    if preset_name in presets:\n        return presets[preset_name]\n    else:\n        return \"Preset not available\"\n","entry_point":"get_preset_coordinates","input":"\"c2\"","output":"(3.5, 3.5, 0.0)"}
{"code":"def find_common_elements_product(list1, list2):\n    common_elements = set(list1) & set(list2)\n    product = 1\n    for element in common_elements:\n        product *= element\n    return product\n","entry_point":"find_common_elements_product","input":"[2, 3, 4], [3, 4, 5]","output":"12"}
{"code":"def find_common_elements_product(list1, list2):\n    common_elements = set(list1) & set(list2)\n    product = 1\n    for element in common_elements:\n        product *= element\n    return product\n","entry_point":"find_common_elements_product","input":"[1, 2, 3], [4, 5, 6]","output":"1"}
{"code":"def find_common_elements_product(list1, list2):\n    common_elements = set(list1) & set(list2)\n    product = 1\n    for element in common_elements:\n        product *= element\n    return product\n","entry_point":"find_common_elements_product","input":"[2, 3, 4], [4, 5, 6]","output":"4"}
{"code":"def quiz_system_behavior(allow_multiple_answer, zoom_level):\n    if allow_multiple_answer:\n        behavior_message = \"Players can provide multiple answers to the same question\"\n    else:\n        behavior_message = \"Players can only provide a single answer to each question\"\n    return f\"If multiple answers are allowed and the maximum zoom level is {zoom_level}, the quiz system behavior is: {behavior_message} and the maximum zoom level allowed is {min(zoom_level, 2)}.\"\n","entry_point":"quiz_system_behavior","input":"True, 3","output":"\"If multiple answers are allowed and the maximum zoom level is 3, the quiz system behavior is: Players can provide multiple answers to the same question and the maximum zoom level allowed is 2.\""}
{"code":"def quiz_system_behavior(allow_multiple_answer, zoom_level):\n    if allow_multiple_answer:\n        behavior_message = \"Players can provide multiple answers to the same question\"\n    else:\n        behavior_message = \"Players can only provide a single answer to each question\"\n    return f\"If multiple answers are allowed and the maximum zoom level is {zoom_level}, the quiz system behavior is: {behavior_message} and the maximum zoom level allowed is {min(zoom_level, 2)}.\"\n","entry_point":"quiz_system_behavior","input":"False, 1","output":"\"If multiple answers are allowed and the maximum zoom level is 1, the quiz system behavior is: Players can only provide a single answer to each question and the maximum zoom level allowed is 1.\""}
{"code":"def quiz_system_behavior(allow_multiple_answer, zoom_level):\n    if allow_multiple_answer:\n        behavior_message = \"Players can provide multiple answers to the same question\"\n    else:\n        behavior_message = \"Players can only provide a single answer to each question\"\n    return f\"If multiple answers are allowed and the maximum zoom level is {zoom_level}, the quiz system behavior is: {behavior_message} and the maximum zoom level allowed is {min(zoom_level, 2)}.\"\n","entry_point":"quiz_system_behavior","input":"True, 5","output":"\"If multiple answers are allowed and the maximum zoom level is 5, the quiz system behavior is: Players can provide multiple answers to the same question and the maximum zoom level allowed is 2.\""}
{"code":"import math\n\n\ndef floor_float(num):\n    return math.floor(num)\n","entry_point":"floor_float","input":"3.14","output":"3"}
{"code":"import math\n\n\ndef floor_float(num):\n    return math.floor(num)\n","entry_point":"floor_float","input":"5.67","output":"5"}
{"code":"import math\n\n\ndef floor_float(num):\n    return math.floor(num)\n","entry_point":"floor_float","input":"10.0","output":"10"}
{"code":"def remove_vowels(sentence):\n    vowels = \"aeiouAEIOU\"\n    result = \"\"\n    for char in sentence:\n        if char not in vowels:\n            result += char\n    return result\n","entry_point":"remove_vowels","input":"\"Hello, World!\"","output":"\"Hll, Wrld!\""}
{"code":"def remove_vowels(sentence):\n    vowels = \"aeiouAEIOU\"\n    result = \"\"\n    for char in sentence:\n        if char not in vowels:\n            result += char\n    return result\n","entry_point":"remove_vowels","input":"\"Python is awesome!\"","output":"\"Pythn s wsm!\""}
{"code":"def remove_vowels(sentence):\n    vowels = \"aeiouAEIOU\"\n    result = \"\"\n    for char in sentence:\n        if char not in vowels:\n            result += char\n    return result\n","entry_point":"remove_vowels","input":"\"I love programming.\"","output":"\" lv prgrmmng.\""}
{"code":"def merge_objects(a, b):\n    merged = {}\n    for key in a:\n        if key.isalpha():\n            merged[key] = a[key]\n    for key in b:\n        if key.isalpha():\n            merged[key] = b[key]\n    for key in a:\n        if isinstance(a[key], dict) and isinstance(b.get(key), dict):\n            merged[key] = merge_objects(a[key], b[key])\n    for key in b:\n        if key not in a and isinstance(b[key], dict):\n            merged[key] = merge_objects({}, b[key])\n    sorted_merged = {}\n    for key in sorted(merged):\n        sorted_merged[key] = merged[key]\n    return sorted_merged\n","entry_point":"merge_objects","input":"{'a': 1, 'b': 2}, {'c': 3, 'd': 4}","output":"{'a': 1, 'b': 2, 'c': 3, 'd': 4}"}
{"code":"def merge_objects(a, b):\n    merged = {}\n    for key in a:\n        if key.isalpha():\n            merged[key] = a[key]\n    for key in b:\n        if key.isalpha():\n            merged[key] = b[key]\n    for key in a:\n        if isinstance(a[key], dict) and isinstance(b.get(key), dict):\n            merged[key] = merge_objects(a[key], b[key])\n    for key in b:\n        if key not in a and isinstance(b[key], dict):\n            merged[key] = merge_objects({}, b[key])\n    sorted_merged = {}\n    for key in sorted(merged):\n        sorted_merged[key] = merged[key]\n    return sorted_merged\n","entry_point":"merge_objects","input":"{'a': 1, 'b': 2, 'nested': {'x': 5, 'y': 6}}, {'c': 3, 'd': 4, 'nested': {'y': 7, 'z': 8}}","output":"{'a': 1, 'b': 2, 'c': 3, 'd': 4, 'nested': {'x': 5, 'y': 7, 'z': 8}}"}
{"code":"def merge_objects(a, b):\n    merged = {}\n    for key in a:\n        if key.isalpha():\n            merged[key] = a[key]\n    for key in b:\n        if key.isalpha():\n            merged[key] = b[key]\n    for key in a:\n        if isinstance(a[key], dict) and isinstance(b.get(key), dict):\n            merged[key] = merge_objects(a[key], b[key])\n    for key in b:\n        if key not in a and isinstance(b[key], dict):\n            merged[key] = merge_objects({}, b[key])\n    sorted_merged = {}\n    for key in sorted(merged):\n        sorted_merged[key] = merged[key]\n    return sorted_merged\n","entry_point":"merge_objects","input":"{'1': 1, '2': 2}, {'c': 3, 'd': 4}","output":"{'c': 3, 'd': 4}"}
{"code":"def find_max_in_dict(d):\n    max_val = float(\"-inf\")\n    try:\n        for key in d:\n            if isinstance(d[key], dict):\n                temp_max = find_max_in_dict(d[key])\n                if temp_max > max_val:\n                    max_val = temp_max\n            else:\n                if d[key] > max_val:\n                    max_val = d[key]\n    except Exception as e:\n        print(f\"An error occurred: {str(e)}\")\n\n    return max_val\n","entry_point":"find_max_in_dict","input":"{'a': 1, 'b': 2, 'c': 3}","output":"3"}
{"code":"def find_max_in_dict(d):\n    max_val = float(\"-inf\")\n    try:\n        for key in d:\n            if isinstance(d[key], dict):\n                temp_max = find_max_in_dict(d[key])\n                if temp_max > max_val:\n                    max_val = temp_max\n            else:\n                if d[key] > max_val:\n                    max_val = d[key]\n    except Exception as e:\n        print(f\"An error occurred: {str(e)}\")\n\n    return max_val\n","entry_point":"find_max_in_dict","input":"{'a': {'x': 5, 'y': 8}, 'b': 2, 'c': 3}","output":"8"}
{"code":"def find_max_in_dict(d):\n    max_val = float(\"-inf\")\n    try:\n        for key in d:\n            if isinstance(d[key], dict):\n                temp_max = find_max_in_dict(d[key])\n                if temp_max > max_val:\n                    max_val = temp_max\n            else:\n                if d[key] > max_val:\n                    max_val = d[key]\n    except Exception as e:\n        print(f\"An error occurred: {str(e)}\")\n\n    return max_val\n","entry_point":"find_max_in_dict","input":"{'a': {'x': 5, 'y': 8}, 'b': {'p': 10, 'q': 12}, 'c': 3}","output":"12"}
{"code":"grades_dict = {\n    \"student1\": [1, 2, 3],\n    \"student2\": [4, 5, 6],\n    \"student3\": [7, 8, 9],\n}\nvalues_key = \"student3\"\n\n\ndef calculate_avg_from_dict(dict, key):\n    total_sum = 0\n    values = dict[key]\n    for value in values:\n        total_sum += value\n    return total_sum \/ len(values)\n","entry_point":"calculate_avg_from_dict","input":"grades_dict, \"student1\"","output":"2"}
{"code":"grades_dict = {\n    \"student1\": [1, 2, 3],\n    \"student2\": [4, 5, 6],\n    \"student3\": [7, 8, 9],\n}\nvalues_key = \"student3\"\n\n\ndef calculate_avg_from_dict(dict, key):\n    total_sum = 0\n    values = dict[key]\n    for value in values:\n        total_sum += value\n    return total_sum \/ len(values)\n","entry_point":"calculate_avg_from_dict","input":"grades_dict, \"student2\"","output":"5"}
{"code":"grades_dict = {\n    \"student1\": [1, 2, 3],\n    \"student2\": [4, 5, 6],\n    \"student3\": [7, 8, 9],\n}\nvalues_key = \"student3\"\n\n\ndef calculate_avg_from_dict(dict, key):\n    total_sum = 0\n    values = dict[key]\n    for value in values:\n        total_sum += value\n    return total_sum \/ len(values)\n","entry_point":"calculate_avg_from_dict","input":"grades_dict, \"student3\"","output":"8"}
{"code":"def replace_e(string):\n    if string is None or string == \"\":\n        return None\n\n    if \"E\" in string:\n        raise ValueError(\"Uppercase 'E' is not allowed.\")\n\n    return string.replace(\"e\", \"*\")\n","entry_point":"replace_e","input":"\"hello\"","output":"\"h*llo\""}
{"code":"def replace_e(string):\n    if string is None or string == \"\":\n        return None\n\n    if \"E\" in string:\n        raise ValueError(\"Uppercase 'E' is not allowed.\")\n\n    return string.replace(\"e\", \"*\")\n","entry_point":"replace_e","input":"\"elephant\"","output":"\"*l*phant\""}
{"code":"def replace_e(string):\n    if string is None or string == \"\":\n        return None\n\n    if \"E\" in string:\n        raise ValueError(\"Uppercase 'E' is not allowed.\")\n\n    return string.replace(\"e\", \"*\")\n","entry_point":"replace_e","input":"\"\"","output":"None"}
{"code":"import heapq\n\n\ndef find_n_smallest(lst, n):\n    return heapq.nsmallest(n, lst)\n","entry_point":"find_n_smallest","input":"[4, 2, 7, 1, 5], 3","output":"[1, 2, 4]"}
{"code":"import heapq\n\n\ndef find_n_smallest(lst, n):\n    return heapq.nsmallest(n, lst)\n","entry_point":"find_n_smallest","input":"[10, 20, 30, 40, 50], 2","output":"[10, 20]"}
{"code":"import heapq\n\n\ndef find_n_smallest(lst, n):\n    return heapq.nsmallest(n, lst)\n","entry_point":"find_n_smallest","input":"[1, 1, 1, 1, 1], 5","output":"[1, 1, 1, 1, 1]"}
{"code":"from math import gcd, sqrt\n\n\ndef is_q(x):\n    sq = sqrt(x)\n    return sq == int(sq)\n","entry_point":"is_q","input":"4","output":"True"}
{"code":"from math import gcd, sqrt\n\n\ndef is_q(x):\n    sq = sqrt(x)\n    return sq == int(sq)\n","entry_point":"is_q","input":"5","output":"False"}
{"code":"from math import gcd, sqrt\n\n\ndef is_q(x):\n    sq = sqrt(x)\n    return sq == int(sq)\n","entry_point":"is_q","input":"9","output":"True"}
{"code":"import datetime\n\n\ndef add_10_days(date):\n    updated_date = date + datetime.timedelta(days=10)\n\n    return updated_date\n","entry_point":"add_10_days","input":"datetime.datetime(2022, 1, 1","output":"datetime.datetime(2022, 1, 11)"}
{"code":"import datetime\n\n\ndef add_10_days(date):\n    updated_date = date + datetime.timedelta(days=10)\n\n    return updated_date\n","entry_point":"add_10_days","input":"datetime.datetime(2023, 12, 20","output":"datetime.datetime(2023, 12, 30)"}
{"code":"import datetime\n\n\ndef add_10_days(date):\n    updated_date = date + datetime.timedelta(days=10)\n\n    return updated_date\n","entry_point":"add_10_days","input":"datetime.datetime(2024, 2, 28","output":"datetime.datetime(2024, 3, 9)"}
